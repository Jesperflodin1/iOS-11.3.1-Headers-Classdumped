//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "RecentlyClosedTabViewControllerDelegate.h"
#import "TabBarDelegate.h"
#import "TabOverviewDelegate.h"
#import "TabSnapshotCacheDelegate.h"
#import "TiltedTabViewDelegate.h"

@class Application, BrowserController, CloudTabStore, NSArray, NSMapTable, NSMutableArray, NSMutableSet, NSSet, NSString, NSTimer, NSUUID, RecentlyClosedTabViewController, TabBar, TabDocument, TabOverview, TabSnapshotCache, TiltedTabView, UIBarButtonItem, UIButton, UIImage, _SFBrowserSavedState;

@interface TabController : NSObject <RecentlyClosedTabViewControllerDelegate, TabBarDelegate, TabOverviewDelegate, TabSnapshotCacheDelegate, TiltedTabViewDelegate>
{
    BrowserController *_browserController;
    NSMutableArray *_normalTabDocuments;
    NSMutableArray *_privateTabDocuments;
    NSTimer *_saveStateTimer;
    NSTimer *_stateValidateTimer;
    TabDocument *_tabDocumentBeingHiddenFromTabView;
    NSMutableSet *_tabDocumentsAboutToBeClosedInTiltedTabView;
    UIBarButtonItem *_tiltedTabViewAddTabButton;
    _Bool _tiltedTabViewIsShowing;
    _Bool _tabOverviewIsShowing;
    NSTimer *_updateContinuityTimer;
    _Bool _tabBarItemsFixed;
    _Bool _tabViewItemsFixed;
    RecentlyClosedTabViewController *_recentlyClosedTabController;
    TabSnapshotCache *_snapshotCache;
    _Bool _flushPendingSnapshots;
    CDUnknownBlockType _flushPendingSnapshotsCompletion;
    _Bool _didRestoreCloudTabsForEducationDevice;
    _Bool _didReceiveFirstCloudTabDeviceUpdateNotification;
    TabDocument *_tabDocumentBeingDragged;
    TabDocument *_placeholderTabDocumentBeingDragged;
    NSArray *_tabDocumentsToKeepVisible;
    NSMapTable *_tabOverviewItemToTabDocumentMap;
    NSMapTable *_tiltedTabItemToTabDocumentMap;
    NSUUID *_blankDocumentGroupIdentifier;
    NSUUID *_privateBlankDocumentGroupIdentifier;
    _Bool _switchingActiveDocument;
    _Bool _isClosingDocuments;
    _Bool _snapshotsAreEnabled;
    _Bool _tabsAreOnLease;
    _Bool _shouldTogglePrivateBrowsingOnSplit;
    _Bool _shouldDeferSnapshotRequest;
    TabBar *_tabBar;
    TabDocument *_privateActiveTabDocument;
    TabDocument *_normalActiveTabDocument;
    _SFBrowserSavedState *_savedState;
    long long _privateBrowsingMode;
    TiltedTabView *_tiltedTabView;
    UIButton *_tiltedTabViewPrivateBrowsingButton;
    TabOverview *_tabOverview;
    long long _tabDisplayMode;
}

@property(nonatomic) _Bool shouldDeferSnapshotRequest; // @synthesize shouldDeferSnapshotRequest=_shouldDeferSnapshotRequest;
@property(nonatomic) _Bool shouldTogglePrivateBrowsingOnSplit; // @synthesize shouldTogglePrivateBrowsingOnSplit=_shouldTogglePrivateBrowsingOnSplit;
@property(nonatomic) _Bool tabsAreOnLease; // @synthesize tabsAreOnLease=_tabsAreOnLease;
@property(nonatomic) long long tabDisplayMode; // @synthesize tabDisplayMode=_tabDisplayMode;
@property(nonatomic) _Bool snapshotsAreEnabled; // @synthesize snapshotsAreEnabled=_snapshotsAreEnabled;
@property(readonly, nonatomic) _Bool tabOverviewIsShowing; // @synthesize tabOverviewIsShowing=_tabOverviewIsShowing;
@property(readonly, retain, nonatomic) TabOverview *tabOverview; // @synthesize tabOverview=_tabOverview;
@property(readonly, nonatomic) UIButton *tiltedTabViewPrivateBrowsingButton; // @synthesize tiltedTabViewPrivateBrowsingButton=_tiltedTabViewPrivateBrowsingButton;
@property(readonly, retain, nonatomic) TiltedTabView *tiltedTabView; // @synthesize tiltedTabView=_tiltedTabView;
@property(nonatomic) long long privateBrowsingMode; // @synthesize privateBrowsingMode=_privateBrowsingMode;
@property(retain, nonatomic) _SFBrowserSavedState *savedState; // @synthesize savedState=_savedState;
@property(retain, nonatomic) TabDocument *normalActiveTabDocument; // @synthesize normalActiveTabDocument=_normalActiveTabDocument;
@property(retain, nonatomic) TabDocument *privateActiveTabDocument; // @synthesize privateActiveTabDocument=_privateActiveTabDocument;
@property(readonly, copy, nonatomic) NSArray *privateTabDocuments; // @synthesize privateTabDocuments=_privateTabDocuments;
@property(readonly, copy, nonatomic) NSArray *tabDocuments; // @synthesize tabDocuments=_normalTabDocuments;
@property(readonly, retain, nonatomic) TabBar *tabBar; // @synthesize tabBar=_tabBar;
- (void).cxx_destruct;
- (void)didTransitionTabView;
- (void)willTransitionTabView;
- (void)endSearching;
@property(readonly, nonatomic) NSArray *tabDocumentsMatchingSearchTerm;
@property(retain, nonatomic) NSString *searchTerm;
- (void)_updateUserActivityTimerFired;
- (void)saveTabDocumentUserActivitySoon:(id)arg1;
- (void)_cancelPendingUpdateUserActivityTimer;
- (_Bool)tabSnapshotCacheShouldDeferNextSnapshotRequest:(id)arg1;
- (_Bool)tabSnapshotCache:(id)arg1 shouldRequestSavedSnapshotWithIdentifier:(id)arg2;
- (void)tabSnapshotCacheDidFinishUpdating:(id)arg1;
- (void)_updateTabSnapshotsWithIdentifier:(id)arg1 animated:(_Bool)arg2;
- (void)_updateTabSnapshotsAnimated:(_Bool)arg1;
- (void)tabSnapshotCache:(id)arg1 didEvictSnapshotWithIdentifier:(id)arg2;
- (void)tabSnapshotCache:(id)arg1 didCacheSnapshotWithIdentifier:(id)arg2;
- (void)tabSnapshotCache:(id)arg1 requestSnapshotWithIdentifier:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)requestSnapshotForTabDocument:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)_cachedContentImageForTabDocument:(id)arg1 allowScaledImage:(_Bool)arg2;
- (id)cachedContentImageForTabDocument:(id)arg1;
- (void)flushPendingSnapshotsWithCompletion:(CDUnknownBlockType)arg1;
- (void)_updateSnapshotCacheState;
- (void)invalidateSnapshotForTabDocument:(id)arg1;
- (void)tabDocumentDidUpdateUUID:(id)arg1;
- (void)_updateSnapshotIdentifiers;
- (void)_updateTabOverviewItems;
@property(nonatomic) _Bool usesTabOverview;
- (void)tabOverview:(id)arg1 closeCloudTab:(id)arg2 onDevice:(id)arg3;
- (_Bool)_tabViewCanCloseDocument:(id)arg1;
- (_Bool)_itemWithTitle:(id)arg1 URLString:(id)arg2 matchesSearchText:(id)arg3;
- (_Bool)_cloudTab:(id)arg1 matchesSearchText:(id)arg2;
- (_Bool)_document:(id)arg1 matchesSearchText:(id)arg2;
- (void)tabOverviewDidChangeAllowsInteractivePresentation:(id)arg1;
- (_Bool)tabOverview:(id)arg1 cloudTab:(id)arg2 matchesSearchText:(id)arg3;
- (_Bool)tabOverview:(id)arg1 item:(id)arg2 matchesSearchText:(id)arg3;
- (void)tabOverview:(id)arg1 didProduceNavigationIntent:(id)arg2;
- (id)snapshotForTabOverview:(id)arg1 item:(id)arg2;
- (id)blankSnapshotForTabOverview:(id)arg1;
- (_Bool)tabOverview:(id)arg1 itemHasValidSnapshot:(id)arg2;
- (void)tabOverview:(id)arg1 relinquishContentView:(id)arg2 forItem:(id)arg3;
- (id)tabOverview:(id)arg1 borrowContentViewForItem:(id)arg2 topBackdropHeight:(double)arg3;
- (double)tabOverview:(id)arg1 headerHeightForItem:(id)arg2;
- (void)tabOverviewDidUpdateItemVisibilityOrder:(id)arg1;
- (void)tabOverview:(id)arg1 didMoveItem:(id)arg2 overItem:(id)arg3;
- (void)tabOverview:(id)arg1 closeItem:(id)arg2;
- (_Bool)tabOverviewCanSwipeToClose:(id)arg1;
- (_Bool)tabOverview:(id)arg1 canCloseItem:(id)arg2;
- (void)_createPlaceholderImageForTabDocument:(id)arg1;
- (void)tabOverview:(id)arg1 didSelectItem:(id)arg2;
- (void)_addNewActiveTabOverviewTab;
- (id)itemsToKeepVisibleForTabOverview:(id)arg1;
- (id)currentItemForTabOverview:(id)arg1;
- (void)tabOverviewDidCancelDismissal:(id)arg1;
- (void)tabOverviewDidBeginDismissal:(id)arg1;
- (void)tabOverviewDidDismiss:(id)arg1;
- (void)tabOverviewWillPresent:(id)arg1;
- (id)_tabDocumentRepresentedByTabOverviewItem:(id)arg1;
- (void)showTabExposePopoverForTabOverview:(id)arg1;
- (void)showTabExposePopoverForTiltedTabView:(id)arg1;
- (void)tiltedTabViewDidEndSearching:(id)arg1;
- (void)tiltedTabViewWillBeginSearching:(id)arg1;
- (_Bool)tiltedTabView:(id)arg1 cloudTab:(id)arg2 matchesSearchText:(id)arg3;
- (_Bool)tiltedTabView:(id)arg1 item:(id)arg2 matchesSearchText:(id)arg3;
- (void)_addNewActiveTiltedTabViewTabWithNavigationIntent:(id)arg1;
- (void)_addNewActiveTiltedTabViewTab;
- (void)tiltedTabView:(id)arg1 closeCloudTab:(id)arg2 onDevice:(id)arg3;
- (void)tiltedTabView:(id)arg1 didProduceNavigationIntent:(id)arg2;
- (id)snapshotForTiltedTabView:(id)arg1 item:(id)arg2;
- (id)blankSnapshotForTiltedTabView:(id)arg1;
@property(readonly, nonatomic) UIImage *blankSnapshot;
- (_Bool)tiltedTabView:(id)arg1 itemHasValidSnapshot:(id)arg2;
- (struct CGSize)suggestedSnapshotSizeForTiltedTabView:(id)arg1;
- (void)tiltedTabView:(id)arg1 animateTopBackdropView:(id)arg2 hidden:(_Bool)arg3;
- (double)tiltedTabView:(id)arg1 headerHeightForItem:(id)arg2;
- (void)tiltedTabView:(id)arg1 relinquishContentView:(id)arg2 forItem:(id)arg3;
- (id)tiltedTabView:(id)arg1 borrowContentViewForItem:(id)arg2 withTopBackdropView:(id *)arg3 ofHeight:(double)arg4;
- (id)expectedSuperviewForTiltedTabView:(id)arg1;
- (id)itemsToKeepVisibleForTiltedTabView:(id)arg1;
- (id)currentItemForTiltedTabView:(id)arg1;
- (void)tiltedTabViewDidUpdateItemVisibilityOrder:(id)arg1;
- (void)tiltedTabView:(id)arg1 didMoveItem:(id)arg2 overItem:(id)arg3;
- (void)tiltedTabView:(id)arg1 closeItem:(id)arg2;
- (_Bool)tiltedTabView:(id)arg1 canCloseItem:(id)arg2;
- (void)tiltedTabView:(id)arg1 didSelectItem:(id)arg2;
- (void)tiltedTabViewDidDismiss:(id)arg1;
- (void)tiltedTabViewWillDismiss:(id)arg1;
- (void)tiltedTabViewDidPresent:(id)arg1;
- (void)tiltedTabViewWillPresent:(id)arg1;
- (void)_updateCloudTabStorePeriodicUpdates;
- (id)_tabDocumentRepresentedByTiltedTabItem:(id)arg1;
- (void)dismissTabViewAnimated:(_Bool)arg1;
- (void)dismissTabView;
- (void)_doneLongPress:(id)arg1;
- (void)_doneLongPressRecognized:(id)arg1;
- (void)_addTabLongPress:(id)arg1;
- (void)_addTabLongPressRecognized:(id)arg1;
- (void)updateTiltedTabViewToolbarItems;
- (_Bool)_privateBrowsingButtonSelected;
- (void)_updateTiltedTabViewPrivateBrowsingButtonVisibility;
@property(readonly, nonatomic) NSArray *tiltedTabViewToolbarItems;
- (id)_makeOpenNewTabInteraction;
- (void)_updateTabViewCloudTabs;
- (void)updateEducationTabsLastSyncDate;
- (void)_restoreEducationTabsIfNecessaryAnimated:(_Bool)arg1;
- (void)restoreEducationDeviceTabs;
- (void)_cloudTabsDidUpdate:(id)arg1;
- (void)_updateTiltedTabViewItemsWithTransition:(long long)arg1;
- (void)_updateTiltedTabViewItemsAnimated:(_Bool)arg1;
- (void)_updateTiltedTabViewItems;
@property(nonatomic) _Bool usesTiltedTabView;
- (void)updateTabExposeButtonIndicator;
- (void)_updateExplanationViewVisibilityAnimated:(_Bool)arg1;
- (_Bool)_shouldShowExplanationView;
- (void)_suppressSingleEmptyTabIfAppropriate;
- (void)_openBlankTabDocumentInTabBarWithPrivateBrowsing:(_Bool)arg1;
- (void)openBlankTabDocumentInTabBar;
- (void)updateTabBarAnimated:(_Bool)arg1;
- (void)_updateTabBarAnimated:(_Bool)arg1 keepingDocumentVisible:(id)arg2;
- (void)recentlyClosedTabViewController:(id)arg1 didSelectTabStateWithData:(id)arg2;
- (void)togglePrivateBrowsingOnSplitIfNeeded;
- (void)returnTabDocumentsToTabController:(id)arg1;
- (void)mergeAllTabDocumentsFromTabController:(id)arg1;
- (void)_adoptActiveTabDocument:(id)arg1 forPrivateBrowsing:(_Bool)arg2;
- (void)_returnTabDocumentsToTabController:(id)arg1 forPrivateBrowsingTabs:(_Bool)arg2;
- (void)_mergeTabDocumentsFromTabController:(id)arg1 forPrivateBrowsingTabs:(_Bool)arg2;
- (_Bool)_tabsAreAllEmpty:(id)arg1;
- (void)acceptDropWithTabDocument:(id)arg1;
- (void)cancelDragInteraction;
- (void)closeDragInteractionPlaceholderTabDocument;
- (id)insertDragInteractionPlaceholderTabDocumentForTabDocument:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)tabOverview:(id)arg1 didEndDragInteractionAtPoint:(struct CGPoint)arg2;
- (void)tabOverview:(id)arg1 didUpdateDragInteractionPoint:(struct CGPoint)arg2;
- (void)tabOverview:(id)arg1 didBeginDragInteractionForItem:(id)arg2 point:(struct CGPoint)arg3 anchorPoint:(struct CGPoint)arg4 zPosition:(double)arg5;
- (_Bool)tabOverview:(id)arg1 canBeginDragInteractionForItem:(id)arg2;
- (void)tabBar:(id)arg1 item:(id)arg2 didProduceNavigationIntent:(id)arg3;
- (void)tabBar:(id)arg1 didEndDragInteractionAtPoint:(struct CGPoint)arg2;
- (void)tabBar:(id)arg1 didUpdateDragInteractionPoint:(struct CGPoint)arg2;
- (void)tabBar:(id)arg1 didBeginDragInteractionForTabBarItem:(id)arg2 atPoint:(struct CGPoint)arg3 dragType:(long long)arg4;
- (_Bool)tabBar:(id)arg1 canBeginDragInteractionForTabBarItem:(id)arg2;
- (void)tabBar:(id)arg1 activateItem:(id)arg2;
- (void)tabBar:(id)arg1 toggleMediaCaptureMutedForItem:(id)arg2;
- (void)tabBar:(id)arg1 closeItem:(id)arg2;
- (void)tabBar:(id)arg1 moveItem:(id)arg2 overItem:(id)arg3;
- (void)tabBarAddTab:(id)arg1;
- (_Bool)tabBar:(id)arg1 canCloseItem:(id)arg2;
- (_Bool)tabBar:(id)arg1 canMoveItem:(id)arg2;
- (id)_tabDocumentRepresentedByTabBarItem:(id)arg1;
- (void)_setTabBarItemsFixed:(_Bool)arg1;
@property(nonatomic) _Bool usesTabBar;
@property(readonly, nonatomic) Application *_application;
- (void)_updateAddTabButtonEnabled;
- (void)setPrivateBrowsingMode:(long long)arg1 animated:(_Bool)arg2;
@property(nonatomic, getter=isPrivateBrowsingEnabled) _Bool privateBrowsingEnabled;
- (_Bool)_canCloseLastTab;
- (void)clearBrowserController;
- (void)dealloc;
- (_Bool)needsCloudTabPeriodicUpdates;
@property(readonly, nonatomic) CloudTabStore *cloudTabStore;
- (id)initWithBrowserController:(id)arg1;
- (void)openInitialBlankTabDocumentIfNeeded;
- (void)replaceTabDocument:(id)arg1 withTabDocument:(id)arg2;
- (id)_tabDocumentForURL:(id)arg1 withUUID:(id)arg2;
- (id)tabDocumentForURL:(id)arg1;
- (void)moveTabDocument:(id)arg1 overTabDocument:(id)arg2;
- (void)closeTabsDocuments:(id)arg1;
- (void)closeAllOpenTabsAnimated:(_Bool)arg1 exitTabView:(_Bool)arg2 temporarily:(_Bool)arg3;
- (void)closeAllOpenTabsAnimated:(_Bool)arg1 exitTabView:(_Bool)arg2;
- (void)closeTab;
- (void)_closeTabDocuments:(id)arg1 animated:(_Bool)arg2 temporarily:(_Bool)arg3 allowAddingToRecentlyClosedTabs:(_Bool)arg4 keepWebViewAlive:(_Bool)arg5;
- (void)_closeTabDocument:(id)arg1 animated:(_Bool)arg2 temporarily:(_Bool)arg3 allowAddingToRecentlyClosedTabs:(_Bool)arg4 keepWebViewAlive:(_Bool)arg5;
- (void)_adoptTabDocuments:(id)arg1 indicesFromMergingController:(id)arg2;
- (void)_detachTabDocuments:(id)arg1 nextActiveDocument:(id)arg2;
- (void)_closeTabDocument:(id)arg1 animated:(_Bool)arg2 allowAddingToRecentlyClosedTabs:(_Bool)arg3;
- (void)_closeTabDocument:(id)arg1 animated:(_Bool)arg2 temporarily:(_Bool)arg3;
- (void)detachTabDocument:(id)arg1 animated:(_Bool)arg2;
- (void)closeTabDocumentWithURL:(id)arg1 UUID:(id)arg2;
- (void)closeTabDocument:(id)arg1 animated:(_Bool)arg2;
- (_Bool)_shouldFocusPreviousDocumentWhenClosingDocument:(id)arg1;
- (_Bool)_createAndSwitchToNewBlankTabDocumentOpeningCaptiveLandingPageIfNecessaryWithPrivateBrowsing:(_Bool)arg1;
- (void)newTabWithPrivateBrowsing:(_Bool)arg1;
- (void)newTab;
- (void)_newTabFromTabViewButton;
- (id)_openBlankTabDocument;
- (id)insertInitialBlankTabDocumentWithPrivateBrowsingIfNeeded:(_Bool)arg1;
- (void)insertNewBlankTabDocumentAnimated:(_Bool)arg1;
- (id)_insertNewBlankTabDocumentWithPrivateBrowsing:(_Bool)arg1 inBackground:(_Bool)arg2 animated:(_Bool)arg3;
- (void)insertNewTabDocument:(id)arg1 openedFromTabDocument:(id)arg2 inBackground:(_Bool)arg3 animated:(_Bool)arg4;
- (void)insertTabDocument:(id)arg1 afterTabDocument:(id)arg2 inBackground:(_Bool)arg3 animated:(_Bool)arg4;
- (void)_insertTabDocument:(id)arg1 atIndex:(unsigned long long)arg2 inBackground:(_Bool)arg3 animated:(_Bool)arg4 updateUI:(_Bool)arg5;
- (void)_adoptTabDocument:(id)arg1 atIndex:(unsigned long long)arg2 forPrivateBrowsing:(_Bool)arg3;
- (_Bool)_makeRoomForNewTabDocument:(id)arg1;
- (id)_oldestInactiveTabDocumentForPrivateBrowsing:(_Bool)arg1;
- (_Bool)canAddNewTabForPrivateBrowsing:(_Bool)arg1;
@property(readonly, nonatomic) _Bool canAddNewTabForCurrentBrowsingMode;
- (void)_switchActiveTabDocumentFromTabDocument:(id)arg1 toTabDocument:(id)arg2;
- (void)setActiveTabDocument:(id)arg1 animated:(_Bool)arg2 deferActivation:(_Bool)arg3;
- (void)setActiveTabDocument:(id)arg1 animated:(_Bool)arg2;
@property(retain, nonatomic) TabDocument *activeTabDocument;
@property(readonly, nonatomic) _Bool canCloseTab;
@property(nonatomic) _Bool tabViewDefersActivation;
@property(readonly, nonatomic) TabDocument *tabDocumentBeingActivated;
- (void)_setActiveTabDocument:(id)arg1;
- (id)_activeTabDocumentForPrivateBrowsing:(_Bool)arg1;
- (void)_logActivationForTab:(id)arg1;
- (void)logTabActivationInterval:(double)arg1 forActivationType:(long long)arg2;
- (void)_updateMergedItemsAndHibernatedTabsState;
- (void)updateHibernatedTabDocumentsSavingState;
- (void)updateTabCount;
@property(readonly, copy, nonatomic) NSSet *allSnapshotIdentifiers;
@property(readonly, copy, nonatomic) NSArray *allTabDocuments;
- (id)_otherTabDocuments;
@property(readonly, copy, nonatomic) NSArray *currentTabDocuments;
- (id)_tabDocumentsForPrivateBrowsing:(_Bool)arg1;
- (id)_currentTabs;
@property(readonly, nonatomic) RecentlyClosedTabViewController *recentlyClosedTabController;
- (void)_restorePersistentDocumentState:(id)arg1 into:(id)arg2 withCurrentActiveDocument:(id)arg3 activeDocumentIsValid:(_Bool)arg4 restoredActiveDocumentIndex:(unsigned long long)arg5;
- (_Bool)_shouldRestoreBlankTab;
- (void)_removeCurrentBackForwardItemFromTabDocument:(id)arg1;
- (_Bool)readState;
- (void)saveStateInBackground:(_Bool)arg1;
- (id)_persistentStateDictionaryForTabs:(id)arg1;
- (id)_tabStatesForTabs:(id)arg1 quickUpdate:(_Bool)arg2;
- (void)saveAllTabsStateWithQuickUpdate:(_Bool)arg1;
- (void)saveBrowserWindowStateOnly;
- (unsigned long long)_indexOfActiveTab:(id)arg1 tabDocuments:(id)arg2;
- (void)_prepareBrowserWindowDataIncludingTabState:(_Bool)arg1 forQuickUpdate:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_persistAllTabStates:(id)arg1 needsValidate:(_Bool)arg2;
- (void)updateTabStatesAndValidate:(_Bool)arg1 shouldDeleteEmptyWindow:(_Bool)arg2;
- (void)saveStateInBackground:(_Bool)arg1 needsValidate:(_Bool)arg2;
- (void)removeSavedStateForTabDocument:(id)arg1;
- (void)saveStateForTabDocument:(id)arg1 needsValidate:(_Bool)arg2;
- (void)_updateSavedStateValidity:(_Bool)arg1;
- (void)_validateSavedState:(id)arg1;
- (void)_clearStateValidateTimer;
- (void)_saveStateFromTimer:(id)arg1;
- (void)_setSaveStateTimer:(id)arg1;
- (void)setStateNeedsSaved;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

