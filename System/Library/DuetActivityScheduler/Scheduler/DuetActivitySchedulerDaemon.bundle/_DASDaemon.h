/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:03:38 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/DuetActivityScheduler/Scheduler/DuetActivitySchedulerDaemon.bundle/DuetActivitySchedulerDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/NSXPCListenerDelegate.h>
#import <libobjc.A.dylib/_DASActivitySchedulerClient.h>
#import <libobjc.A.dylib/_DASActivityOmnibusScheduling.h>

@protocol _CDLocalContext, OS_dispatch_queue, _DASDataStore, OS_dispatch_source;
@class NSMutableArray, NSMutableSet, NSDictionary, NSMutableDictionary, NSXPCListener, NSObject, _DASTimer, NSDate, _DASNetworkEvaluationMonitor, _DASSleepWakeMonitor, _DASBatchingQueue, NSCountedSet, CDAttribute, _DASBARScheduler, _DASBlueListManager, NSString;

@interface _DASDaemon : NSObject <NSXPCListenerDelegate, _DASActivitySchedulerClient, _DASActivityOmnibusScheduling> {

	NSMutableArray* _clients;
	NSMutableSet* _pendingTasks;
	NSMutableSet* _runningTasks;
	NSDictionary* _triggerToPolicyMap;
	NSMutableDictionary* _activityToTriggersMap;
	NSMutableDictionary* _triggerToActivitiesMap;
	NSMutableDictionary* _activityToIncompatibleActivitiesMap;
	NSMutableDictionary* _groups;
	NSMutableDictionary* _groupToPendingTasks;
	NSMutableDictionary* _groupToRunningTasks;
	NSMutableDictionary* _applicationLaunchRequests;
	id<_CDLocalContext> _context;
	NSXPCListener* _listener;
	NSObject*<OS_dispatch_queue> _timerSchedulingQueue;
	_DASTimer* _schedulingTimer;
	NSDate* _timerEarliestFireDate;
	NSDate* _timerLatestFireDate;
	_DASNetworkEvaluationMonitor* _networkEvaluationMonitor;
	_DASSleepWakeMonitor* _sleepWakeMonitor;
	id<_DASDataStore> _store;
	NSObject*<OS_dispatch_source> _optimalScoringTimer;
	NSObject*<OS_dispatch_source> _databaseMaintenanceTimer;
	NSObject*<OS_dispatch_queue> _evaluationQueue;
	_DASBatchingQueue* _triggerBatchingQueue;
	_DASBatchingQueue* _activityCompletedBatchingQueue;
	NSMutableDictionary* _recentlyLaunchedApps;
	NSCountedSet* _launchesPerApp;
	NSObject*<OS_dispatch_source> _launchTimeResetTimer;
	NSObject*<OS_dispatch_queue> _launchQueue;
	CDAttribute* _barAttribute;
	_DASBARScheduler* _barScheduler;
	_DASBlueListManager* _blueListManager;
	NSObject*<OS_dispatch_queue> _activityLaunchQueue;
	unsigned long long _photosIsBlocked;

}

@property (nonatomic,retain) NSMutableArray * clients;                                               //@synthesize clients=_clients - In the implementation block
@property (nonatomic,retain) NSMutableSet * pendingTasks;                                            //@synthesize pendingTasks=_pendingTasks - In the implementation block
@property (nonatomic,retain) NSMutableSet * runningTasks;                                            //@synthesize runningTasks=_runningTasks - In the implementation block
@property (nonatomic,retain) NSDictionary * triggerToPolicyMap;                                      //@synthesize triggerToPolicyMap=_triggerToPolicyMap - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * activityToTriggersMap;                            //@synthesize activityToTriggersMap=_activityToTriggersMap - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * triggerToActivitiesMap;                           //@synthesize triggerToActivitiesMap=_triggerToActivitiesMap - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * activityToIncompatibleActivitiesMap;              //@synthesize activityToIncompatibleActivitiesMap=_activityToIncompatibleActivitiesMap - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * groups;                                           //@synthesize groups=_groups - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * groupToPendingTasks;                              //@synthesize groupToPendingTasks=_groupToPendingTasks - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * groupToRunningTasks;                              //@synthesize groupToRunningTasks=_groupToRunningTasks - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * applicationLaunchRequests;                        //@synthesize applicationLaunchRequests=_applicationLaunchRequests - In the implementation block
@property (nonatomic,retain) id<_CDLocalContext> context;                                            //@synthesize context=_context - In the implementation block
@property (nonatomic,retain) NSXPCListener * listener;                                               //@synthesize listener=_listener - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> timerSchedulingQueue;                      //@synthesize timerSchedulingQueue=_timerSchedulingQueue - In the implementation block
@property (nonatomic,retain) _DASTimer * schedulingTimer;                                            //@synthesize schedulingTimer=_schedulingTimer - In the implementation block
@property (nonatomic,retain) NSDate * timerEarliestFireDate;                                         //@synthesize timerEarliestFireDate=_timerEarliestFireDate - In the implementation block
@property (nonatomic,retain) NSDate * timerLatestFireDate;                                           //@synthesize timerLatestFireDate=_timerLatestFireDate - In the implementation block
@property (nonatomic,retain) _DASNetworkEvaluationMonitor * networkEvaluationMonitor;                //@synthesize networkEvaluationMonitor=_networkEvaluationMonitor - In the implementation block
@property (nonatomic,retain) _DASSleepWakeMonitor * sleepWakeMonitor;                                //@synthesize sleepWakeMonitor=_sleepWakeMonitor - In the implementation block
@property (nonatomic,retain) id<_DASDataStore> store;                                                //@synthesize store=_store - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_source> optimalScoringTimer;                      //@synthesize optimalScoringTimer=_optimalScoringTimer - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_source> databaseMaintenanceTimer;                 //@synthesize databaseMaintenanceTimer=_databaseMaintenanceTimer - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> evaluationQueue;                           //@synthesize evaluationQueue=_evaluationQueue - In the implementation block
@property (nonatomic,retain) _DASBatchingQueue * triggerBatchingQueue;                               //@synthesize triggerBatchingQueue=_triggerBatchingQueue - In the implementation block
@property (nonatomic,retain) _DASBatchingQueue * activityCompletedBatchingQueue;                     //@synthesize activityCompletedBatchingQueue=_activityCompletedBatchingQueue - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * recentlyLaunchedApps;                             //@synthesize recentlyLaunchedApps=_recentlyLaunchedApps - In the implementation block
@property (nonatomic,retain) NSCountedSet * launchesPerApp;                                          //@synthesize launchesPerApp=_launchesPerApp - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_source> launchTimeResetTimer;                     //@synthesize launchTimeResetTimer=_launchTimeResetTimer - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> launchQueue;                               //@synthesize launchQueue=_launchQueue - In the implementation block
@property (nonatomic,retain) CDAttribute * barAttribute;                                             //@synthesize barAttribute=_barAttribute - In the implementation block
@property (nonatomic,retain) _DASBARScheduler * barScheduler;                                        //@synthesize barScheduler=_barScheduler - In the implementation block
@property (nonatomic,retain) _DASBlueListManager * blueListManager;                                  //@synthesize blueListManager=_blueListManager - In the implementation block
@property (nonatomic,retain) NSObject*<OS_dispatch_queue> activityLaunchQueue;                       //@synthesize activityLaunchQueue=_activityLaunchQueue - In the implementation block
@property (assign,nonatomic) unsigned long long photosIsBlocked;                                     //@synthesize photosIsBlocked=_photosIsBlocked - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)sharedInstance;
-(void)delayLaunchesOfType:(id)arg1 forApps:(id)arg2 ;
-(NSMutableDictionary *)triggerToActivitiesMap;
-(void)setTriggerToActivitiesMap:(NSMutableDictionary *)arg1 ;
-(NSMutableDictionary *)activityToIncompatibleActivitiesMap;
-(id)allTimewiseEligibleNetworkTasksAllowingCell:(BOOL)arg1 ;
-(NSMutableSet *)runningTasks;
-(_DASTimer *)schedulingTimer;
-(void)setTriggerToPolicyMap:(NSDictionary *)arg1 ;
-(NSMutableDictionary *)activityToTriggersMap;
-(void)setActivityToTriggersMap:(NSMutableDictionary *)arg1 ;
-(void)setRunningTasks:(NSMutableSet *)arg1 ;
-(void)scheduleSystemWakeAt:(id)arg1 forActivity:(id)arg2 withLeeway:(long long)arg3 ;
-(void)setPendingTasks:(NSMutableSet *)arg1 ;
-(NSDictionary *)triggerToPolicyMap;
-(id)allPendingTasks;
-(void)setupBudgeting;
-(void)setupTimers;
-(void)handleTriggers:(id)arg1 ;
-(id)initAsAnonymous:(BOOL)arg1 withContext:(id)arg2 ;
-(void)handleCompletedActivities:(id)arg1 ;
-(void)registerForNetworkPathEvaluation;
-(void)registerTriggersWithContextStoreForPolicies:(id)arg1 ;
-(void)schedulingTimerFired;
-(void)updateiCPLTasksBlocked:(unsigned long long)arg1 ;
-(void)solicitActivityResubmission;
-(void)periodicCalculationForOptimal;
-(void)setupDatabaseMaintenance;
-(void)scheduleTimerOnBehalfOf:(id)arg1 between:(double)arg2 and:(double)arg3 waking:(BOOL)arg4 ;
-(void)suspendActivity:(id)arg1 ;
-(long long)capacityFromGroupMax:(long long)arg1 forPriority:(unsigned long long)arg2 ;
-(id)candidateGroupActivityForPreemption:(id)arg1 ;
-(void)handleRunningActivities:(id)arg1 ;
-(void)allClientsDo:(/*^block*/id)arg1 ;
-(void)runLocalActivity:(id)arg1 ;
-(void)removeActivityFromTriggerMap:(id)arg1 ;
-(unsigned long long)startBudgetingForApplication:(id)arg1 ;
-(void)stopBudgetingForApplication:(id)arg1 withToken:(unsigned long long)arg2 ;
-(void)runActivitiesAndRemoveUnknown:(id)arg1 ;
-(void)runLaunchTasks:(id)arg1 forApplication:(id)arg2 onSuccess:(/*^block*/id)arg3 onFailure:(/*^block*/id)arg4 ;
-(void)clearRecentlyLaunchedApps;
-(id)activityMatchingPredicate:(id)arg1 ;
-(void)reportActivity:(id)arg1 isBlockedWithDecision:(long long)arg2 ;
-(BOOL)shouldPreemptTask:(id)arg1 withStartDate:(id)arg2 atDate:(id)arg3 ;
-(BOOL)shouldRunActivityNow:(id)arg1 withOtherActivities:(id)arg2 ;
-(void)addRunningActivity:(id)arg1 toGroupWithName:(id)arg2 ;
-(void)runApplicationLaunchActivities:(id)arg1 ;
-(void)addTriggersToActivity:(id)arg1 ;
-(BOOL)addLaunchRequest:(id)arg1 ;
-(void)beginWorkForActivity:(id)arg1 ;
-(void)advanceAppLaunchDateIfNecessaryForActivity:(id)arg1 ;
-(void)addPendingActivity:(id)arg1 toGroupWithName:(id)arg2 ;
-(BOOL)shouldEvaluateTask:(id)arg1 atDate:(id)arg2 ;
-(BOOL)shouldRunActivityNow:(id)arg1 ;
-(long long)additionalCapacityForActivity:(id)arg1 inGroupWithName:(id)arg2 shouldTryToSuspend:(BOOL)arg3 ;
-(id)tasksNoLongerEligible;
-(void)addPendingActivitiesToGroups:(id)arg1 ;
-(void)evaluateScoreAndRunActivities:(id)arg1 ;
-(void)determineNextTimerFireDateAndSchedule;
-(void)removeLaunchRequest:(id)arg1 ;
-(void)unprotectedEvaluateScoreAndRunActivities:(id)arg1 ;
-(void)handleNoLongerRunningActivity:(id)arg1 ;
-(id)getActivityWithName:(id)arg1 ;
-(id)getActivityWithUUID:(id)arg1 ;
-(void)registerWithContextStoreForId:(id)arg1 contextualPredicate:(id)arg2 dismissalCondition:(id)arg3 deviceSet:(unsigned long long)arg4 mustWake:(BOOL)arg5 ;
-(void)associateActivity:(id)arg1 withTriggerKeys:(id)arg2 ;
-(void)evaluateScoreAndRunAllActivitiesForReason:(id)arg1 ;
-(void)scheduleTimerForActivity:(id)arg1 ;
-(void)chooseActivitiesToRunFromCandidateActivities:(id)arg1 toBeRunActivities:(id)arg2 toLaunchApplications:(id)arg3 ;
-(unsigned long long)submittedTaskCount;
-(unsigned long long)requestCountForApplication:(id)arg1 ;
-(void)setActivityToIncompatibleActivitiesMap:(NSMutableDictionary *)arg1 ;
-(NSMutableDictionary *)groupToPendingTasks;
-(void)setGroupToPendingTasks:(NSMutableDictionary *)arg1 ;
-(NSMutableDictionary *)groupToRunningTasks;
-(void)setGroupToRunningTasks:(NSMutableDictionary *)arg1 ;
-(NSMutableDictionary *)applicationLaunchRequests;
-(void)setApplicationLaunchRequests:(NSMutableDictionary *)arg1 ;
-(NSObject*<OS_dispatch_queue>)timerSchedulingQueue;
-(void)setTimerSchedulingQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(void)setSchedulingTimer:(_DASTimer *)arg1 ;
-(NSDate *)timerEarliestFireDate;
-(void)setTimerEarliestFireDate:(NSDate *)arg1 ;
-(NSDate *)timerLatestFireDate;
-(void)setTimerLatestFireDate:(NSDate *)arg1 ;
-(_DASNetworkEvaluationMonitor *)networkEvaluationMonitor;
-(void)setNetworkEvaluationMonitor:(_DASNetworkEvaluationMonitor *)arg1 ;
-(void)cancelPushLaunchTasksForApps:(id)arg1 ;
-(id)allPendingPushLaunchTasks;
-(id)allPendingRestartTasks;
-(NSCountedSet *)launchesPerApp;
-(NSObject*<OS_dispatch_source>)launchTimeResetTimer;
-(void)setActivityCompletedBatchingQueue:(_DASBatchingQueue *)arg1 ;
-(NSObject*<OS_dispatch_source>)databaseMaintenanceTimer;
-(void)setDatabaseMaintenanceTimer:(NSObject*<OS_dispatch_source>)arg1 ;
-(void)setLaunchTimeResetTimer:(NSObject*<OS_dispatch_source>)arg1 ;
-(CDAttribute *)barAttribute;
-(void)setLaunchesPerApp:(NSCountedSet *)arg1 ;
-(void)setOptimalScoringTimer:(NSObject*<OS_dispatch_source>)arg1 ;
-(NSObject*<OS_dispatch_queue>)evaluationQueue;
-(NSObject*<OS_dispatch_source>)optimalScoringTimer;
-(void)setEvaluationQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(void)setBarAttribute:(CDAttribute *)arg1 ;
-(_DASBARScheduler *)barScheduler;
-(void)setBarScheduler:(_DASBARScheduler *)arg1 ;
-(_DASBlueListManager *)blueListManager;
-(void)setBlueListManager:(_DASBlueListManager *)arg1 ;
-(NSObject*<OS_dispatch_queue>)activityLaunchQueue;
-(void)setActivityLaunchQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(unsigned long long)photosIsBlocked;
-(void)setPhotosIsBlocked:(unsigned long long)arg1 ;
-(NSMutableDictionary *)recentlyLaunchedApps;
-(_DASBatchingQueue *)activityCompletedBatchingQueue;
-(_DASBatchingQueue *)triggerBatchingQueue;
-(void)setTriggerBatchingQueue:(_DASBatchingQueue *)arg1 ;
-(void)setRecentlyLaunchedApps:(NSMutableDictionary *)arg1 ;
-(void)submitActivity:(id)arg1 inGroupWithName:(id)arg2 ;
-(void)submitActivity:(id)arg1 ;
-(void)activityCanceled:(id)arg1 ;
-(void)activityCompleted:(id)arg1 ;
-(NSMutableSet *)pendingTasks;
-(id)init;
-(NSString *)description;
-(id<_CDLocalContext>)context;
-(void)start;
-(void)setContext:(id<_CDLocalContext>)arg1 ;
-(NSMutableDictionary *)groups;
-(void)setGroups:(NSMutableDictionary *)arg1 ;
-(void)removeClient:(id)arg1 ;
-(BOOL)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2 ;
-(NSXPCListener *)listener;
-(void)setListener:(NSXPCListener *)arg1 ;
-(void)loadState;
-(id<_DASDataStore>)store;
-(void)submitActivities:(id)arg1 ;
-(void)submitActivity:(id)arg1 inGroup:(id)arg2 ;
-(void)handleEligibleActivities:(/*^block*/id)arg1 ;
-(void)updateActivity:(id)arg1 withPriority:(unsigned long long)arg2 startAfter:(id)arg3 startBefore:(id)arg4 options:(id)arg5 ;
-(void)updateKBDownloadedOnWifi:(unsigned long long)arg1 downloadedOnCell:(unsigned long long)arg2 uploadedOnWifi:(unsigned long long)arg3 uploadedOnCell:(unsigned long long)arg4 forActivity:(id)arg5 ;
-(void)submittedActivitiesWithHandler:(/*^block*/id)arg1 ;
-(void)runningActivitiesWithHandler:(/*^block*/id)arg1 ;
-(void)runningGroupActivitiesWithHandler:(/*^block*/id)arg1 ;
-(void)scoresForActivityWithName:(id)arg1 withHandler:(/*^block*/id)arg2 ;
-(void)activityRunStatisticsWithHandler:(/*^block*/id)arg1 ;
-(void)forceRunActivities:(id)arg1 ;
-(void)startedActivities:(id)arg1 ;
-(void)currentPredictionsWithHandler:(/*^block*/id)arg1 ;
-(void)setMinimumBackgroundFetchInterval:(double)arg1 forApp:(id)arg2 ;
-(void)runActivities:(id)arg1 ;
-(void)suspendActivities:(id)arg1 ;
-(void)cancelActivities:(id)arg1 ;
-(void)handleRescindedActivity:(id)arg1 ;
-(id)activityRunStatistics;
-(void)setClients:(NSMutableArray *)arg1 ;
-(NSObject*<OS_dispatch_queue>)launchQueue;
-(void)setLaunchQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(void)createActivityGroup:(id)arg1 ;
-(void)setStore:(id<_DASDataStore>)arg1 ;
-(NSMutableArray *)clients;
-(void)setSleepWakeMonitor:(_DASSleepWakeMonitor *)arg1 ;
-(_DASSleepWakeMonitor *)sleepWakeMonitor;
@end

