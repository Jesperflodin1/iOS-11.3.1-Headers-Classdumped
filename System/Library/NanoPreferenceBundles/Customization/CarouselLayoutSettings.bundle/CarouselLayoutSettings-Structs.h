/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:10:57 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/NanoPreferenceBundles/Customization/CarouselLayoutSettings.bundle/CarouselLayoutSettings
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct {
	double field1;
} SCD_Struct_CS1;

typedef struct Hex {
	int q;
	int r;
} Hex;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct _NSZone* NSZoneRef;

typedef struct {
	unsigned long long field1;
	id field2;
	unsigned long long field3;
	unsigned long long field4[5];
} SCD_Struct_CS5;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::hash<CSL::Hex>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::hash<CSL::Hex>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true> > {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::hash<CSL::Hex>, true>, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true>, std::__1::allocator<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained> > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::hash<CSL::Hex>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::hash<CSL::Hex>, true>, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true>, std::__1::allocator<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained> > >;

typedef struct unordered_map<CSL::Hex, CSLHexAppNode *__unsafe_unretained, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<std::__1::pair<const CSL::Hex, CSLHexAppNode *__unsafe_unretained> > > {
	hash_table<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::hash<CSL::Hex>, true>, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true>, std::__1::allocator<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained> > > __table_;
} unordered_map<CSL::Hex, CSLHexAppNode *__unsafe_unretained, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<std::__1::pair<const CSL::Hex, CSLHexAppNode *__unsafe_unretained> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::hash<CSL::Hex>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::hash<CSL::Hex>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::equal_to<CSL::Hex>, true> > {
	float __value_;
} compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::equal_to<CSL::Hex>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<CSL::Hex, int>, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::hash<CSL::Hex>, true>, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::equal_to<CSL::Hex>, true>, std::__1::allocator<std::__1::__hash_value_type<CSL::Hex, int> > > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::hash<CSL::Hex>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::equal_to<CSL::Hex>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<CSL::Hex, int>, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::hash<CSL::Hex>, true>, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::equal_to<CSL::Hex>, true>, std::__1::allocator<std::__1::__hash_value_type<CSL::Hex, int> > >;

typedef struct unordered_map<CSL::Hex, int, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<std::__1::pair<const CSL::Hex, int> > > {
	hash_table<std::__1::__hash_value_type<CSL::Hex, int>, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::hash<CSL::Hex>, true>, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::equal_to<CSL::Hex>, true>, std::__1::allocator<std::__1::__hash_value_type<CSL::Hex, int> > > __table_;
} unordered_map<CSL::Hex, int, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<std::__1::pair<const CSL::Hex, int> > >;

typedef struct opaque_pthread_mutex_t {
	long long __sig;
	char __opaque[56];
} opaque_pthread_mutex_t;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<CSLPressState> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<CSLPressState> >;

typedef struct _compressed_pair<CSLPressState **, std::__1::allocator<CSLPressState *> > {
	/*function pointer*/void* __value_;
} compressed_pair<CSLPressState **, std::__1::allocator<CSLPressState *> >;

typedef struct _split_buffer<CSLPressState *, std::__1::allocator<CSLPressState *> > {
	/*function pointer*/void* __first_;
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<CSLPressState **, std::__1::allocator<CSLPressState *> > __end_cap_;
} split_buffer<CSLPressState *, std::__1::allocator<CSLPressState *> >;

typedef struct deque<CSLPressState, std::__1::allocator<CSLPressState> > {
	split_buffer<CSLPressState *, std::__1::allocator<CSLPressState *> > __map_;
	unsigned long long __start_;
	compressed_pair<unsigned long, std::__1::allocator<CSLPressState> > __size_;
} deque<CSLPressState, std::__1::allocator<CSLPressState> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<CSL::Hex> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::hash<CSL::Hex> >;

typedef struct _compressed_pair<float, std::__1::equal_to<CSL::Hex> > {
	float __value_;
} compressed_pair<float, std::__1::equal_to<CSL::Hex> >;

typedef struct _hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> {
	__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> __next_;
} hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *>, std::__1::allocator<std::__1::__hash_node<CSL::Hex, void *> > > {
	hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *>, std::__1::allocator<std::__1::__hash_node<CSL::Hex, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> > > {
	__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> __value_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> > __value_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> > > {
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> > >;

typedef struct _hash_table<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex> > {
	unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *> *>, std::__1::allocator<std::__1::__hash_node<CSL::Hex, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<CSL::Hex> > __p2_;
	compressed_pair<float, std::__1::equal_to<CSL::Hex> > __p3_;
} hash_table<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex> >;

typedef struct unordered_multiset<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex> > {
	hash_table<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex> > __table_;
} unordered_multiset<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex> >;

typedef struct {
	double field1;
	SCD_Struct_CS1 field2;
	BOOL field3;
	double field4;
	Hex field5;
} SCD_Struct_CS41;

typedef struct {
	 _float3;
	double percentComplete;
} SCD_Struct_CS42;

