/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:09:52 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/Frameworks/Vision.framework/Vision
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct shared_ptr<const vision::mod::GreedyClustererFaces> {
	GreedyClustererFaces __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<const vision::mod::GreedyClustererFaces>;

typedef struct shared_ptr<vision::mod::GreedyClustererFaces> {
	GreedyClustererFaces __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::GreedyClustererFaces>;

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct __CVBuffer* CVBufferRef;

typedef struct shared_ptr<vision::mod::FaceClassifier_BoostedPixelDifference> {
	FaceClassifier_BoostedPixelDifference __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::FaceClassifier_BoostedPixelDifference>;

typedef struct CGImage* CGImageRef;

typedef struct _NSZone* NSZoneRef;

typedef struct Projections_meanStdTable {
	float sumTable;
	float sumSqTable;
} Projections_meanStdTable;

typedef struct FastRegistration_Signatures {
	float piRow;
	unsigned long long nPiRow;
	Projections_meanStdTable piRowTable;
	float piCol;
	unsigned long long nPiCol;
	Projections_meanStdTable piColTable;
	char* _memoryContainer;
} FastRegistration_Signatures;

typedef struct GridROI_t {
	int startX;
	int startY;
	int endX;
	int endY;
} GridROI_t;

typedef struct shared_ptr<vision::mod::SimilarityMatrixAbstract> {
	SimilarityMatrixAbstract __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::SimilarityMatrixAbstract>;

typedef struct {
	[3 columns];
} SCD_Struct_VN13;

typedef struct ImageRegistrationCtx_s* ImageRegistrationCtx_sRef;

typedef struct vImage_Buffer {
	void data;
	unsigned long long height;
	unsigned long long width;
	unsigned long long rowBytes;
} vImage_Buffer;

typedef struct Geometry2D_point2D_ {
	float x;
	float y;
} Geometry2D_point2D_;

typedef struct Geometry2D_size2D_ {
	float height;
	float width;
} Geometry2D_size2D_;

typedef struct Geometry2D_rect2D_ {
	Geometry2D_point2D_ origin;
	Geometry2D_size2D_ size;
} Geometry2D_rect2D_;

typedef struct os_unfair_lock_s {
	unsigned _os_unfair_lock_opaque;
} os_unfair_lock_s;

typedef struct CGImageSource* CGImageSourceRef;

typedef struct __CFArray* CFArrayRef;

typedef struct CGColorSpace* CGColorSpaceRef;

typedef struct shared_ptr<vision::mod::LandmarkAttributes> {
	LandmarkAttributes __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::LandmarkAttributes>;

typedef struct TemplateObjectDetectorApplyiiiiB[2f][2f]fBBffifhoggradientChnsFeatiihoggradientgradientivector<vision::hum::DTreeApply, std::__1::allocator<vision::hum::DTreeApply> >DTreeApplyDTreeApply__compressed_pair<vision::hum::DTreeApply *, std::__1::allocator<vision::hum::DTreeApply> >DTreeApplyvector<std::__1::map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > >, std::__1::allocator<std::__1::map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > > >map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > >map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > >__compressed_pair<std::__1::map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > *, std::__1::allocator<std::__1::map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > > >map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > >vector<float, std::__1::allocator<float> >ff__compressed_pair<float *, std::__1::allocator<float> >fvector<vision::hum::DTreeNode *, std::__1::allocator<vision::hum::DTreeNode *> >DTreeNodeDTreeNode__compressed_pair<vision::hum::DTreeNode **, std::__1::allocator<vision::hum::DTreeNode *> >DTreeNodefadaBoostApplyvector<vision::hum::DTreeApply, std::__1::allocator<vision::hum::DTreeApply> >DTreeApplyDTreeApply__compressed_pair<vision::hum::DTreeApply *, std::__1::allocator<vision::hum::DTreeApply> >DTreeApplylinearSVMApplyvector<float, std::__1::allocator<float> >ff__compressed_pair<float *, std::__1::allocator<float> >ffvector<float, std::__1::allocator<float> >ff__compressed_pair<float *, std::__1::allocator<float> >f@* emplateObjectDetectorApplyRef;

typedef struct shared_ptr<vision::mod::ImageDescriptorProcessorAbstract> {
	ImageDescriptorProcessorAbstract __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::ImageDescriptorProcessorAbstract>;

typedef struct shared_ptr<vision::mod::ImageClassifierAbstract> {
	ImageClassifierAbstract __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::ImageClassifierAbstract>;

typedef struct shared_ptr<vision::mod::ImageClassifier_HierarchicalModel> {
	ImageClassifier_HierarchicalModel __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::ImageClassifier_HierarchicalModel>;

typedef struct ACBSConfig* ACBSConfigRef;

typedef struct shared_ptr<vision::mod::FaceRegionMap> {
	FaceRegionMap __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::FaceRegionMap>;

typedef struct {
	[4 field1];
} SCD_Struct_VN30;

typedef struct CGAffineTransform {
	double a;
	double b;
	double c;
	double d;
	double tx;
	double ty;
} CGAffineTransform;

typedef struct shared_ptr<vision::mod::FaceIDModel> {
	FaceIDModel __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::FaceIDModel>;

typedef struct shared_ptr<vision::mod::LandmarkDetector> {
	LandmarkDetector __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::LandmarkDetector>;

typedef struct shared_ptr<vision::mod::ObjectDetector_DCNFaceDetector> {
	ObjectDetector_DCNFaceDetector __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::ObjectDetector_DCNFaceDetector>;

typedef struct _compressed_pair<cvml::util::model_file_cache *, std::__1::default_delete<cvml::util::model_file_cache> > {
	model_file_cache __value_;
} compressed_pair<cvml::util::model_file_cache *, std::__1::default_delete<cvml::util::model_file_cache> >;

typedef struct unique_ptr<cvml::util::model_file_cache, std::__1::default_delete<cvml::util::model_file_cache> > {
	compressed_pair<cvml::util::model_file_cache *, std::__1::default_delete<cvml::util::model_file_cache> > __ptr_;
} unique_ptr<cvml::util::model_file_cache, std::__1::default_delete<cvml::util::model_file_cache> >;

typedef struct shared_ptr<vision::mod::FaceFrontalizer> {
	FaceFrontalizer __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::FaceFrontalizer>;

typedef struct shared_ptr<vision::mod::ImageDescriptorAugmenterFlip> {
	ImageDescriptorAugmenterFlip __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::ImageDescriptorAugmenterFlip>;

typedef struct shared_ptr<unsigned char> {
	char* __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<unsigned char>;

typedef struct shared_ptr<vision::mod::FaceBoxPoseAligner<signed char> > {
	FaceBoxPoseAligner<signed char> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::FaceBoxPoseAligner<signed char> >;

typedef struct shared_ptr<vision::mod::ObjectTrackerAbstract> {
	ObjectTrackerAbstract __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vision::mod::ObjectTrackerAbstract>;

