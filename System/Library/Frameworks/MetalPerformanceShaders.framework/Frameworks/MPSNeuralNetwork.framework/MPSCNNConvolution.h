/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:06:59 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSNeuralNetwork.framework/MPSNeuralNetwork
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <MPSNeuralNetwork/MPSNeuralNetwork-Structs.h>
#import <MPSNeuralNetwork/MPSCNNKernel.h>

@protocol MTLBuffer, MPSCNNConvolutionDataSource;
@class MPSCNNNeuron, NSData;

@interface MPSCNNConvolution : MPSCNNKernel {

	unsigned long long _inputFeatureChannels;
	unsigned long long _outputFeatureChannels;
	unsigned long long _layout;
	unsigned long long _groups;
	MPSCNNNeuron* _neuron_deprecated;
	id<MTLBuffer> _weights;
	id<MTLBuffer> _bias;
	unsigned long long _flags;
	BOOL _fullyConnected;
	id<MTLBuffer> _qWts;
	int _qType;
	NeuronInfo _neuronInfo;
	unsigned long long _scaleFactor;
	unsigned long long _channelMultiplier;
	unsigned _weightsDataType;
	NSData* _biasOriginal;
	id<MTLBuffer> _neuronABuffer;
	unsigned long long _accumulatorPrecisionOption;
	id<MPSCNNConvolutionDataSource> _dataSource;
	NSData* _batchNormalizationData;
	unsigned long long _featureChannelsLayout;

}

@property (nonatomic,readonly) unsigned long long featureChannelsLayout;                       //@synthesize featureChannelsLayout=_featureChannelsLayout - In the implementation block
@property (nonatomic,readonly) unsigned long long inputFeatureChannels;                        //@synthesize inputFeatureChannels=_inputFeatureChannels - In the implementation block
@property (nonatomic,readonly) unsigned long long outputFeatureChannels;                       //@synthesize outputFeatureChannels=_outputFeatureChannels - In the implementation block
@property (nonatomic,readonly) unsigned long long groups;                                      //@synthesize groups=_groups - In the implementation block
@property (nonatomic,retain,readonly) id<MPSCNNConvolutionDataSource> dataSource;              //@synthesize dataSource=_dataSource - In the implementation block
@property (nonatomic,readonly) unsigned long long subPixelScaleFactor;                         //@synthesize scaleFactor=_scaleFactor - In the implementation block
@property (nonatomic,readonly) MPSCNNNeuron * neuron;                                          //@synthesize neuron_deprecated=_neuron_deprecated - In the implementation block
@property (nonatomic,readonly) int neuronType; 
@property (nonatomic,readonly) float neuronParameterA; 
@property (nonatomic,readonly) float neuronParameterB; 
@property (nonatomic,readonly) float neuronParameterC; 
@property (nonatomic,readonly) unsigned long long channelMultiplier;                           //@synthesize channelMultiplier=_channelMultiplier - In the implementation block
@property (assign,nonatomic) unsigned long long accumulatorPrecisionOption;                    //@synthesize accumulatorPrecisionOption=_accumulatorPrecisionOption - In the implementation block
+(const MPSLibraryInfo*)libraryInfo;
-(id)initWithCoder:(id)arg1 device:(id)arg2 ;
-(id)copyWithZone:(NSZone*)arg1 device:(id)arg2 ;
-(unsigned long long)inputFeatureChannels;
-(unsigned long long)outputFeatureChannels;
-(id)initWithDevice:(id)arg1 weights:(id)arg2 ;
-(id)destinationImageDescriptorForSourceImages:(id)arg1 sourceStates:(id)arg2 paddingMethod:(unsigned long long)arg3 sourceOffset:(SCD_Struct_MP11*)arg4 ;
-(id)temporaryResultStateForCommandBuffer:(id)arg1 sourceImage:(id)arg2 sourceStates:(id)arg3 destinationImage:(id)arg4 ;
-(id)resultStateForSourceImage:(id)arg1 sourceStates:(id)arg2 destinationImage:(id)arg3 ;
-(NSArray*)temporaryResultStateBatchForCommandBuffer:(id)arg1 sourceImage:(NSArray*)arg2 sourceStates:(id)arg3 destinationImage:(NSArray*)arg4 ;
-(NSArray*)resultStateBatchForSourceImage:(NSArray*)arg1 sourceStates:(id)arg2 destinationImage:(NSArray*)arg3 ;
-(BOOL)isResultStateReusedAcrossBatch;
-(void)copyToGradientState:(id)arg1 sourceImage:(id)arg2 sourceStates:(id)arg3 destinationImage:(id)arg4 ;
-(id)initWithDevice:(id)arg1 weights:(id)arg2 fullyConnected:(BOOL)arg3 ;
-(void)reloadWeightsAndBiasesWithDataSource:(id)arg1 ;
-(void)reloadWeightsAndBiasesWithCommandBuffer:(id)arg1 state:(id)arg2 ;
-(id)biases;
-(int)neuronType;
-(float)neuronParameterA;
-(float)neuronParameterB;
-(float)neuronParameterC;
-(unsigned long long)accumulatorPrecisionOption;
-(void)setAccumulatorPrecisionOption:(unsigned long long)arg1 ;
-(id)initWithDevice:(id)arg1 convolutionDescriptor:(id)arg2 kernelWeights:(const float*)arg3 biasTerms:(const float*)arg4 flags:(unsigned long long)arg5 ;
-(unsigned long long)featureChannelsLayout;
-(unsigned long long)subPixelScaleFactor;
-(unsigned long long)channelMultiplier;
-(BOOL)appendBatchBarrier;
-(id)initWithDevice:(id)arg1 convolutionDescriptor:(id)arg2 kernelWeights:(const float*)arg3 biasTerms:(const float*)arg4 flags:(unsigned long long)arg5 fullyConnected:(BOOL)arg6 ;
-(id)exportWeightsAndBiasesWithCommandBuffer:(id)arg1 resultStateCanBeTemporary:(BOOL)arg2 ;
-(MPSCNNNeuron *)neuron;
-(BOOL)initialize:(id)arg1 convolutionDescriptor:(id)arg2 kernelWeights:(const void*)arg3 dataType:(unsigned)arg4 range:(const 4*)arg5 lookUpTable:(const float*)arg6 qType:(int)arg7 biasTerms:(const float*)arg8 flags:(unsigned long long)arg9 fullyConnected:(BOOL)arg10 ;
-(id)initializeWithDevice:(id)arg1 weights:(id)arg2 fullyConnected:(BOOL)arg3 ;
-(void)encodeToCommandBuffer:(id)arg1 sourceImage:(id)arg2 destinationImage:(id)arg3 state:(id*)arg4 ;
-(id)weights;
-(void)encodeWithCoder:(id)arg1 ;
-(void)dealloc;
-(id)debugDescription;
-(id<MPSCNNConvolutionDataSource>)dataSource;
-(unsigned long long)groups;
-(id)initWithDevice:(id)arg1 ;
@end

