/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:30:50 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/Watchdog/ThermalMonitor.bundle/ThermalMonitor
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <ThermalMonitor/ThermalMonitor-Structs.h>
#import <ThermalMonitor/tGraphDataSource.h>

@protocol OS_dispatch_queue;
@class CommonProduct, BackLightCC, TableDrivenLowTempController, NSDictionary, UPOStepper, NSObject;

@interface ContextualClampController : NSObject <tGraphDataSource> {

	CommonProduct* _product;
	BackLightCC* _backlightController;
	unsigned _pmuService;
	unsigned _strobeService;
	unsigned _gpuPerfService;
	unsigned _chargerService;
	unsigned _ppmService;
	int _lowTempPerfCapCPU;
	int _lowTempPerfCapGPU;
	int _lowTempPerfCapBL;
	int _lowTempIndexPreUVLO;
	int _lowTempGainSpeaker;
	int _lowTempMaxStrobe;
	int _lowTempMaxGPUPerfState;
	int _lowTempPPMBaseline;
	BOOL _rearCameraPowered;
	BOOL _frontCameraPowered;
	int _cameraFloorCPU;
	int _cameraFloorGPU;
	int _mitigationControllerListID;
	int _coldPressureNotificationToken;
	unsigned long long _coldPressureState;
	int _coldThresholdHeavy;
	int _coldThresholdModerate;
	int _coldThresholdHysteresis;
	TableDrivenLowTempController* _lowTempClampCPU;
	TableDrivenLowTempController* _lowTempClampGPU;
	TableDrivenLowTempController* _lowTempClampBL;
	TableDrivenLowTempController* _lowTempClampPreUVLO;
	TableDrivenLowTempController* _lowTempClampSpeaker;
	TableDrivenLowTempController* _lowTempClampStrobe;
	TableDrivenLowTempController* _lowTempClampGPUPerf;
	TableDrivenLowTempController* _lowTempClampPPMBaseline;
	TableDrivenLowTempController* _lowTempClampPeakPowerPressure;
	BOOL _checkRaData;
	BOOL _backlightCapIsSoft;
	int _syntheticSOCType;
	int _lowTempSyntheticSOC;
	int _batteryRaValueTrue;
	NSDictionary* _stepperParams;
	UPOStepper* _stepper;
	int _peakPowerPressureNotificationToken;
	unsigned long long _peakPowerPressureLevel;
	int _rearCameraPowerStateToken;
	int _frontCameraPowerStateToken;
	NSObject*<OS_dispatch_queue> _clampQueue;

}

@property (assign,nonatomic) int rearCameraPowerStateToken;                        //@synthesize rearCameraPowerStateToken=_rearCameraPowerStateToken - In the implementation block
@property (assign,nonatomic) int frontCameraPowerStateToken;                       //@synthesize frontCameraPowerStateToken=_frontCameraPowerStateToken - In the implementation block
@property (assign,nonatomic) NSObject*<OS_dispatch_queue> clampQueue;              //@synthesize clampQueue=_clampQueue - In the implementation block
-(int)numberOfFields;
-(CFStringRef)copyHeaderForIndex:(int)arg1 ;
-(CFStringRef)copyFieldCurrentValueForIndex:(int)arg1 ;
-(id)initWithParams:(id)arg1 backlightController:(id)arg2 product:(id)arg3 ;
-(void)setFrontCameraPowerStateToken:(int)arg1 ;
-(BOOL)isFrontCameraPowered;
-(void)setRearCameraPowerStateToken:(int)arg1 ;
-(void)setClampQueue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(void)handleFrontCameraPowerStateNotification:(unsigned long long)arg1 ;
-(void)handleRearCameraPowerStateNotification:(unsigned long long)arg1 ;
-(int)rearCameraPowerStateToken;
-(int)frontCameraPowerStateToken;
-(void)updateMaxLIFloorsAndCeilings;
-(NSObject*<OS_dispatch_queue>)clampQueue;
-(BOOL)isRearCameraPowered;
-(void)updateInternal;
-(id)init;
-(void)update;
@end

