/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:26:43 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/SafariShared.framework/SafariShared
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <SafariShared/SafariShared-Structs.h>
#import <libobjc.A.dylib/WBSSiteMetadataImageCacheDelegate.h>
#import <libobjc.A.dylib/WBSWebViewMetadataFetchOperationDelegate.h>
#import <libobjc.A.dylib/WBSSiteMetadataProvider.h>

@protocol OS_dispatch_queue, WBSSiteMetadataProviderDelegate;
@class NSObject, WBSSiteMetadataImageCache, NSMutableDictionary, NSMutableSet, NSCache, NSMutableArray, WBSTouchIconCacheSettingsSQLiteStore, NSURL, NSString;

@interface WBSTouchIconCache : NSObject <WBSSiteMetadataImageCacheDelegate, WBSWebViewMetadataFetchOperationDelegate, WBSSiteMetadataProvider> {

	NSObject*<OS_dispatch_queue> _internalQueue;
	BOOL _didLoadSettings;
	WBSSiteMetadataImageCache* _imageCache;
	NSMutableDictionary* _hostsToRequestSets;
	NSMutableDictionary* _touchIconsDataForHosts;
	NSMutableSet* _failedTouchIconRequestHosts;
	NSCache* _requestsToResponses;
	NSMutableDictionary* _requestsToDelayedResponses;
	NSMutableArray* _pendingSaveTouchIconToDiskBlocks;
	NSMutableSet* _pendingTouchIconRequestHosts;
	WBSTouchIconCacheSettingsSQLiteStore* _cacheSettingsStore;
	BOOL _readOnly;
	BOOL _internalQueueBusy;
	id<WBSSiteMetadataProviderDelegate> _providerDelegate;
	NSURL* _cacheDirectoryURL;

}

@property (getter=isInternalQueueBusy) BOOL internalQueueBusy;                                         //@synthesize internalQueueBusy=_internalQueueBusy - In the implementation block
@property (nonatomic,readonly) NSURL * imageDirectoryURL; 
@property (nonatomic,readonly) NSURL * cacheDirectoryURL;                                              //@synthesize cacheDirectoryURL=_cacheDirectoryURL - In the implementation block
@property (getter=isReadOnly,nonatomic,readonly) BOOL readOnly;                                        //@synthesize readOnly=_readOnly - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (assign,nonatomic,__weak) id<WBSSiteMetadataProviderDelegate> providerDelegate;              //@synthesize providerDelegate=_providerDelegate - In the implementation block
+(id)defaultBackgroundColor;
+(id)defaultGlyphColor;
+(id)generateFavoritesIconForTitle:(id)arg1 url:(id)arg2 backgroundColor:(id)arg3 ;
+(id)_generateFavoritesIconForRequest:(id)arg1 withBackgroundColor:(id)arg2 ;
+(id)_favoritesGlyph;
+(id)defaultFavoritesIcon;
+(id)_generateDefaultFavoritesIconWithGlyphColor:(id)arg1 ;
+(id)_monogramConfiguration;
-(id)init;
-(void)dealloc;
-(void)_registerRequest:(id)arg1 ;
-(id)responseForRequest:(id)arg1 willProvideUpdates:(BOOL*)arg2 ;
-(void)prepareResponseForRequest:(id)arg1 allowDelayedResponse:(BOOL)arg2 ;
-(id<WBSSiteMetadataProviderDelegate>)providerDelegate;
-(void)setProviderDelegate:(id<WBSSiteMetadataProviderDelegate>)arg1 ;
-(id)operationForRequest:(id)arg1 ;
-(void)emptyCaches;
-(void)purgeUnneededCacheEntries;
-(id)initWithCacheDirectoryURL:(id)arg1 ;
-(NSURL *)cacheDirectoryURL;
-(void)siteMetadataImageCacheDidEmptyCache:(id)arg1 ;
-(void)siteMetadataImageCache:(id)arg1 didFinishLoadingImage:(id)arg2 forKeyString:(id)arg3 ;
-(void)siteMetadataImageCache:(id)arg1 didRemoveImageFromCacheForKeyString:(id)arg2 ;
-(void)siteMetadataImageCacheDidFinishLoadingSettings:(id)arg1 ;
-(NSURL *)imageDirectoryURL;
-(void)_setUpImageCacheSettingsSQLiteStore;
-(id)_imageCacheSettingsDatabaseURL;
-(void)_ensureCacheDirectory;
-(void)_openCacheSettingsDatabaseIfNeeded;
-(void)_notifyImageWasLoaded:(id)arg1 forHost:(id)arg2 ;
-(id)_touchIconForURL:(id)arg1 ;
-(void)_didLoadTouchIcon:(id)arg1 withCacheSettingsEntry:(id)arg2 ;
-(id)_resizedImage:(id)arg1 forHost:(id)arg2 ;
-(void)_updateTouchIconsDataForHost:(id)arg1 image:(id)arg2 requestDidSucceed:(BOOL)arg3 isUserLoadedWebpageRequest:(BOOL)arg4 higherPriorityIconDownloadFailedDueToNetworkError:(BOOL)arg5 ;
-(void)_saveTouchIconToDisk:(id)arg1 forHost:(id)arg2 requestDidSucceed:(BOOL)arg3 isUserLoadedWebpageRequest:(BOOL)arg4 higherPriorityIconDownloadFailedDueToNetworkError:(BOOL)arg5 ;
-(BOOL)_shouldRequestTouchIconWithTimeoutForURL:(id)arg1 inUserLoadedWebpage:(BOOL)arg2 initiatedFromBookmarkInteraction:(BOOL)arg3 ;
-(BOOL)isInternalQueueBusy;
-(BOOL)_shouldRequestTouchIconForURL:(id)arg1 inUserLoadedWebpage:(BOOL)arg2 initiatedFromBookmarkInteraction:(BOOL)arg3 ;
-(void)setInternalQueueBusy:(BOOL)arg1 ;
-(id)_responseForTouchIconRequestWithNoHost:(id)arg1 ;
-(BOOL)shouldRequestTouchIconForURL:(id)arg1 inUserLoadedWebpage:(BOOL)arg2 ;
-(BOOL)hasDeterminedIconAvailabilityForURL:(id)arg1 ;
-(void)_setUpAndReturnDelayedResponseForRequest:(id)arg1 ;
-(void)_setUpAndReturnPreparedResponseForRequest:(id)arg1 didReceiveNewData:(BOOL)arg2 ;
-(id)_didGenerateResponse:(id)arg1 forRequest:(id)arg2 ;
-(id)_responseForRequest:(id)arg1 withTouchIcon:(id)arg2 ;
-(void)_saveTouchIconToDiskWithResult:(id)arg1 forRequest:(id)arg2 ;
-(double)_maximumScreenScale;
-(void)_enumerateRequestsForHost:(id)arg1 usingBlock:(/*^block*/id)arg2 ;
-(void)_willSaveTouchIcon:(id)arg1 withCacheSettingsEntry:(id)arg2 ;
-(BOOL)_shouldGenerateTouchIconFromTouchIcon:(id)arg1 forRequest:(id)arg2 ;
-(void)_removeTouchIconsDataForHost:(id)arg1 ;
-(id)webViewMetadataFetchOperation:(id)arg1 webViewOfSize:(CGSize)arg2 withConfiguration:(id)arg3 ;
-(void)webViewMetadataFetchOperation:(id)arg1 didFinishUsingWebView:(id)arg2 ;
-(void)cacheFirstAvailableTouchIcon:(id)arg1 forURL:(id)arg2 ;
-(void)retainTouchIconForURLString:(id)arg1 ;
-(void)retainTouchIconForHost:(id)arg1 ;
-(void)retainTouchIconsForHosts:(id)arg1 ;
-(void)releaseTouchIconForURLString:(id)arg1 ;
-(void)releaseTouchIconForHost:(id)arg1 ;
-(void)releaseTouchIconsForHosts:(id)arg1 ;
-(BOOL)shouldRequestTouchIconForWebPageNavigationFromBookmarkInteractionForURL:(id)arg1 ;
-(void)stopWatchingUpdatesForRequest:(id)arg1 ;
-(BOOL)canHandleRequest:(id)arg1 ;
-(void)savePendingChangesBeforeTermination;
-(id)initWithCacheDirectoryURL:(id)arg1 isReadOnly:(BOOL)arg2 ;
-(id)_operationWithRequest:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(BOOL)isReadOnly;
@end

