/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:28:44 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <VectorKit/VectorKit-Structs.h>
@class VKViewVolume, VKFootprint;

@interface VKCamera : NSObject {

	RunLoopController* _runLoopController;
	SCD_Struct_VK25 _frustum;
	double _minHeight;
	double _maxHeight;
	double _maxPitch;
	double _terrainHeight;
	double _maxFarClipDistance;
	BOOL _needsUpdate;
	BOOL _updating;
	VKViewVolume* _viewVolume;
	VKFootprint* _footprint;
	double _tanHalfHorizFOV;
	double _tanHalfVerticalFOV;
	Matrix<double, 3, 1> _forward;
	Matrix<double, 3, 1> _right;
	Matrix<double, 3, 1> _up;
	double _fractionOfScreenAboveFarClipPlaneAtCanonicalPitch;
	double _distanceToGroundAndFarClipPlaneIntersection;
	double _screenHeightOfGroundAndFarClipPlaneIntersection;
	BOOL _allowDatelineWraparound;
	double _canonicalPitch;
	double _horizontalOffset;
	double _ndcZNear;
	double _aspectRatio;
	double _verticalFieldOfView;
	double _near;
	double _far;
	double _width;
	double _height;
	RigidTransform<double> _transform;
	Matrix<double, 4, 4> _scaledViewMatrix;
	Matrix<double, 4, 4> _scaledSkewedViewMatrix;
	Matrix<double, 4, 4> _scaledProjectionMatrix;
	Matrix<double, 4, 4> _scaledViewProjectionMatrix;
	Matrix<double, 4, 4> _scaledSkewedViewProjectionMatrix;
	Matrix<double, 4, 4> _unscaledViewMatrix;
	Matrix<double, 4, 4> _unscaledProjectionMatrix;
	Matrix<double, 4, 4> _unscaledViewProjectionMatrix;
	Matrix<double, 4, 4> _unscaledProjectionMatrixWithoutOffset;
	Matrix<double, 4, 4> _viewProjectionMatrixWithoutOffset;
	Matrix<double, 4, 4> _worldMatrix;
	double _maxHeightNoPitch;

}

@property (nonatomic,readonly) SCD_Struct_VK25 frustum; 
@property (assign,nonatomic) const Matrix<double* position; 
@property (assign,nonatomic) const Quaternion<double>* orientation; 
@property (assign,nonatomic) double aspectRatio;                                                        //@synthesize aspectRatio=_aspectRatio - In the implementation block
@property (nonatomic,readonly) float horizontalFieldOfView; 
@property (assign,nonatomic) float verticalFieldOfView; 
@property (nonatomic,readonly) double farClipDistance; 
@property (nonatomic,readonly) double nearClipDistance; 
@property (assign,nonatomic) double ndcZNear;                                                           //@synthesize ndcZNear=_ndcZNear - In the implementation block
@property (assign,nonatomic) VKCameraState cameraState; 
@property (assign,nonatomic) double minHeight;                                                          //@synthesize minHeight=_minHeight - In the implementation block
@property (assign,nonatomic) double maxHeight;                                                          //@synthesize maxHeight=_maxHeight - In the implementation block
@property (assign,nonatomic) double maxHeightNoPitch;                                                   //@synthesize maxHeightNoPitch=_maxHeightNoPitch - In the implementation block
@property (assign,nonatomic) double maxPitch;                                                           //@synthesize maxPitch=_maxPitch - In the implementation block
@property (assign,nonatomic) double terrainHeight;                                                      //@synthesize terrainHeight=_terrainHeight - In the implementation block
@property (nonatomic,readonly) VKViewVolume * viewVolume; 
@property (nonatomic,readonly) VKFootprint * footprint; 
@property (nonatomic,readonly) Matrix<double upVector; 
@property (nonatomic,readonly) Matrix<double rightVector; 
@property (nonatomic,readonly) Matrix<double forwardVector; 
@property (nonatomic,readonly) Matrix<double groundPoint; 
@property (nonatomic,readonly) double pitch; 
@property (nonatomic,readonly) double yaw; 
@property (nonatomic,readonly) double tanHalfHorizFOV; 
@property (nonatomic,readonly) double tanHalfVerticalFOV; 
@property (nonatomic,readonly) double distanceToGroundAndFarClipPlaneIntersection;                      //@synthesize distanceToGroundAndFarClipPlaneIntersection=_distanceToGroundAndFarClipPlaneIntersection - In the implementation block
@property (nonatomic,readonly) double screenHeightOfGroundAndFarClipPlaneIntersection;                  //@synthesize screenHeightOfGroundAndFarClipPlaneIntersection=_screenHeightOfGroundAndFarClipPlaneIntersection - In the implementation block
@property (assign,nonatomic) double fractionOfScreenAboveFarClipPlaneAtCanonicalPitch;                  //@synthesize fractionOfScreenAboveFarClipPlaneAtCanonicalPitch=_fractionOfScreenAboveFarClipPlaneAtCanonicalPitch - In the implementation block
@property (assign,nonatomic) BOOL allowDatelineWraparound;                                              //@synthesize allowDatelineWraparound=_allowDatelineWraparound - In the implementation block
@property (assign,nonatomic) double canonicalPitch;                                                     //@synthesize canonicalPitch=_canonicalPitch - In the implementation block
@property (assign,nonatomic) double horizontalOffset;                                                   //@synthesize horizontalOffset=_horizontalOffset - In the implementation block
@property (nonatomic,readonly) const Matrix<double* scaledViewMatrix; 
@property (nonatomic,readonly) const Matrix<double* scaledProjectionMatrix; 
@property (nonatomic,readonly) const Matrix<double* scaledViewProjectionMatrix; 
@property (nonatomic,readonly) const Matrix<double* scaledSkewedViewProjectionMatrix; 
@property (nonatomic,readonly) const Matrix<double* unscaledViewMatrix; 
@property (nonatomic,readonly) const Matrix<double* unscaledProjectionMatrix; 
@property (nonatomic,readonly) const Matrix<double* unscaledViewProjectionMatrix; 
@property (nonatomic,readonly) const Matrix<double* viewProjectionMatrixWithoutOffset; 
@property (nonatomic,readonly) const Matrix<double* unscaledProjectionMatrixWithoutOffset; 
-(id)descriptionDictionaryRepresentation;
-(double)pitch;
-(id)detailedDescription;
-(void)dealloc;
-(id)description;
-(const Quaternion<double>*)orientation;
-(void)setNeedsUpdate;
-(void)setPosition:(const Matrix<double*)arg1 ;
-(const Matrix<double*)position;
-(void)setOrientation:(const Quaternion<double>*)arg1 ;
-(float)zoomAtPoint:(CGPoint)arg1 ;
-(double)minHeight;
-(void)setHorizontalOffset:(double)arg1 ;
-(id)initWithRunLoopController:(RunLoopController*)arg1 ;
-(SCD_Struct_VK25)frustum;
-(float)verticalFieldOfView;
-(void)setVerticalFieldOfView:(float)arg1 ;
-(float)horizontalFieldOfView;
-(double)farClipDistance;
-(double)nearClipDistance;
-(double)tanHalfHorizFOV;
-(double)tanHalfVerticalFOV;
-(VKViewVolume *)viewVolume;
-(Matrix<double)upVector;
-(Matrix<double)rightVector;
-(Matrix<double)forwardVector;
-(Matrix<double)groundPoint;
-(double)displayZoomLevel;
-(void)setCameraState:(VKCameraState)arg1 ;
-(VKCameraState)cameraState;
-(BOOL)hasChangedState:(VKCameraState*)arg1 ;
-(float)maximumStyleZForRect:(const Box<double, 2>*)arg1 ;
-(BOOL)isWorldSpaceRectVisible:(const Box<double, 2>*)arg1 ;
-(BOOL)isOuterWorldBoundsVisible;
-(Matrix<double, 3, 1>)groundPlaneIntersectionPoint;
-(Matrix<double, 3, 1>)groundPointFromScreenPoint:(CGPoint)arg1 ;
-(Matrix<double, 3, 1>)groundPointFromScreenPoint:(CGPoint)arg1 atGroundLevel:(double)arg2 ;
-(double)widthOfViewAtDepth:(double)arg1 ;
-(double)depthForViewWidth:(double)arg1 ;
-(float)zoomAtCentrePoint;
-(void)adjustClipPlanes;
-(const Matrix<double*)scaledViewProjectionMatrix;
-(const Matrix<double*)scaledSkewedViewProjectionMatrix;
-(const Matrix<double*)viewProjectionMatrixWithoutOffset;
-(const Matrix<double*)unscaledProjectionMatrixWithoutOffset;
-(const Matrix<double*)scaledProjectionMatrix;
-(const Matrix<double*)scaledViewMatrix;
-(const Matrix<double*)unscaledViewMatrix;
-(const Matrix<double*)unscaledViewProjectionMatrix;
-(const Matrix<double*)unscaledProjectionMatrix;
-(Matrix<double, 3, 1>)projectWorldSpaceToClipSpace:(const Mercator3<double>*)arg1 ;
-(View<double>)view:(ViewSize)arg1 ;
-(double)maxHeightNoPitch;
-(void)setMaxHeightNoPitch:(double)arg1 ;
-(double)maxPitch;
-(void)setMaxPitch:(double)arg1 ;
-(double)terrainHeight;
-(void)setTerrainHeight:(double)arg1 ;
-(double)fractionOfScreenAboveFarClipPlaneAtCanonicalPitch;
-(void)setFractionOfScreenAboveFarClipPlaneAtCanonicalPitch:(double)arg1 ;
-(double)distanceToGroundAndFarClipPlaneIntersection;
-(double)screenHeightOfGroundAndFarClipPlaneIntersection;
-(double)canonicalPitch;
-(void)setCanonicalPitch:(double)arg1 ;
-(double)horizontalOffset;
-(double)ndcZNear;
-(void)setNdcZNear:(double)arg1 ;
-(/*^block*/id)annotationRectTest;
-(/*^block*/id)annotationCoordinateTest;
-(BOOL)allowDatelineWraparound;
-(void)setAllowDatelineWraparound:(BOOL)arg1 ;
-(double)yaw;
-(void)setAspectRatio:(double)arg1 ;
-(double)aspectRatio;
-(void)updateIfNeeded;
-(void)_setPosition:(const Matrix<double, 3, 1>*)arg1 ;
-(double)maxHeight;
-(void)setMaxHeight:(double)arg1 ;
-(void)setMinHeight:(double)arg1 ;
-(VKFootprint *)footprint;
@end

