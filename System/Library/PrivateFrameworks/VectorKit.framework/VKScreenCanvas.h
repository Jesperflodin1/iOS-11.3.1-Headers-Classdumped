/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:28:45 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <VectorKit/VectorKit-Structs.h>
#import <libobjc.A.dylib/VKCameraControllerDelegate.h>

@protocol MDRenderTarget, MDMapControllerDelegate;
@class VKCamera, VKCameraController, ARSession, NSString;

@interface VKScreenCanvas : NSObject <VKCameraControllerDelegate> {

	MapEngine* _mapEngine;
	RunLoopController* _runLoopController;
	AnimationRunner* _animationRunner;
	shared_ptr<md::TaskContext>* _taskContext;
	VKCamera* _camera;
	id<MDRenderTarget> _displayTarget;
	BOOL _userIsGesturing;
	VKCameraController* _cameraController;
	float _debugFramesPerSecond;
	VKEdgeInsets _edgeInsets;
	VKEdgeInsets _fullyOccludedEdgeInsets;
	VKEdgeInsets _labelEdgeInsets;
	BOOL _deallocing;
	unique_ptr<md::RenderQueue, std::__1::default_delete<md::RenderQueue> >* _renderQueue;
	Renderer* _mapRenderer;
	LayoutContext* _layoutContext;
	Matrix<float, 4, 1> _bgColor;
	id<MDMapControllerDelegate> _mapDelegate;
	PerspectiveView<double> _view;
	ARSession* _arSession;

}

@property (nonatomic,readonly) VKCamera * camera;                                  //@synthesize camera=_camera - In the implementation block
@property (nonatomic,readonly) MapEngine* mapEngine;                               //@synthesize mapEngine=_mapEngine - In the implementation block
@property (assign,nonatomic) float debugFramesPerSecond;                           //@synthesize debugFramesPerSecond=_debugFramesPerSecond - In the implementation block
@property (assign,nonatomic) unsigned char targetDisplay; 
@property (assign,nonatomic) VehicleState vehicleState; 
@property (assign,nonatomic) unsigned char emphasis; 
@property (assign,nonatomic) unsigned char applicationUILayout; 
@property (assign,nonatomic) VKEdgeInsets edgeInsets; 
@property (assign,nonatomic) VKEdgeInsets fullyOccludedEdgeInsets;                 //@synthesize fullyOccludedEdgeInsets=_fullyOccludedEdgeInsets - In the implementation block
@property (assign,nonatomic) VKEdgeInsets labelEdgeInsets; 
@property (assign,nonatomic) id<MDMapControllerDelegate> mapDelegate;              //@synthesize mapDelegate=_mapDelegate - In the implementation block
@property (nonatomic,readonly) Matrix<float bgColor;                               //@synthesize bgColor=_bgColor - In the implementation block
@property (assign,getter=isGesturing,nonatomic) BOOL gesturing; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(id)viewportInfo;
-(void)setNeedsLayout;
-(void)dealloc;
-(VKEdgeInsets)edgeInsets;
-(void)setContentsScale:(double)arg1 ;
-(void)setEdgeInsets:(VKEdgeInsets)arg1 ;
-(long long)tileSize;
-(shared_ptr<gss::StylesheetManager<gss::PropertyID> >*)styleManager;
-(VehicleState)vehicleState;
-(unsigned char)emphasis;
-(void)setApplicationUILayout:(unsigned char)arg1 ;
-(unsigned char)applicationUILayout;
-(float)debugFramesPerSecond;
-(void)setFullyOccludedEdgeInsets:(VKEdgeInsets)arg1 ;
-(VKEdgeInsets)fullyOccludedEdgeInsets;
-(BOOL)wantsTimerTick;
-(void)puckAnimator:(id)arg1 updatedPosition:(const Coordinate3D<Radians, double>*)arg2 course:(const Unit<RadianUnitDescription, double>*)arg3 ;
-(id<MDMapControllerDelegate>)mapDelegate;
-(shared_ptr<gss::CartoStyle<gss::PropertyID> >*)styleForFeature:(const shared_ptr<md::FeatureMarker>*)arg1 ;
-(MapEngine*)mapEngine;
-(void)transferStateFromCanvas:(id)arg1 ;
-(id)initWithMapEngine:(MapEngine*)arg1 inBackground:(BOOL)arg2 ;
-(BOOL)currentSceneRequiresMSAA;
-(void)gglWillDrawWithTimestamp;
-(void)updateCameraForFrameResize;
-(void)cameraControllerDidChangeCameraState:(id)arg1 ;
-(void)cameraControllerRequestsLayout:(id)arg1 ;
-(void)cameraController:(id)arg1 willChangeRegionAnimated:(BOOL)arg2 ;
-(void)cameraController:(id)arg1 didChangeRegionAnimated:(BOOL)arg2 ;
-(void)cameraControllerDidFinishInitialTrackingAnimation:(id)arg1 ;
-(void)cameraController:(id)arg1 didBecomePitched:(BOOL)arg2 ;
-(void)cameraController:(id)arg1 canEnter3DModeDidChange:(BOOL)arg2 ;
-(id)cameraController:(id)arg1 presentationForAnnotation:(id)arg2 ;
-(void)cameraController:(id)arg1 canZoomInDidChange:(BOOL)arg2 ;
-(void)cameraController:(id)arg1 canZoomOutDidChange:(BOOL)arg2 ;
-(void)cameraControllerHasStartedPanning:(id)arg1 ;
-(void)cameraControllerHasStoppedPanning:(id)arg1 ;
-(void)cameraControllerDidLeaveDefaultZoom:(id)arg1 ;
-(void)cameraControllerDidReturnToDefaultZoom:(id)arg1 ;
-(shared_ptr<md::FeatureMarker>*)buildingMarkerAtScreenPoint:(CGPoint)arg1 ;
-(shared_ptr<md::FeatureMarker>*)featureMarkerAtScreenPoint:(CGPoint)arg1 ;
-(void)cameraControllerRequestsUpdateDisplayLinkStatus:(id)arg1 ;
-(void)cameraController:(id)arg1 requestsDisplayRate:(long long)arg2 ;
-(void)cameraController:(id)arg1 flyoverModeDidChange:(int)arg2 ;
-(void)cameraController:(id)arg1 flyoverModeWillChange:(int)arg2 ;
-(void)enterARSessionAtCoordinate:(CGSize)arg1 ;
-(void)exitARSession;
-(void)setWantsLayout;
-(void)setCameraController:(id)arg1 ;
-(id)cameraController;
-(vector<std::__1::shared_ptr<md::LabelFeatureMarker>, std::__1::allocator<std::__1::shared_ptr<md::LabelFeatureMarker> > >*)roadMarkersForSelectionAtScreenPoint:(CGPoint)arg1 ;
-(void)didReceiveMemoryWarning:(BOOL)arg1 beAggressive:(BOOL)arg2 ;
-(void)setDebugFramesPerSecond:(float)arg1 ;
-(void)setVehicleState:(VehicleState)arg1 ;
-(void)setLabelEdgeInsets:(VKEdgeInsets)arg1 ;
-(VKEdgeInsets)labelEdgeInsets;
-(void)setGesturing:(BOOL)arg1 ;
-(BOOL)isGesturing;
-(void)setEmphasis:(unsigned char)arg1 ;
-(BOOL)restoreViewportFromInfo:(id)arg1 ;
-(void)setMapDelegate:(id<MDMapControllerDelegate>)arg1 ;
-(void)runAnimation:(id)arg1 ;
-(unsigned char)targetDisplay;
-(void)setTargetDisplay:(unsigned char)arg1 ;
-(void)didPresent;
-(void)updateWithTimestamp:(double)arg1 ;
-(VKCamera *)camera;
-(shared_ptr<gss::StyleSheet<gss::PropertyID> >*)stylesheet;
-(Matrix<float)bgColor;
@end

