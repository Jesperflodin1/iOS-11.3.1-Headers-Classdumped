/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:30:06 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <libobjc.A.dylib/NSCopying.h>

@class TSTFormulaPredicate, TSWPParagraphStyle, TSTCellStyle;

@interface TSTConditionalStyleRule : NSObject <NSCopying> {

	TSTFormulaPredicate* mPredicate;
	TSWPParagraphStyle* mTextStyle;
	TSTCellStyle* mCellStyle;
	int mPredicateType;

}

@property (nonatomic,readonly) TSCEFormula* formula; 
@property (nonatomic,copy,readonly) TSTFormulaPredicate * predicate; 
@property (nonatomic,readonly) int predicateType; 
@property (nonatomic,copy,readonly) TSTCellStyle * cellStyle; 
@property (nonatomic,copy,readonly) TSWPParagraphStyle * textStyle; 
+(id)conditionalStyleRuleWithRule:(id)arg1 ;
-(id)copyByRemappingHostCellAgnosticOwnerUIDsWithMap:(const UUIDMap<TSP::UUIDMap>*)arg1 calcEngine:(id)arg2 ownerUID:(const UUIDData<TSP::UUIDData>*)arg3 error:(BOOL*)arg4 ;
-(id)copyByRemappingOwnerUIDsWithMap:(const UUIDMap<TSP::UUIDMap>*)arg1 calcEngine:(id)arg2 error:(BOOL*)arg3 ;
-(id)copyByClearingUids:(id)arg1 containingTableUID:(const UUIDData<TSP::UUIDData>*)arg2 ;
-(BOOL)hasBadRefWithUidInfo;
-(id)copyByRepairingBadReferences:(id)arg1 ;
-(id)copyToUidFormForTableInfo:(id)arg1 inCellCoordinate:(TSUCellCoord)arg2 preserveHostCell:(BOOL)arg3 ;
-(id)copyByUpgradingToLinkedRefAtHostCellRef:(const TSCECellRef*)arg1 ;
-(int)predicateType;
-(id)copyToGeometricFormWithRewriteContext:(id)arg1 ;
-(void)setHostCell:(const UUIDData<TSP::UUIDData>*)arg1 hostColumnUID:(const UUIDData<TSP::UUIDData>*)arg2 hostRowUID:(const UUIDData<TSP::UUIDData>*)arg3 ;
-(BOOL)containsUidReferences;
-(id)copyByRewritingWithSpec:(id)arg1 inOwner:(id)arg2 inCellCoordinate:(TSUCellCoord)arg3 ;
-(id)copyByOffsettingRelativeReferencesWithColumnOffset:(short)arg1 rowOffset:(int)arg2 ;
-(id)initWithPredicate:(id)arg1 cellStyle:(id)arg2 textStyle:(id)arg3 ;
-(BOOL)isEqualForInspector:(id)arg1 ;
-(BOOL)evaluateFormulaAtCellID:(TSUCellCoord)arg1 withCalcEngine:(id)arg2 withFormulaTableUID:(const UUIDData<TSP::UUIDData>*)arg3 ;
-(id)copyByUpdatingHostCellRef:(const TSCECellRef*)arg1 ;
-(void)dealloc;
-(BOOL)isEqual:(id)arg1 ;
-(id)description;
-(id)copyWithZone:(NSZone*)arg1 ;
-(TSTFormulaPredicate *)predicate;
-(TSWPParagraphStyle *)textStyle;
-(id)copyWithContext:(id)arg1 ;
-(TSTCellStyle *)cellStyle;
-(TSCEFormula*)formula;
@end

