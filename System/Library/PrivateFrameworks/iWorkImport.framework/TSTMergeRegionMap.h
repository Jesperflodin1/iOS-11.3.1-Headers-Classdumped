/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:30:05 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <iWorkImport/TSPObject.h>

@interface TSTMergeRegionMap : TSPObject {

	unordered_map<TSUCellCoord, TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<std::__1::pair<const TSUCellCoord, TSUCellCoord> > >* mCellIDToMergeOrigin;
	unordered_map<TSUCellCoord, TSUColumnRowSize, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<std::__1::pair<const TSUCellCoord, TSUColumnRowSize> > >* mMergeOriginToSize;
	TSUCellRect mUnionedMergeRange;

}
+(id)mergeRegionMapWithContext:(id)arg1 andCellRangesSet:(const unordered_set<TSUCellRect, std::__1::hash<TSUCellRect>, std::__1::equal_to<TSUCellRect>, std::__1::allocator<TSUCellRect> >*)arg2 ;
+(id)mergeRegionMapWithContext:(id)arg1 andCellRanges:(const vector<TSUCellRect, std::__1::allocator<TSUCellRect> >*)arg2 ;
+(id)mergeRegionMapFromMap:(id)arg1 intersectingRange:(TSUCellRect)arg2 ;
-(void)saveToArchiver:(id)arg1 ;
-(void)loadFromUnarchiver:(id)arg1 ;
-(const unordered_map<TSUCellCoord, TSUColumnRowSize, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<std::__1::pair<const TSUCellCoord, TSUColumnRowSize> > >*)mergeOriginToSize;
-(const unordered_map<TSUCellCoord, TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<std::__1::pair<const TSUCellCoord, TSUCellCoord> > >*)cellIDToMergeOrigin;
-(unsigned long long)count;
-(id)initWithContext:(id)arg1 ;
-(void)enumerateRangesUsingBlock:(/*^block*/id)arg1 ;
-(TSUCellRect)mergedRangeForCellID:(TSUCellCoord)arg1 ;
-(id)iterator;
-(BOOL)remove:(TSUCellRect)arg1 ;
-(BOOL)insert:(TSUCellRect)arg1 ;
-(id)initRegionMapFromMap:(id)arg1 rowRemapping:(id)arg2 ;
-(id)initRegionMapFromMap:(id)arg1 intersectingRange:(TSUCellRect)arg2 ;
-(BOOL)find:(TSUCellRect)arg1 ;
-(BOOL)hasRangeSpanningRows;
@end

