/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:30:02 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <iWorkImport/TSDDrawableInfo.h>
#import <iWorkImport/TSSPropertySource.h>
#import <iWorkImport/TSDReplaceableMediaContainer.h>
#import <iWorkImport/TSDReducibleImageContainer.h>
#import <iWorkImport/TSDCompatibilityAwareMediaContainer.h>
#import <iWorkImport/TSCEReferenceResolving.h>
#import <iWorkImport/TSCECalculationEngineRegistration.h>
#import <iWorkImport/TSCEFormulaOwning.h>
#import <iWorkImport/TSCETableModeling.h>
#import <iWorkImport/TSCETableModeling.h>
#import <iWorkImport/TSDContainerInfo.h>
#import <iWorkImport/TSDMixing.h>
#import <iWorkImport/TSKModel.h>
#import <iWorkImport/TSKSearchable.h>
#import <iWorkImport/TSSPresetSource.h>
#import <iWorkImport/TSSStyleClient.h>
#import <iWorkImport/TSTCustomStrokeProviding.h>
#import <iWorkImport/TSTStyleProviding.h>
#import <iWorkImport/TSTTableHiddenRowColumnProviding.h>
#import <iWorkImport/TSTTableInternalGeometryProviding.h>
#import <iWorkImport/TSTTableMergeRangeProviding.h>
#import <iWorkImport/TSTTableStrokeProviding.h>
#import <iWorkImport/TSWPStorageParent.h>
#import <iWorkImport/TSWPTextStatisticsTrackerProvider.h>

@class TSTTablePartitioner, TSTMasterLayout, TSTTableModel, NSString, TSCECalculationEngine, NSUUID, TSCEOwnerUidMapper, TSDStroke, TSTTableStylePreset, TSTCell, TSDFill, TSCEOwnerFormulaMap, TSTImportWarningSetByCoordinateMap, TSTCellDictionary, TSCECellCoordinateVector, TSTConditionalStyleFormulaOwner, TSTMergeOwner, TSTTableFilterSet, TSTHiddenStateFormulaOwner, TSTTableSortOrder, TSTSortRuleReferenceTracker, TSTHiddenStateIndexSet, TSTStrokeSidecar, TSTStructuredTextImportRecord, NSArray, TSDInfoGeometry, TSTTableStyle, TSTCellStyle, TSWPParagraphStyle, TSWPShapeStyle;

@interface TSTInfo : TSDDrawableInfo <TSSPropertySource, TSDReplaceableMediaContainer, TSDReducibleImageContainer, TSDCompatibilityAwareMediaContainer, TSCEReferenceResolving, TSCECalculationEngineRegistration, TSCEFormulaOwning, TSCETableModeling, TSCETableModeling, TSDContainerInfo, TSDMixing, TSKModel, TSKSearchable, TSSPresetSource, TSSStyleClient, TSTCustomStrokeProviding, TSTStyleProviding, TSTTableHiddenRowColumnProviding, TSTTableInternalGeometryProviding, TSTTableMergeRangeProviding, TSTTableStrokeProviding, TSWPStorageParent, TSWPTextStatisticsTrackerProvider> {

	BOOL _hasReference;
	BOOL _migratingStylesOnly;
	TSTTablePartitioner* _partitioner;
	TSTMasterLayout* _masterLayout;
	TSTTableModel* _tableModel;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (assign,nonatomic) BOOL migratingStylesOnly;                                                             //@synthesize migratingStylesOnly=_migratingStylesOnly - In the implementation block
@property (assign,nonatomic) BOOL hasReference;                                                                    //@synthesize hasReference=_hasReference - In the implementation block
@property (nonatomic,retain) TSTTablePartitioner * partitioner;                                                    //@synthesize partitioner=_partitioner - In the implementation block
@property (nonatomic,retain) TSTMasterLayout * masterLayout;                                                       //@synthesize masterLayout=_masterLayout - In the implementation block
@property (nonatomic,retain) TSTTableModel * tableModel;                                                           //@synthesize tableModel=_tableModel - In the implementation block
@property (assign,nonatomic) TSCECalculationEngine * calcEngine; 
@property (nonatomic,readonly) NSUUID * nsTableUID; 
@property (assign,nonatomic) UUIDData<TSP::UUIDData> tableUID; 
@property (assign,nonatomic) UUIDData<TSP::UUIDData> fromTableUID; 
@property (nonatomic,readonly) TSCEOwnerUidMapper * ownerUIDMapper; 
@property (nonatomic,readonly) TSCEOwnerUidMapper * identityOwnerUIDMapper; 
@property (assign,nonatomic) BOOL wasCut; 
@property (assign,nonatomic) unsigned short numberOfRows; 
@property (assign,nonatomic) unsigned short numberOfColumns; 
@property (assign,nonatomic) unsigned short numberOfHeaderRows; 
@property (assign,nonatomic) unsigned short numberOfHeaderColumns; 
@property (assign,nonatomic) unsigned short numberOfFooterRows; 
@property (assign,nonatomic) BOOL headerRowsFrozen; 
@property (assign,nonatomic) BOOL headerColumnsFrozen; 
@property (nonatomic,readonly) unsigned short numberOfHiddenRows; 
@property (nonatomic,readonly) unsigned short numberOfHiddenColumns; 
@property (nonatomic,readonly) unsigned short numberOfUserHiddenRows; 
@property (nonatomic,readonly) unsigned short numberOfUserHiddenColumns; 
@property (nonatomic,readonly) unsigned short numberOfVisibleBodyRows; 
@property (nonatomic,readonly) unsigned short numberOfUserVisibleBodyRows; 
@property (nonatomic,readonly) unsigned short numberOfVisibleBodyColumns; 
@property (nonatomic,readonly) unsigned short numberOfFilteredRows; 
@property (assign,nonatomic) double defaultRowHeight; 
@property (assign,nonatomic) double defaultColumnWidth; 
@property (nonatomic,retain) NSString * tableName; 
@property (assign,nonatomic) BOOL tableNameEnabled; 
@property (assign,nonatomic) double tableNameHeight; 
@property (assign,nonatomic) BOOL tableNameBorderEnabled; 
@property (nonatomic,readonly) TSDStroke * tableNameBorderStroke; 
@property (assign,nonatomic) BOOL repeatingHeaderRowsEnabled; 
@property (assign,nonatomic) BOOL repeatingHeaderColumnsEnabled; 
@property (nonatomic,readonly) int tableWritingDirection; 
@property (assign,nonatomic) long long contentWritingDirection; 
@property (nonatomic,readonly) BOOL hasTableBorder; 
@property (nonatomic,readonly) BOOL hasAlternatingRows; 
@property (assign,nonatomic) BOOL styleApplyClearsAll; 
@property (nonatomic,retain) TSTTableStylePreset * tableStylePreset; 
@property (nonatomic,readonly) TSTCell * defaultBodyCell; 
@property (nonatomic,readonly) TSTCell * defaultHeaderRowCell; 
@property (nonatomic,readonly) TSTCell * defaultHeaderColumnCell; 
@property (nonatomic,readonly) TSTCell * defaultFooterRowCell; 
@property (nonatomic,readonly) TSDFill * backgroundFill; 
@property (nonatomic,readonly) TSDFill * bodyFill; 
@property (nonatomic,readonly) TSDFill * headerColumnsFill; 
@property (nonatomic,readonly) TSDFill * headerRowsFill; 
@property (nonatomic,readonly) TSDFill * footerRowsFill; 
@property (nonatomic,retain) TSCEOwnerFormulaMap * formulasForUndo; 
@property (nonatomic,retain) TSTImportWarningSetByCoordinateMap * warningSetsForUndo; 
@property (nonatomic,readonly) TSTCellDictionary * cellsPendingWrite; 
@property (nonatomic,readonly) TSCECellCoordinateVector * cellsToInvalidateAfterRecalc; 
@property (nonatomic,readonly) TSCECellCoordinateVector * cellsToInvalidateNonoverflowingAfterRecalc; 
@property (nonatomic,readonly) TSTConditionalStyleFormulaOwner * conditionalStyleFormulaOwner; 
@property (nonatomic,readonly) UUIDData<TSP::UUIDData> conditionalStyleFormulaOwnerUID; 
@property (nonatomic,readonly) TSTMergeOwner * mergeOwner; 
@property (nonatomic,copy) TSTTableFilterSet * filterSet; 
@property (nonatomic,readonly) TSTHiddenStateFormulaOwner * hiddenStateFormulaOwnerForRows; 
@property (nonatomic,readonly) TSTHiddenStateFormulaOwner * hiddenStateFormulaOwnerForColumns; 
@property (nonatomic,copy) TSTTableSortOrder * sortOrder; 
@property (nonatomic,readonly) TSTSortRuleReferenceTracker * sortRuleReferenceTracker; 
@property (nonatomic,readonly) TSTHiddenStateIndexSet * hiddenRows; 
@property (nonatomic,readonly) TSTHiddenStateIndexSet * userHiddenRows; 
@property (nonatomic,readonly) TSTHiddenStateIndexSet * hiddenColumns; 
@property (nonatomic,readonly) TSTStrokeSidecar * strokeSidecar; 
@property (assign,nonatomic) BOOL presetNeedsStrongOwnership; 
@property (assign,nonatomic) BOOL wasUnarchivedFromAProvidedTable; 
@property (nonatomic,retain) TSTStructuredTextImportRecord * textImportRecord; 
@property (getter=isReimportable,nonatomic,readonly) BOOL reimportable; 
@property (getter=isNewlyImported,nonatomic,readonly) BOOL newlyImported; 
@property (nonatomic,readonly) BOOL supportsRichTextUndo; 
@property (assign) NSArray * rowHeights; 
@property (assign) NSArray * columnWidths; 
@property (assign,nonatomic) BOOL matchesObjectPlaceholderGeometry; 
@property (nonatomic,copy) TSDInfoGeometry * geometry; 
@property (assign,nonatomic) NSObject*<TSDContainerInfo> parentInfo; 
@property (assign,nonatomic) TSPObject*<TSDOwningAttachment> owningAttachment; 
@property (nonatomic,readonly) TSPObject*<TSDOwningAttachment> owningAttachmentNoRecurse; 
@property (getter=isFloatingAboveText,nonatomic,readonly) BOOL floatingAboveText; 
@property (getter=isAnchoredToText,nonatomic,readonly) BOOL anchoredToText; 
@property (getter=isInlineWithText,nonatomic,readonly) BOOL inlineWithText; 
@property (getter=isAttachedToBodyText,nonatomic,readonly) BOOL attachedToBodyText; 
@property (nonatomic,readonly) NSArray * childInfos; 
@property (nonatomic,retain) TSTTableStyle * tableStyle; 
@property (nonatomic,retain) TSTCellStyle * bodyCellStyle; 
@property (nonatomic,retain) TSTCellStyle * headerRowCellStyle; 
@property (nonatomic,retain) TSTCellStyle * headerColumnCellStyle; 
@property (nonatomic,retain) TSTCellStyle * footerRowCellStyle; 
@property (nonatomic,retain) TSWPParagraphStyle * bodyTextStyle; 
@property (nonatomic,retain) TSWPParagraphStyle * headerRowTextStyle; 
@property (nonatomic,retain) TSWPParagraphStyle * headerColumnTextStyle; 
@property (nonatomic,retain) TSWPParagraphStyle * footerRowTextStyle; 
@property (nonatomic,retain) TSWPParagraphStyle * tableNameStyle; 
@property (nonatomic,retain) TSWPShapeStyle * tableNameShapeStyle; 
@property (nonatomic,readonly) TSDStroke * defaultHorizontalBorderStroke; 
@property (nonatomic,readonly) TSDStroke * defaultHorizontalBorderStrokeEvenIfNotVisible; 
@property (nonatomic,readonly) TSDStroke * defaultVerticalBorderStroke; 
@property (nonatomic,readonly) TSDStroke * bodyColumnStroke; 
@property (nonatomic,readonly) TSDStroke * bodyRowStroke; 
@property (nonatomic,readonly) TSDStroke * bodyRowStrokeEvenIfNotVisible; 
@property (nonatomic,readonly) TSDStroke * headerColumnBorderStroke; 
@property (nonatomic,readonly) TSDStroke * headerColumnBodyColumnStroke; 
@property (nonatomic,readonly) TSDStroke * headerColumnBodyRowStroke; 
@property (nonatomic,readonly) TSDStroke * headerColumnSeparatorStroke; 
@property (nonatomic,readonly) TSDStroke * headerRowBorderStroke; 
@property (nonatomic,readonly) TSDStroke * headerRowBodyColumnStroke; 
@property (nonatomic,readonly) TSDStroke * headerRowBodyRowStroke; 
@property (nonatomic,readonly) TSDStroke * headerRowSeparatorStroke; 
@property (nonatomic,readonly) TSDStroke * footerRowBorderStroke; 
@property (nonatomic,readonly) TSDStroke * footerRowBodyColumnStroke; 
@property (nonatomic,readonly) TSDStroke * footerRowBodyRowStroke; 
@property (nonatomic,readonly) TSDStroke * footerRowSeparatorStroke; 
@property (nonatomic,readonly) BOOL autoListRecognition; 
@property (nonatomic,readonly) BOOL autoListTermination; 
@property (nonatomic,readonly) BOOL textIsVertical; 
@property (nonatomic,readonly) BOOL textIsLinked; 
@property (nonatomic,readonly) BOOL preventsComments; 
@property (nonatomic,readonly) BOOL storageChangesInvalidateWrap; 
+(id)resolverContainerMatchingName:(id)arg1 inDocumentRoot:(id)arg2 ;
+(id)resolverMatchingName:(id)arg1 inDocumentRoot:(id)arg2 contextResolver:(id)arg3 ;
+(TSCETableReference)makeCellReferenceInSameTable:(const TSCETableReference*)arg1 cellID:(TSUCellCoord)arg2 ;
+(TSCETableReferenceVector)makeReferenceVectorWithReference:(const TSCETableReference*)arg1 rangeContext:(unsigned char)arg2 apparentRangePtr:(TSCERangeCoordinate*)arg3 ;
+(TSCEFormat*)format:(const TSCETableReference*)arg1 fromCell:(TSUCellCoord)arg2 ;
+(TSCERangeCoordinate)getRange:(const TSCETableReference*)arg1 ;
+(TSCERangeRef)getRangeReference:(const TSCETableReference*)arg1 ;
+(int)getHidingAction:(const TSCETableReference*)arg1 ;
+(TSCETableReference)canonicalCellReferenceForReference:(const TSCETableReference*)arg1 ;
+(TSCEValue)scalarValue:(const TSCETableReference*)arg1 fromCell:(TSUCellCoord)arg2 permitAccessInsideMergeRegions:(BOOL)arg3 fetchRichTextAttributesIfPlainText:(BOOL)arg4 ;
+(int)mergeReferences:(TSCETableReference*)arg1 left:(const TSCETableReference*)arg2 right:(const TSCETableReference*)arg3 ;
+(void)prefetchData:(TSCEReferenceValue*)arg1 fromVectorObject:(TSCETableReferenceVector*)arg2 cellID:(TSUCellCoord)arg3 ;
+(TSCEFormat*)formatFromVector:(const TSCETableReferenceVector*)arg1 atIndex:(unsigned long long)arg2 ;
+(id)resolverMatchingNameWithContextContainer:(id)arg1 inDocumentRoot:(id)arg2 contextContainerName:(id)arg3 ;
+(BOOL)needsObjectUUID;
+(void)ensureAllTablesAreRegisteredInDocumentRoot:(id)arg1 ;
+(id)tablePrototypeWithIndex:(long long)arg1 context:(id)arg2 geometry:(id)arg3 styles:(id)arg4 forTableInsertOnly:(BOOL)arg5 ;
+(id)localizedDescriptionForProtoIndex:(unsigned long long)arg1 ;
+(BOOL)validateNewName:(id)arg1 forTable:(id)arg2 ;
+(void)performRewritesForInsertedTableInfos:(id)arg1 ;
+(TSUCellCoord)resolvedCellIDForScalarAccess:(TSCETableReference)arg1 fromCell:(TSUCellCoord)arg2 ;
+(TSCEValue)valueForTable:(id)arg1 cellID:(TSUCellCoord)arg2 fetchRichTextAttributesIfPlainText:(BOOL)arg3 ;
+(id)presetKinds;
+(void)bootstrapPresetsOfKind:(id)arg1 inTheme:(id)arg2 alternate:(int)arg3 ;
+(BOOL)canPartition;
+(void)bootstrapPresetsOfKind:(id)arg1 inTheme:(id)arg2 alternate:(int)arg3 reservedCount:(unsigned long long)arg4 ;
+(unsigned long long)tableAreaForCellID:(TSUCellCoord)arg1 inTableWithHeaderColumns:(unsigned short)arg2 headerRows:(unsigned short)arg3 footerRows:(unsigned short)arg4 totalRows:(unsigned short)arg5 ;
+(TSUCellRect)cellRangeForTableArea:(unsigned long long)arg1 givenTableSize:(SCD_Struct_TS607)arg2 numberOfHeaderRows:(unsigned short)arg3 numberOfFooterRows:(unsigned short)arg4 numberOfHeaderColumns:(unsigned short)arg5 ;
+(unsigned short)numberOfRowsForProtoIndex:(unsigned long long)arg1 ;
+(unsigned short)numberOfColumnsForProtoIndex:(unsigned long long)arg1 ;
+(id)geometryForPrototypeIndex:(long long)arg1 withCanvasPoint:(CGPoint)arg2 ;
+(id)tablePrototypeWithIndex:(long long)arg1 context:(id)arg2 geometry:(id)arg3 styles:(id)arg4 ;
-(UUIDData<TSP::UUIDData>)tableUID;
-(id)mutableRowIndexesForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(id)mutableColumnIndexesForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(unsigned short)indexForUID:(const UUIDData<TSP::UUIDData>*)arg1 isRows:(BOOL)arg2 ;
-(UUIDData<TSP::UUIDData>)conditionalStyleFormulaOwnerUID;
-(TSCERangeCoordinate)tableRangeCoordinate;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)rowUIDsForRowRange:(NSRange)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)columnUIDsForColumnRange:(NSRange)arg1 ;
-(id)UIDSetForIndexes:(id)arg1 isRows:(BOOL)arg2 ;
-(UUIDData<TSP::UUIDData>)columnUIDForColumnIndex:(unsigned char)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)UIDsForRange:(NSRange)arg1 isRows:(BOOL)arg2 ;
-(UUIDData<TSP::UUIDData>)rowUIDForRowIndex:(unsigned short)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)UIDsForIndexes:(id)arg1 isRows:(BOOL)arg2 ;
-(TSCERangeCoordinate)footerRangeCoordinate;
-(unsigned short)rowIndexForRowUID:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(unsigned char)columnIndexForColumnUID:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(TSCETableReference)makeReference:(TSUCellCoord)arg1 bottomRight:(TSUCellCoord)arg2 ;
-(TSCECalculationEngine *)calcEngine;
-(void)setCalcEngine:(TSCECalculationEngine *)arg1 ;
-(TSCERangeCoordinate)apparentRangeForRange:(TSCERangeCoordinate)arg1 rangeContext:(unsigned char)arg2 ;
-(TSCERangeCoordinate)bodyRangeCoordinate;
-(UUIDData<TSP::UUIDData>)mergeOwnerUID;
-(void)setTableUID:(UUIDData<TSP::UUIDData>)arg1 ;
-(id)UIDSetForRange:(NSRange)arg1 isRows:(BOOL)arg2 ;
-(id)mutableIndexesForUIDSet:(id)arg1 isRows:(BOOL)arg2 notFoundUIDs:(id)arg3 ;
-(id)indexesForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 isRows:(BOOL)arg2 ;
-(id)cellTextStyle:(TSUCellCoord)arg1 ;
-(UUIDData<TSP::UUIDData>)resolverUID;
-(UUIDData<TSP::UUIDData>)formulaOwnerUID;
-(UUIDData<TSP::UUIDData>)UIDForIndex:(unsigned short)arg1 isRows:(BOOL)arg2 ;
-(TSCERangeCoordinate)preMergeRangeFromUidTract:(id)arg1 ;
-(int)registerWithCalculationEngine:(id)arg1 ;
-(TSCERangeCoordinate)resolverExpandCellRangeToCoverMergedCells:(TSCERangeCoordinate)arg1 ;
-(void)saveToArchiver:(id)arg1 ;
-(void)loadFromUnarchiver:(id)arg1 ;
-(SCD_Struct_TS153)recalculateForCalculationEngine:(id)arg1 formulaID:(SCD_Struct_TS128)arg2 isInCycle:(BOOL)arg3 hasCalculatedPrecedents:(BOOL)arg4 ;
-(BOOL)resolverIsATable;
-(BOOL)hasCellID:(TSUCellCoord)arg1 ;
-(BOOL)cellWasModifiedInThisRecalcCycle:(TSUCellCoord)arg1 ;
-(void)resetDependenciesForCell:(TSUCellCoord)arg1 ;
-(void)resetAllFormulaDependenciesForCell:(TSUCellCoord)arg1 ;
-(id)cellRangeName:(TSCERangeCoordinate)arg1 stickyBits:(unsigned char)arg2 suppressIdenticalEndReference:(BOOL)arg3 quoteComponents:(BOOL)arg4 forceEscaping:(BOOL)arg5 rangeNameContainsColumnOrRowName:(out BOOL*)arg6 ;
-(BOOL)hasNamesInHeaders;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)rowUIDsForRowIndexes:(id)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)allRowUIDs;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)columnUIDsForColumnIndexes:(id)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)allColumnUIDs;
-(void)writeResultsForCalculationEngine:(id)arg1 ;
-(void)invalidateForCalculationEngine:(id)arg1 ;
-(void)rewriteForCalculationEngine:(id)arg1 formulaID:(SCD_Struct_TS128)arg2 rewriteSpec:(id)arg3 ;
-(void)beginRewriteForCalculationEngine:(id)arg1 spec:(id)arg2 ;
-(id)objectToArchiveInDependencyTracker;
-(void)registerWithCalculationEngineForDocumentLoad:(id)arg1 ;
-(void)unregisterFromCalculationEngine:(id)arg1 ;
-(BOOL)registerLast;
-(void)saveToArchive:(TableInfoArchive*)arg1 archiver:(id)arg2 ;
-(void)loadFromArchive:(const TableInfoArchive*)arg1 unarchiver:(id)arg2 ;
-(void)upgradeFormatsForCustomFormatListU2_0;
-(void)reassignPasteboardCustomFormatKeys;
-(void)upgradeDuringDocumentUpgradeIfNeeded:(unsigned long long)arg1 ;
-(BOOL)isReimportable;
-(BOOL)isNewlyImported;
-(void)registerAllFormulasWithCalculationEngine:(id)arg1 ;
-(void)setStylesheetForUpgradeToSingleStylesheet:(id)arg1 ;
-(BOOL)shouldCancelScrollingToSelectionPath:(id)arg1 forChanges:(id)arg2 ;
-(void)setPrimitiveGeometry:(id)arg1 ;
-(BOOL)prohibitsModificationToChildren;
-(BOOL)textIsLinked;
-(BOOL)preventsComments;
-(void)iterateCellsWithFlags:(unsigned long long)arg1 searchFlags:(unsigned long long)arg2 usingBlock:(/*^block*/id)arg3 ;
-(int)setCellsWithCellMap:(id)arg1 calculationEngine:(id)arg2 ;
-(long long)mixingTypeWithObject:(id)arg1 context:(id)arg2 ;
-(BOOL)isEquivalentForCrossDocumentPasteMasterComparison:(id)arg1 ;
-(BOOL)requiresStagesBuildingInReverse;
-(BOOL)suppliesFinalTextures;
-(void)enumerateAllAnnotationsInModelWithHitBlock:(/*^block*/id)arg1 ;
-(long long)mediaCompatibilityTypeForData:(id)arg1 associatedHint:(id)arg2 ;
-(id)infoForSelectionPath:(id)arg1 ;
-(CGPoint)autosizePositionOffsetForGeometry:(id)arg1 dynamicallyDraggedLayout:(id)arg2 ;
-(BOOL)contentsAreRightToLeft;
-(TSUCellRect)expandCellRangeToCoverMergedCells:(TSUCellRect)arg1 ;
-(TSUCellCoord)cellIDForCellUID:(const TSTCellUID*)arg1 ;
-(TSTMergeOwner *)mergeOwner;
-(id)indexesOfVisibleRowsInCellRange:(TSUCellRect)arg1 ;
-(unsigned short)indexOfVisibleRowAfterAndIncludingRowAtIndex:(unsigned short)arg1 ;
-(unsigned short)indexOfVisibleRowBeforeAndIncludingRowAtIndex:(unsigned short)arg1 ;
-(id)indexesOfVisibleColumnsInCellRange:(TSUCellRect)arg1 ;
-(unsigned char)indexOfVisibleColumnAfterAndIncludingColumnAtIndex:(unsigned char)arg1 ;
-(unsigned char)indexOfVisibleColumnBeforeAndIncludingColumnAtIndex:(unsigned char)arg1 ;
-(BOOL)isSingleCellOrMergeRange:(TSUCellRect)arg1 ;
-(BOOL)hasMergeFragmentAtCellID:(TSUCellCoord)arg1 ;
-(TSUCellRect)mergeRangeAtCellID:(TSUCellCoord)arg1 ;
-(id)newCell;
-(int)getCell:(id)arg1 atCellID:(TSUCellCoord)arg2 ;
-(TSTTableStylePreset *)tableStylePreset;
-(void)setTableStylePreset:(TSTTableStylePreset *)arg1 ;
-(UUIDData<TSP::UUIDData>)fromTableUID;
-(double)heightOfRowAtIndex:(unsigned short)arg1 isDefault:(out BOOL*)arg2 ;
-(unsigned char)hidingActionForRowAtIndex:(unsigned short)arg1 ;
-(BOOL)hideRowAtIndex:(unsigned short)arg1 forAction:(unsigned char)arg2 ;
-(double)widthOfColumnAtIndex:(unsigned char)arg1 isDefault:(out BOOL*)arg2 ;
-(unsigned char)hidingActionForColumnAtIndex:(unsigned char)arg1 ;
-(BOOL)hideColumnAtIndex:(unsigned char)arg1 forAction:(unsigned char)arg2 ;
-(TSTTableFilterSet *)filterSet;
-(TSTStrokeSidecar *)strokeSidecar;
-(void)setStroke:(id)arg1 forTopOfRow:(unsigned short)arg2 order:(int)arg3 columnRange:(TSTSimpleRange)arg4 ;
-(void)setStroke:(id)arg1 forBottomOfRow:(unsigned short)arg2 order:(int)arg3 columnRange:(TSTSimpleRange)arg4 ;
-(void)setStroke:(id)arg1 forLeftOfColumn:(unsigned char)arg2 order:(int)arg3 rowRange:(TSTSimpleRange)arg4 ;
-(void)setStroke:(id)arg1 forRightOfColumn:(unsigned char)arg2 order:(int)arg3 rowRange:(TSTSimpleRange)arg4 ;
-(void)updateTableRowColumnStylesWithBlock:(/*^block*/id)arg1 ;
-(TSTConditionalStyleFormulaOwner *)conditionalStyleFormulaOwner;
-(id)indexesOfUserHiddenRowsInCellRange:(TSUCellRect)arg1 ;
-(BOOL)showRowAtIndex:(unsigned short)arg1 forAction:(unsigned char)arg2 ;
-(id)indexesOfHiddenColumnsInCellRange:(TSUCellRect)arg1 ;
-(BOOL)showColumnAtIndex:(unsigned char)arg1 forAction:(unsigned char)arg2 ;
-(id)cellStyleForCellWithEmptyStyleAtCellID:(TSUCellCoord)arg1 isDefault:(out BOOL*)arg2 ;
-(id)defaultCellStyleForCellID:(TSUCellCoord)arg1 ;
-(id)textStyleForCellWithEmptyStyleAtCellID:(TSUCellCoord)arg1 isDefault:(out BOOL*)arg2 ;
-(id)defaultTextStyleForCellID:(TSUCellCoord)arg1 ;
-(void)iterateCellsInRegion:(id)arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3 usingBlock:(/*^block*/id)arg4 ;
-(void)setPresetNeedsStrongOwnership:(BOOL)arg1 ;
-(BOOL)presetNeedsStrongOwnership;
-(TSCEOwnerUidMapper *)ownerUIDMapper;
-(void)filterSetUpdated;
-(void)setFilterSetType:(int)arg1 ;
-(void)dirtyFilterState;
-(TSUCellRect)actualHeaderColumnRange;
-(TSUCellRect)topCornerRange;
-(TSUCellRect)bottomCornerRange;
-(id)cellBorderAtCellID:(TSUCellCoord)arg1 ;
-(BOOL)cellExistsAtCellID:(TSUCellCoord)arg1 ;
-(BOOL)hasFormulaAtCellID:(TSUCellCoord)arg1 ;
-(int)setCell:(id)arg1 atCellID:(TSUCellCoord)arg2 ignoreFormula:(BOOL)arg3 clearImportWarnings:(BOOL)arg4 calculationEngine:(id)arg5 ;
-(int)setCellsWithCellMap:(id)arg1 ignoreFormulas:(BOOL)arg2 skipDirtyingNonFormulaCells:(BOOL)arg3 calculationEngine:(id)arg4 ;
-(BOOL)hasCommentAtCellID:(TSUCellCoord)arg1 ;
-(void)clearCommentHostingMapForCommentStorage:(id)arg1 ;
-(id)cellStyleOfRowAtIndex:(unsigned short)arg1 isDefault:(out BOOL*)arg2 ;
-(id)cellStyleOfColumnAtIndex:(unsigned char)arg1 isDefault:(out BOOL*)arg2 ;
-(id)textStyleOfRowAtIndex:(unsigned short)arg1 isDefault:(out BOOL*)arg2 ;
-(id)textStyleOfColumnAtIndex:(unsigned char)arg1 isDefault:(out BOOL*)arg2 ;
-(int)getValue:(out TSCEValue*)arg1 atCellID:(TSUCellCoord)arg2 fetchRichTextAttributesIfPlainText:(BOOL)arg3 ;
-(unsigned char)indexOfVisibleColumnBeforeColumnAtIndex:(unsigned char)arg1 ;
-(unsigned char)indexOfVisibleColumnAfterColumnAtIndex:(unsigned char)arg1 ;
-(unsigned short)indexOfVisibleRowBeforeRowAtIndex:(unsigned short)arg1 ;
-(unsigned short)indexOfVisibleRowAfterRowAtIndex:(unsigned short)arg1 ;
-(double)computeDefaultFontHeightForTableArea:(unsigned long long)arg1 ;
-(int)insertRowsInRange:(NSRange)arg1 uids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 metadata:(id)arg3 unsetFilterHidingAction:(BOOL)arg4 ;
-(BOOL)hasHiddenRowAtIndex:(unsigned short)arg1 forAction:(unsigned char)arg2 ;
-(BOOL)hasHiddenRowAtIndex:(unsigned short)arg1 ;
-(BOOL)hasHiddenColumnAtIndex:(unsigned char)arg1 ;
-(void)removeRowsAtIndex:(unsigned short)arg1 count:(unsigned short)arg2 ;
-(void)removeColumnsAtIndex:(unsigned char)arg1 count:(unsigned short)arg2 ;
-(void)swapRowAtIndex:(unsigned short)arg1 withRowAtIndex:(unsigned short)arg2 ;
-(unsigned short)numberOfHiddenRowsInCellRange:(TSUCellRect)arg1 ;
-(unsigned short)numberOfHiddenColumnsInCellRange:(TSUCellRect)arg1 ;
-(id)textStyleAtCellID:(TSUCellCoord)arg1 isDefault:(out BOOL*)arg2 ;
-(BOOL)hasMergeRangesIntersectingCellRegion:(id)arg1 ;
-(id)mergesIntersectingRange:(TSUCellRect)arg1 ;
-(id)mergesIntersectingCellRegion:(id)arg1 ;
-(id)expandCellRegionToCoverMergedCells:(id)arg1 ;
-(id)strokeLayerForLeftSideOfColumn:(unsigned char)arg1 ;
-(id)strokeLayerForRightSideOfColumn:(unsigned char)arg1 ;
-(id)strokeLayerForTopOfRow:(unsigned short)arg1 ;
-(id)strokeLayerForBottomOfRow:(unsigned short)arg1 ;
-(BOOL)textStyle:(id)arg1 isEqualToDefaultTextStyleForCellID:(TSUCellCoord)arg2 ;
-(TSTSortRuleReferenceTracker *)sortRuleReferenceTracker;
-(TSTHiddenStateFormulaOwner *)hiddenStateFormulaOwnerForRows;
-(TSTHiddenStateFormulaOwner *)hiddenStateFormulaOwnerForColumns;
-(int)updateCalculationEngineForFormula:(TSCEFormula*)arg1 inCellID:(TSUCellCoord)arg2 ;
-(id)rowIndexesForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)rowUIDs;
-(id)columnIndexesForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)columnUIDs;
-(id)mutableIndexesForUIDSet:(id)arg1 isRows:(BOOL)arg2 ;
-(BOOL)anyHiddenRowsInCellRange:(TSUCellRect)arg1 ;
-(BOOL)anyHiddenColumnsInCellRange:(TSUCellRect)arg1 ;
-(TSDStroke *)defaultHorizontalBorderStroke;
-(TSDStroke *)defaultHorizontalBorderStrokeEvenIfNotVisible;
-(TSDStroke *)defaultVerticalBorderStroke;
-(TSDStroke *)bodyRowStrokeEvenIfNotVisible;
-(TSTStructuredTextImportRecord *)textImportRecord;
-(void)setTextImportRecord:(TSTStructuredTextImportRecord *)arg1 ;
-(TSCEOwnerUidMapper *)identityOwnerUIDMapper;
-(int)tableWritingDirection;
-(void)resetSortRuleReferenceTrackerForInsert;
-(void)setFilterSet:(TSTTableFilterSet *)arg1 ;
-(id)duplicateFilterSet;
-(BOOL)needsFilterFormulaRewriteForImport;
-(void)setNeedsFilterFormulaRewriteForImport:(BOOL)arg1 ;
-(void)enableFilterSet:(BOOL)arg1 ;
-(BOOL)hasActiveFilters;
-(NSUUID *)nsTableUID;
-(void)setFromTableUID:(UUIDData<TSP::UUIDData>)arg1 ;
-(void)clearFromTableUID;
-(BOOL)wasCut;
-(void)setWasCut:(BOOL)arg1 ;
-(id)tableAreasForCellRange:(TSUCellRect)arg1 ;
-(int)getDefaultCell:(id)arg1 forTableArea:(unsigned long long)arg2 ;
-(int)getDefaultCell:(out id)arg1 forCellID:(TSUCellCoord)arg2 ;
-(unsigned long long)tableAreaForRow:(unsigned short)arg1 ;
-(unsigned long long)tableAreaForColumn:(unsigned char)arg1 ;
-(int)getCell:(id)arg1 atCellID:(TSUCellCoord)arg2 suppressCellBorder:(BOOL)arg3 ;
-(int)setCell:(id)arg1 atCellID:(TSUCellCoord)arg2 clearWarnings:(BOOL)arg3 ;
-(TSCEFormula*)formulaAtCellID:(TSUCellCoord)arg1 ;
-(id)formatAtCellID:(TSUCellCoord)arg1 formatIsImplicitOut:(BOOL*)arg2 ;
-(int)cellValueTypeAtCellID:(TSUCellCoord)arg1 ;
-(unsigned long long)numberOfComments;
-(int)setCellStyle:(id)arg1 ofRowAtIndex:(unsigned short)arg2 ;
-(int)setTextStyle:(id)arg1 ofRowAtIndex:(unsigned short)arg2 ;
-(int)setCellStyle:(id)arg1 ofColumnAtIndex:(unsigned char)arg2 ;
-(int)setTextStyle:(id)arg1 ofColumnAtIndex:(unsigned char)arg2 ;
-(BOOL)cellStyle:(id)arg1 isEqualToDefaultCellStyleForCellID:(TSUCellCoord)arg2 ;
-(int)setCellStyle:(id)arg1 atCellID:(TSUCellCoord)arg2 ;
-(int)setTextStyle:(id)arg1 atCellID:(TSUCellCoord)arg2 ;
-(id)cellStyleAtCellID:(TSUCellCoord)arg1 isDefault:(out BOOL*)arg2 ;
-(id)conditionalStyleSetAtCellID:(TSUCellCoord)arg1 ;
-(id)columnNameForCellID:(TSUCellCoord)arg1 cellRangeContainingName:(TSUCellRect*)arg2 restrictToBodyRange:(BOOL)arg3 ;
-(id)rowNameForCellID:(TSUCellCoord)arg1 cellRangeContainingName:(TSUCellRect*)arg2 restrictToBodyRange:(BOOL)arg3 ;
-(unsigned)numberOfPopulatedCells;
-(TSUCellCoord)cellIDLeftOfCellID:(TSUCellCoord)arg1 ;
-(TSUCellCoord)cellIDRightOfCellID:(TSUCellCoord)arg1 ;
-(TSUCellCoord)cellIDAboveCellID:(TSUCellCoord)arg1 ;
-(TSUCellCoord)cellIDBelowCellID:(TSUCellCoord)arg1 ;
-(void)computeDefaultRowHeight;
-(void)insertRowsAtIndex:(unsigned short)arg1 count:(unsigned short)arg2 addBefore:(BOOL)arg3 ;
-(int)insertRowsInRange:(NSRange)arg1 uids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 metadata:(id)arg3 ;
-(int)insertColumnsInRange:(NSRange)arg1 uids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 metadata:(id)arg3 ;
-(void)insertColumnsAtIndex:(unsigned char)arg1 count:(unsigned short)arg2 addBefore:(BOOL)arg3 ;
-(void)removeColumnsAtIndexes:(id)arg1 ;
-(void)moveRowRange:(NSRange)arg1 toRowIndex:(unsigned short)arg2 ;
-(void)moveColumnRange:(NSRange)arg1 toColumnIndex:(unsigned char)arg2 ;
-(unsigned short)numberOfUserHiddenRowsInCellRange:(TSUCellRect)arg1 ;
-(BOOL)hasHiddenColumnAtIndex:(unsigned char)arg1 forAction:(unsigned char)arg2 ;
-(id)indexesOfVisibleColumnsInColumnRange:(id)arg1 ;
-(id)indexesOfHiddenRowsInCellRange:(TSUCellRect)arg1 ;
-(id)indexesOfUserVisibleRowsInCellRange:(TSUCellRect)arg1 ;
-(id)indexesOfVisibleRowsInRowRange:(id)arg1 ;
-(BOOL)anyHiddenRowsInCellRange:(TSUCellRect)arg1 forAction:(unsigned char)arg2 ;
-(BOOL)isCellRangeHidden:(TSUCellRect)arg1 ;
-(id)stringAtCellID:(TSUCellCoord)arg1 optionalCell:(id)arg2 ;
-(id)fontColorAtCellID:(TSUCellCoord)arg1 optionalCell:(id)arg2 ;
-(BOOL)mergeCellRange:(TSUCellRect)arg1 ;
-(BOOL)unmergeCellRange:(TSUCellRect)arg1 ;
-(BOOL)mergeRangesPartiallyIntersectingCellRange:(TSUCellRect)arg1 ;
-(id)regionForValueOrCommentCellsInRange:(TSUCellRect)arg1 ;
-(id)mergeRangesForCellRange:(TSUCellRect)arg1 ;
-(id)allMergeRanges;
-(id)grabAllMergeRanges;
-(id)mergeRangesForCellRegion:(id)arg1 ;
-(id)fillForRow:(unsigned short)arg1 ;
-(id)fillForColumn:(unsigned char)arg1 ;
-(int)maxStrokeOrder;
-(void)setStroke:(id)arg1 forTopOfRow:(unsigned short)arg2 order:(int)arg3 ;
-(void)setStroke:(id)arg1 forBottomOfRow:(unsigned short)arg2 order:(int)arg3 ;
-(void)setStroke:(id)arg1 forLeftOfColumn:(unsigned char)arg2 order:(int)arg3 ;
-(void)setStroke:(id)arg1 forRightOfColumn:(unsigned char)arg2 order:(int)arg3 ;
-(void)getValue:(out TSCEValue*)arg1 fromIteratorData:(id)arg2 fetchRichTextAttributesIfPlainText:(BOOL)arg3 ;
-(void)setFormulaOwnerUIDsWithMap:(id)arg1 shouldStealReferences:(BOOL)arg2 ;
-(void)remapTableUIDsInFormulasWithMap:(const UUIDMap<TSP::UUIDMap>*)arg1 calcEngine:(id)arg2 bakeForBadRefs:(BOOL)arg3 ;
-(void)addPasteboardCustomFormatsToDocumentAndUpdateCells;
-(TSCERangeRef)referenceToHiddenStateFromRow:(unsigned short)arg1 toRow:(unsigned short)arg2 ;
-(TSCERangeRef)referenceToHiddenStateFromColumn:(unsigned char)arg1 toColumn:(unsigned char)arg2 ;
-(BOOL)hasFormulas;
-(BOOL)cellWasModifiedInCurrentRecalcCycle:(TSUCellCoord)arg1 ;
-(void)assertCollaborationConvergence;
-(TSUCellCoord)cellIDForCellContainingRichTextStorage:(id)arg1 ;
-(TSTCellUID)cellUIDforCellID:(const TSUCellCoord*)arg1 ;
-(id)prunedCellUIDListFromCellUIDList:(id)arg1 allowMergeFragment:(BOOL)arg2 addingPrunedIndicesToIndexSet:(id)arg3 ;
-(BOOL)writeCellIDsInCellUIDList:(id)arg1 toVector:(vector<TSUCellCoord, std::__1::allocator<TSUCellCoord> >*)arg2 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)prunedRowUIDsFromRowUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)prunedColumnUIDsFromColumnUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(TSUCellRect)cellRangeForUIDRange:(const TSTCellUIDRange*)arg1 ;
-(TSTCellUIDRange*)cellUIDRangeForCellRange:(TSUCellRect)arg1 ;
-(id)cellRegionForUIDRange:(const TSTCellUIDRange*)arg1 ;
-(Class)dataStoreIteratorClass;
-(TSTHiddenStateIndexSet *)hiddenRows;
-(TSTHiddenStateIndexSet *)userHiddenRows;
-(TSTHiddenStateIndexSet *)hiddenColumns;
-(TSCEOwnerFormulaMap *)formulasForUndo;
-(void)setFormulasForUndo:(TSCEOwnerFormulaMap *)arg1 ;
-(TSTImportWarningSetByCoordinateMap *)warningSetsForUndo;
-(void)setWarningSetsForUndo:(TSTImportWarningSetByCoordinateMap *)arg1 ;
-(TSCECellCoordinateVector *)cellsToInvalidateAfterRecalc;
-(TSCECellCoordinateVector *)cellsToInvalidateNonoverflowingAfterRecalc;
-(unsigned short)numberOfFilteredRows;
-(Class)tableModelClass;
-(void)p_initializeDefaultHeight:(double)arg1 andWidth:(double)arg2 ;
-(id)initWithContext:(id)arg1 geometry:(id)arg2 rows:(unsigned short)arg3 columns:(unsigned short)arg4 stylePreset:(id)arg5 styles:(id)arg6 ;
-(id)initWithContext:(id)arg1 fromSourceInfo:(id)arg2 cellRegion:(id)arg3 tableModel:(id)arg4 waitForCalcEngine:(BOOL)arg5 ;
-(void)releaseMasterLayout;
-(id)initWithContext:(id)arg1 fromSourceInfo:(id)arg2 cellRegion:(id)arg3 waitForCalcEngine:(BOOL)arg4 ;
-(void)p_setupTableModelforStockPrototype;
-(void)p_setupTableModelforStockSwatch;
-(void)setupTableModelForPrototypeIndex:(long long)arg1 forTableInsertOnly:(BOOL)arg2 ;
-(void)p_setFillOnCell:(id)arg1 positive:(BOOL)arg2 ;
-(void)p_setCell:(id)arg1 atColumn:(unsigned char)arg2 andRow:(unsigned short)arg3 ;
-(id)p_stockAttributesForDisplayArray;
-(id)p_popupItemsForStrings:(id)arg1 ;
-(void)p_setPopupMenuOnCell:(id)arg1 withItems:(id)arg2 andSelectedIndex:(double)arg3 ;
-(void)p_setFormulaWithSymbolString:(id)arg1 atCellID:(TSUCellCoord)arg2 ;
-(void)p_setFormulaWithSymbolCellCoord:(TSUCellCoord)arg1 andAttributeCellCoord:(TSUCellCoord)arg2 atCellID:(TSUCellCoord)arg3 ;
-(void)p_setFormula:(TSCEFormula*)arg1 atCellID:(TSUCellCoord)arg2 ;
-(id)p_positiveImageFill;
-(id)p_negativeImageFill;
-(id)p_masterLayoutCreateIfNeeded:(BOOL)arg1 ;
-(id)applyCellDiff:(id)arg1 atCellID:(TSUCellCoord)arg2 migrationMap:(id)arg3 inverseCellDiff:(id)arg4 defaultCellStyle:(id)arg5 defaultTextStyle:(id)arg6 ;
-(void)p_performCommentStorageDOLC:(id)arg1 ;
-(id)cellIteratorWithFlags:(unsigned long long)arg1 searchFlags:(unsigned long long)arg2 ;
-(void)p_bakeMixedCellStrokesIntoTable:(id)arg1 outgoingTable:(id)arg2 incomingTable:(id)arg3 fraction:(double)arg4 ;
-(BOOL)isEquivalentForCrossDocumentPasteMasterComparison:(id)arg1 styleComparisonBlock:(/*^block*/id)arg2 ;
-(void)chooseUniqueNameInContainer:(id)arg1 forPaste:(BOOL)arg2 ;
-(id)commentHostingAtCellID:(TSUCellCoord)arg1 ;
-(int)writingDirectionForCellwithTableDefault:(id)arg1 ;
-(void)chooseUniqueNameInContainer:(id)arg1 forPaste:(BOOL)arg2 needsNewName:(BOOL)arg3 avoidNames:(id)arg4 ;
-(int)parseNumberFromTableName:(id)arg1 ;
-(void)convertFormulasToUidForm:(id)arg1 atCellID:(TSUCellCoord)arg2 preserveHostCell:(BOOL)arg3 ;
-(void)convertFormulasToUidForm:(id)arg1 atCellID:(TSUCellCoord)arg2 ;
-(void)iterateCellsInRange:(TSUCellRect)arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3 usingBlock:(/*^block*/id)arg4 ;
-(void)setPartitioner:(TSTTablePartitioner *)arg1 ;
-(id)initWithContext:(id)arg1 geometry:(id)arg2 rows:(unsigned short)arg3 columns:(unsigned short)arg4 stylePreset:(id)arg5 ;
-(id)initWithContext:(id)arg1 geometry:(id)arg2 rows:(unsigned short)arg3 columns:(unsigned short)arg4 ;
-(id)additionalObjectsToCopy;
-(BOOL)isSafeToConvertToImageForImagePaste;
-(BOOL)supportsRichTextUndo;
-(id)applyCellDiff:(id)arg1 atCellID:(TSUCellCoord)arg2 migrationMap:(id)arg3 ;
-(id)geometryForRTLTableWithGeometry:(id)arg1 ;
-(void)prepareForPasteWithSourceOffset:(SCD_Struct_TS87)arg1 ;
-(int)setCommentStorage:(id)arg1 atCellID:(TSUCellCoord)arg2 ;
-(int)removeCommentStorageAtCellID:(TSUCellCoord)arg1 ;
-(void)postCommentNotificationForStorage:(id)arg1 atCellID:(TSUCellCoord)arg2 notificationKey:(id)arg3 ;
-(id)commentHostingAtCellID:(TSUCellCoord)arg1 forCommentStorage:(id)arg2 ;
-(void)bakeFormulas;
-(void)applyWritingDirection:(int)arg1 toCell:(id)arg2 cellID:(TSUCellCoord)arg3 ;
-(void)getTextPropertiesWithCell:(id)arg1 cellID:(TSUCellCoord)arg2 wraps:(BOOL*)arg3 alignment:(int*)arg4 verticalAlignment:(int*)arg5 padding:(id*)arg6 ;
-(void)notifyAboutStructuredTextImportState;
-(id)duplicateFilterSetInUidForm;
-(void)mutateFormulaFiltersUsingBlock:(/*^block*/id)arg1 ;
-(BOOL)hasFilterRulesInColumns:(id)arg1 ;
-(BOOL)canTranspose;
-(void)chooseUniqueNameInContainer:(id)arg1 forPaste:(BOOL)arg2 needsNewName:(BOOL)arg3 ;
-(id)cellMapForRegion:(id)arg1 uidBased:(BOOL)arg2 suppressMergeContent:(BOOL)arg3 ;
-(int)getCell:(id)arg1 atCellID:(TSUCellCoord)arg2 holdingReadLockWithAccessController:(id)arg3 ;
-(unsigned short)numberOfUserVisibleBodyRows;
-(id)strokeExporterReturningDefaultStrokes:(BOOL)arg1 ;
-(BOOL)findChartableRangesFromTableRange:(TSCERangeCoordinate)arg1 getBodyRange:(out TSCERangeCoordinate*)arg2 headerColumnRange:(out TSCERangeCoordinate*)arg3 headerRowRange:(out TSCERangeCoordinate*)arg4 ;
-(id)cellUIDListFromCellRegion:(id)arg1 ;
-(id)cellRegionFromCellUIDList:(id)arg1 ;
-(id)commandForSettingTableDirection:(int)arg1 icc:(id)arg2 ;
-(BOOL)migratingStylesOnly;
-(void)setMigratingStylesOnly:(BOOL)arg1 ;
-(id)cellIteratorWithRange:(TSUCellRect)arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3 ;
-(id)p_imageFillAtCellID:(TSUCellCoord)arg1 ;
-(id)p_propertyMapForReplacingImageFill:(id)arg1 atCellID:(TSUCellCoord)arg2 ;
-(id)compatibilityCheckerForData:(id)arg1 associatedHint:(id)arg2 ;
-(void)p_iterateCellsAndTerminateWithIterator:(id)arg1 usingBlock:(/*^block*/id)arg2 ;
-(id)cellIteratorWithRegion:(id)arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3 ;
-(id)cellIteratorWithRegion:(id)arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3 clampingRange:(TSUCellRect)arg4 ;
-(void)iterateCellsInRegion:(id)arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3 clampingRange:(TSUCellRect)arg4 usingBlock:(/*^block*/id)arg5 ;
-(void)p_gatherReorganizeValuesForColumn:(unsigned char)arg1 inRows:(id)arg2 outValues:(TSTCellReorganizeValue*)arg3 ;
-(id)mappingForSortWithRules:(id)arg1 inRows:(id)arg2 ;
-(void)rearrangeWithMapping:(id)arg1 ;
-(void)notifyTableOfNewResults;
-(BOOL)isRegisteredWithCalculationEngine:(id)arg1 ;
-(void)performReadForOneOffFormulaEvaluation:(id)arg1 forCellID:(TSUCellCoord*)arg2 ;
-(TSTTableSortOrder *)sortOrder;
-(void)setSortOrder:(TSTTableSortOrder *)arg1 ;
-(void)dealloc;
-(NSString *)description;
-(unsigned short)numberOfColumns;
-(id)objectForProperty:(int)arg1 ;
-(unsigned short)numberOfRows;
-(TSUCellRect)range;
-(void)setNumberOfRows:(unsigned short)arg1 ;
-(BOOL)isSelectable;
-(void)setGeometry:(TSDInfoGeometry *)arg1 ;
-(void)validate;
-(NSArray *)columnWidths;
-(void)setColumnWidths:(NSArray *)arg1 ;
-(id)allAnnotations;
-(void)removeRowsAtIndexes:(id)arg1 ;
-(void)setHeight:(double)arg1 ofRowAtIndex:(unsigned short)arg2 ;
-(void)setWidth:(double)arg1 ofColumnAtIndex:(unsigned char)arg2 ;
-(void)setTableModel:(TSTTableModel *)arg1 ;
-(id)componentRootObject;
-(id)copyWithContext:(id)arg1 ;
-(id)childEnumerator;
-(void)acceptVisitor:(id)arg1 ;
-(id)searchForAnnotationsWithHitBlock:(/*^block*/id)arg1 ;
-(id)childCommandForReplaceAllCommand:(id)arg1 ;
-(BOOL)containsProperty:(int)arg1 ;
-(float)floatValueForProperty:(int)arg1 ;
-(id)referencedStyles;
-(void)replaceReferencedStylesUsingBlock:(/*^block*/id)arg1 ;
-(id)presetKind;
-(Class)layoutClass;
-(Class)repClass;
-(NSArray *)childInfos;
-(BOOL)supportsAttachedComments;
-(Class)editorClass;
-(id)initWithContext:(id)arg1 geometry:(id)arg2 ;
-(TSTTablePartitioner *)partitioner;
-(BOOL)supportsHyperlinks;
-(void)willCopyWithOtherDrawables:(id)arg1 ;
-(void)didCopy;
-(void)adoptStylesheet:(id)arg1 withMapper:(id)arg2 ;
-(unsigned long long)chunkCountForTextureDeliveryStyle:(unsigned long long)arg1 animationFilter:(id)arg2 ;
-(unsigned long long)textureDeliveryStyleFromDeliveryString:(id)arg1 ;
-(id)textureDeliveryStylesLocalized:(BOOL)arg1 animationFilter:(id)arg2 ;
-(id)mixedObjectWithFraction:(double)arg1 ofObject:(id)arg2 ;
-(BOOL)canAspectRatioLockBeChangedByUser;
-(CGSize)targetSizeForImageData:(id)arg1 associatedHint:(id)arg2 ;
-(void)setInsertionCenterPosition:(CGPoint)arg1 ;
-(int)elementKind;
-(BOOL)textIsVertical;
-(BOOL)autoListRecognition;
-(BOOL)autoListTermination;
-(long long)contentWritingDirection;
-(void)setContentWritingDirection:(long long)arg1 ;
-(int)setCell:(id)arg1 atCellID:(TSUCellCoord)arg2 ;
-(id)cellAtCellID:(TSUCellCoord)arg1 ;
-(id)tableInfo;
-(NSArray *)rowHeights;
-(TSTTableModel *)tableModel;
-(TSTMasterLayout *)masterLayout;
-(unsigned short)numberOfHeaderRows;
-(unsigned short)numberOfHeaderColumns;
-(NSString *)tableName;
-(TSDStroke *)tableNameBorderStroke;
-(BOOL)useBandedFill;
-(unsigned long long)tableAreaForCellID:(TSUCellCoord)arg1 ;
-(id)bandedFillObject;
-(TSUCellRect)bodyRowRange;
-(id)allRichTextPayloadStorages;
-(void)setTableStyle:(TSTTableStyle *)arg1 ;
-(void)setTableNameStyle:(TSWPParagraphStyle *)arg1 ;
-(void)setTableNameShapeStyle:(TSWPShapeStyle *)arg1 ;
-(TSTTableStyle *)tableStyle;
-(TSTCellStyle *)bodyCellStyle;
-(TSTCellStyle *)headerColumnCellStyle;
-(TSTCellStyle *)footerRowCellStyle;
-(TSTCellStyle *)headerRowCellStyle;
-(TSWPParagraphStyle *)bodyTextStyle;
-(TSWPParagraphStyle *)headerColumnTextStyle;
-(TSWPParagraphStyle *)footerRowTextStyle;
-(TSWPParagraphStyle *)headerRowTextStyle;
-(TSWPParagraphStyle *)tableNameStyle;
-(TSWPShapeStyle *)tableNameShapeStyle;
-(void)setBodyCellStyle:(TSTCellStyle *)arg1 ;
-(void)setHeaderColumnCellStyle:(TSTCellStyle *)arg1 ;
-(void)setFooterRowCellStyle:(TSTCellStyle *)arg1 ;
-(void)setHeaderRowCellStyle:(TSTCellStyle *)arg1 ;
-(void)setBodyTextStyle:(TSWPParagraphStyle *)arg1 ;
-(void)setHeaderColumnTextStyle:(TSWPParagraphStyle *)arg1 ;
-(void)setFooterRowTextStyle:(TSWPParagraphStyle *)arg1 ;
-(void)setHeaderRowTextStyle:(TSWPParagraphStyle *)arg1 ;
-(void)resetStyles:(id)arg1 ;
-(void)setupDefaultCells;
-(BOOL)repeatingHeaderRowsEnabled;
-(BOOL)repeatingHeaderColumnsEnabled;
-(BOOL)headerRowsFrozen;
-(BOOL)headerColumnsFrozen;
-(unsigned short)numberOfFooterRows;
-(BOOL)tableNameEnabled;
-(void)setTableName:(NSString *)arg1 ;
-(BOOL)tableNameBorderEnabled;
-(void)setTableNameBorderEnabled:(BOOL)arg1 ;
-(double)tableNameHeight;
-(void)setTableNameHeight:(double)arg1 ;
-(BOOL)styleApplyClearsAll;
-(void)setStyleApplyClearsAll:(BOOL)arg1 ;
-(void)setDrawableIsBeingCopied:(BOOL)arg1 ;
-(id)defaultCellStyleForTableArea:(unsigned long long)arg1 ;
-(id)defaultTextStyleForTableArea:(unsigned long long)arg1 ;
-(TSUCellRect)headerRowRange;
-(TSUCellRect)footerRowRange;
-(TSUCellRect)headerColumnRange;
-(TSUCellRect)bodyColumnRange;
-(void)mapTableStylesToStylesheet:(id)arg1 withMapper:(id)arg2 ;
-(void)setTableNameEnabled:(BOOL)arg1 ;
-(void)setRepeatingHeaderRowsEnabled:(BOOL)arg1 ;
-(void)setRepeatingHeaderColumnsEnabled:(BOOL)arg1 ;
-(void)setNumberOfColumns:(unsigned short)arg1 ;
-(void)setNumberOfHeaderRows:(unsigned short)arg1 ;
-(void)setNumberOfFooterRows:(unsigned short)arg1 ;
-(void)setNumberOfHeaderColumns:(unsigned short)arg1 ;
-(void)setHeaderRowsFrozen:(BOOL)arg1 ;
-(void)setHeaderColumnsFrozen:(BOOL)arg1 ;
-(BOOL)hasTableBorder;
-(BOOL)hasAlternatingRows;
-(TSTCell *)defaultBodyCell;
-(TSTCell *)defaultFooterRowCell;
-(TSTCell *)defaultHeaderRowCell;
-(TSTCell *)defaultHeaderColumnCell;
-(TSUCellRect)cellRangeForTableArea:(unsigned long long)arg1 ;
-(void)setRowHeights:(NSArray *)arg1 ;
-(TSUCellRect)bodyRange;
-(unsigned short)numberOfVisibleBodyRows;
-(unsigned short)numberOfVisibleBodyColumns;
-(BOOL)hasMergeRanges;
-(id)mergedGridIndicesForDirection:(long long)arg1 ;
-(TSDFill *)backgroundFill;
-(TSDFill *)bodyFill;
-(TSDFill *)headerColumnsFill;
-(TSDFill *)headerRowsFill;
-(TSDFill *)footerRowsFill;
-(TSDStroke *)bodyColumnStroke;
-(TSDStroke *)bodyRowStroke;
-(TSDStroke *)headerColumnBorderStroke;
-(TSDStroke *)headerColumnBodyColumnStroke;
-(TSDStroke *)headerColumnBodyRowStroke;
-(TSDStroke *)headerColumnSeparatorStroke;
-(TSDStroke *)headerRowBorderStroke;
-(TSDStroke *)headerRowBodyColumnStroke;
-(TSDStroke *)headerRowBodyRowStroke;
-(TSDStroke *)headerRowSeparatorStroke;
-(TSDStroke *)footerRowBorderStroke;
-(TSDStroke *)footerRowBodyColumnStroke;
-(TSDStroke *)footerRowBodyRowStroke;
-(TSDStroke *)footerRowSeparatorStroke;
-(id)cellRegionWithConditionalStyleMatchingCell:(TSUCellCoord)arg1 ;
-(TSUCellRect)minPopulatedCellRange;
-(void)upgradeFromPreUFF;
-(unsigned short)numberOfHiddenRows;
-(unsigned short)numberOfHiddenColumns;
-(unsigned short)numberOfUserHiddenRows;
-(unsigned short)numberOfUserHiddenColumns;
-(BOOL)wasUnarchivedFromAProvidedTable;
-(void)setWasUnarchivedFromAProvidedTable:(BOOL)arg1 ;
-(TSTCellDictionary *)cellsPendingWrite;
-(unsigned)numberOfCells;
-(id)initWithContext:(id)arg1 geometry:(id)arg2 rows:(unsigned short)arg3 columns:(unsigned short)arg4 styles:(id)arg5 ;
-(id)initForTestingWithContext:(id)arg1 rows:(unsigned short)arg2 columns:(unsigned char)arg3 ;
-(id)initWithContext:(id)arg1 geometry:(id)arg2 styles:(id)arg3 ;
-(id)initWithContext:(id)arg1 otherTableInfo:(id)arg2 ;
-(void)shiftGeometryToIncludeTableNameHeight;
-(double)masterLayoutEffectiveTableNameHeight;
-(BOOL)isSafeToConvertToImage;
-(BOOL)isSafeToConvertToAttributedString;
-(BOOL)isSafeToConvertToText;
-(void)clearPartitioner;
-(void)scaleInfoGeometry:(CGSize)arg1 ;
-(id)mergedContainedStorages;
-(void)setHasReference:(BOOL)arg1 ;
-(void)didReplaceTextsInStoragesWithPlaceHolderString;
-(BOOL)hasReference;
-(void)setMasterLayout:(TSTMasterLayout *)arg1 ;
-(void)willClose;
-(double)defaultColumnWidth;
-(double)defaultRowHeight;
-(void)setDefaultColumnWidth:(double)arg1 ;
-(void)setDefaultRowHeight:(double)arg1 ;
-(id)sheetName;
@end

