/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:30:04 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <iWorkImport/TSPObject.h>

@interface TSTColumnRowUIDMap : TSPObject {

	vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >* mSortedColumnUIDs;
	vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >* mSortedRowUIDs;
	vector<unsigned char, std::__1::allocator<unsigned char> > mColumnUIDIndexForIndex;
	vector<unsigned short, std::__1::allocator<unsigned short> >* mRowUIDIndexForIndex;
	vector<unsigned char, std::__1::allocator<unsigned char> > mColumnIndexForUIDIndex;
	vector<unsigned short, std::__1::allocator<unsigned short> >* mRowIndexForUIDIndex;

}
-(id)mutableRowIndexesForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(id)mutableColumnIndexesForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(id)UIDSetForIndexes:(id)arg1 isRows:(BOOL)arg2 ;
-(id)mutableIndexesForUIDSet:(id)arg1 isRows:(BOOL)arg2 notFoundUIDs:(id)arg3 ;
-(void)saveToArchiver:(id)arg1 ;
-(void)loadFromUnarchiver:(id)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)rowUIDsForRowIndexes:(id)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)columnUIDsForColumnIndexes:(id)arg1 ;
-(void)insertNewRowsInIndexRange:(NSRange)arg1 ;
-(void)insertRowsAtIndexes:(id)arg1 withUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 ;
-(void)insertColumnsAtIndexes:(id)arg1 withUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 ;
-(void)insertNewColumnsInIndexRange:(NSRange)arg1 ;
-(void)removeRowsInIndexSet:(id)arg1 ;
-(void)removeColumnsInIndexSet:(id)arg1 ;
-(void)moveRowIndexRange:(NSRange)arg1 toIndex:(unsigned short)arg2 ;
-(void)moveColumnIndexRange:(NSRange)arg1 toIndex:(unsigned char)arg2 ;
-(void)swapRowAtIndex:(unsigned short)arg1 withRowAtIndex:(unsigned short)arg2 ;
-(UUIDData<TSP::UUIDData>)columnUIDForIndex:(unsigned char)arg1 ;
-(UUIDData<TSP::UUIDData>)rowUIDForIndex:(unsigned short)arg1 ;
-(unsigned char)columnIndexForUID:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(unsigned short)rowIndexForUID:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(id)rowIndexesForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)rowUIDs;
-(id)columnIndexesForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)columnUIDs;
-(id)mutableIndexesForUIDSet:(id)arg1 isRows:(BOOL)arg2 ;
-(NSRange)columnRangeForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(NSRange)rowRangeForUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg1 ;
-(void)assertCollaborationConvergence;
-(id)initWithContext:(id)arg1 columnUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 rowUIDs:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg3 ;
-(void)_removeRowByIndex:(unsigned short)arg1 ;
-(void)_removeColumnByIndex:(unsigned char)arg1 ;
-(void)_insertColumnAtIndex:(unsigned char)arg1 withUID:(const UUIDData<TSP::UUIDData>*)arg2 ;
-(void)_insertRowAtIndex:(unsigned short)arg1 withUID:(const UUIDData<TSP::UUIDData>*)arg2 ;
-(unsigned long long)columnUIDsCount;
-(unsigned long long)rowUIDsCount;
-(id)copyWithContext:(id)arg1 ;
-(id)initWithTableModel:(id)arg1 ;
@end

