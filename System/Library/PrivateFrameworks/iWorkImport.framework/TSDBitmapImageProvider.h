/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:29:59 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <iWorkImport/TSDImageProvider.h>

@protocol OS_dispatch_queue, OS_dispatch_semaphore;
@class NSMutableDictionary, NSObject, TSUOnce;

@interface TSDBitmapImageProvider : TSDImageProvider {

	CGImageSourceRef mImageSource;
	CGImageRef mImage;
	NSMutableDictionary* mResampledImages;
	unsigned long long mImageGamut;
	CGSize mNaturalSize;
	long long mOrientation;
	BOOL mIsOpaque;
	BOOL mIsValid;
	unsigned long long mValidationStatus;
	unsigned long long mDPI;
	NSObject*<OS_dispatch_queue> mImageQueue;
	TSUOnce* mCheckIfValidOnce;
	NSObject*<OS_dispatch_semaphore> mFlushableContentLock;
	BOOL mHasFlushableContent;
	unsigned long long mEstimatedSize;

}

@property (nonatomic,readonly) long long orientation; 
@property (nonatomic,readonly) BOOL isOpaque; 
@property (nonatomic,readonly) unsigned long long imageDPI; 
@property (nonatomic,readonly) unsigned long long validationStatus; 
@property (nonatomic,readonly) CGImageSourceRef CGImageSource; 
@property (nonatomic,readonly) CGSize dpiAdjustedFillSize; 
+(id)p_cacheDirectoryForData:(id)arg1 ;
+(void)initialize;
+(CGImageRef)CGImageForImageData:(id)arg1 ;
+(id)p_cacheStringForData:(id)arg1 ;
+(CGImageSourceRef)p_newImageSourceFromFilePath:(id)arg1 ;
+(id)TSUImageForImageData:(id)arg1 ;
+(CGSize)naturalSizeForImageData:(id)arg1 ;
+(void)clearCacheForData:(id)arg1 ;
+(CGImageSourceRef)p_newImageSourceFromCacheForData:(id)arg1 withFilenameSuffix:(id)arg2 ;
-(BOOL)i_hasFlushableContent;
-(unsigned long long)i_flushableMemoryEstimate;
-(CGImageRef)CGImageResampledToSize:(CGSize)arg1 lowQuality:(BOOL)arg2 ;
-(long long)p_reciprocalScaleForImageSize:(CGSize)arg1 ;
-(CGImageRef)p_resampledImageOfReciprocalScale:(unsigned long long)arg1 ;
-(id)p_cacheSuffixForScale:(unsigned long long)arg1 ;
-(CGImageRef)p_loadOrCreateResampledImageWithReciprocalScale:(unsigned long long)arg1 ;
-(void)p_updateEstimatedSize;
-(BOOL)p_shouldScaleRetinaScreenshots;
-(void)dealloc;
-(BOOL)isValid;
-(void)flush;
-(long long)orientation;
-(BOOL)isOpaque;
-(CGSize)naturalSize;
-(CGImageRef)CGImageForSize:(CGSize)arg1 inContext:(CGContextRef)arg2 orLayer:(id)arg3 ;
-(void)drawImageInContext:(CGContextRef)arg1 rect:(CGRect)arg2 ;
-(CGImageRef)CGImageForNaturalSize;
-(CGSize)dpiAdjustedNaturalSize;
-(CGSize)dpiAdjustedFillSize;
-(unsigned long long)imageGamut;
-(CGImageSourceRef)CGImageSource;
-(void)i_commonInit;
-(void)p_loadImageMetadata;
-(void)p_loadSourceRefIfNecessary;
-(CGImageRef)p_newImageFromSource:(CGImageSourceRef)arg1 ;
-(void)p_loadFullSizedImageIfNecessary;
-(CGImageSourceRef)p_newCGImageSourceForTemporaryUse;
-(unsigned long long)imageDPI;
-(CGImageSourceRef)p_newCGImageSource;
-(void)p_configureOrientationAndSizeFromImageSource:(CGImageSourceRef)arg1 andImage:(CGImageRef)arg2 ;
-(CGImageSourceRef)p_newImageOfSize:(CGSize)arg1 andWriteToCacheWithSuffix:(id)arg2 ;
-(unsigned long long)validationStatus;
@end

