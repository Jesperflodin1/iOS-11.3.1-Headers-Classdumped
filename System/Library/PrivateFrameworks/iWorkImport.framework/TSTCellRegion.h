/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:30:06 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <libobjc.A.dylib/NSCopying.h>

@class NSIndexSet;

@interface TSTCellRegion : NSObject <NSCopying> {

	vector<TSUCellRect, std::__1::allocator<TSUCellRect> >* _cellRanges;
	TSUCellCoord _firstCellID;
	TSUCellCoord _lastCellID;
	TSUCellRect _boundingCellRange;
	unsigned long long _cellCount;
	NSIndexSet* _intersectingColumnsIndexSet;
	NSIndexSet* _intersectingRowsIndexSet;

}

@property (assign,nonatomic) TSUCellRect boundingCellRange;                             //@synthesize boundingCellRange=_boundingCellRange - In the implementation block
@property (assign,nonatomic) unsigned long long cellCount;                              //@synthesize cellCount=_cellCount - In the implementation block
@property (nonatomic,retain) NSIndexSet * intersectingColumnsIndexSet;                  //@synthesize intersectingColumnsIndexSet=_intersectingColumnsIndexSet - In the implementation block
@property (nonatomic,retain) NSIndexSet * intersectingRowsIndexSet;                     //@synthesize intersectingRowsIndexSet=_intersectingRowsIndexSet - In the implementation block
@property (assign,nonatomic) TSUCellCoord firstCellID;                                  //@synthesize firstCellID=_firstCellID - In the implementation block
@property (assign,nonatomic) TSUCellCoord lastCellID;                                   //@synthesize lastCellID=_lastCellID - In the implementation block
@property (nonatomic,readonly) const vector<TSUCellRect* cellRanges;                    //@synthesize cellRanges=_cellRanges - In the implementation block
@property (nonatomic,readonly) BOOL isEmpty; 
@property (nonatomic,readonly) BOOL isRectangle; 
@property (nonatomic,readonly) TSUCellCoord boundingTopLeftCellID; 
@property (nonatomic,readonly) TSUCellCoord boundingBottomRightCellID; 
@property (nonatomic,readonly) unsigned short numberOfIntersectingColumns; 
@property (nonatomic,readonly) unsigned short numberOfIntersectingRows; 
+(id)regionFromRowIndices:(id)arg1 columnRange:(NSRange)arg2 ;
+(id)regionFromColumnIndices:(id)arg1 rowRange:(NSRange)arg2 ;
+(id)regionFromColumnIndexes:(id)arg1 rowIndexes:(id)arg2 ;
+(id)regionFromCellIDVector:(const vector<TSUCellCoord, std::__1::allocator<TSUCellCoord> >*)arg1 ;
+(id)regionFromMergeList:(const vector<TSUCellRect, std::__1::allocator<TSUCellRect> >*)arg1 ;
+(id)regionFromCellRangeVector:(const vector<TSUCellRect, std::__1::allocator<TSUCellRect> >*)arg1 ;
+(id)regionFromMergeMap:(id)arg1 ;
+(id)regionFromCellMap:(id)arg1 withTableInfo:(id)arg2 passingTest:(/*^block*/id)arg3 ;
+(id)region:(id)arg1 intersectingRegion:(id)arg2 ;
+(id)regionFromCellMap:(id)arg1 withTableInfo:(id)arg2 ;
+(id)regionFromCellDiffMap:(id)arg1 withTableInfo:(id)arg2 ;
+(id)regionFromMergeActionArray:(id)arg1 withTableInfo:(id)arg2 ;
+(id)regionFromPropertyListRepresentation:(id)arg1 ;
+(id)regionFromRange:(TSUCellRect)arg1 ;
+(id)invalidRegion;
+(id)region:(id)arg1 addingRange:(TSUCellRect)arg2 ;
+(id)region:(id)arg1 subtractingRange:(TSUCellRect)arg2 ;
+(id)region:(id)arg1 intersectingRange:(TSUCellRect)arg2 ;
+(id)unionEveryRangeInRegion:(id)arg1 withRange:(TSUCellRect)arg2 ;
+(id)region:(id)arg1 addingRegion:(id)arg2 ;
+(id)region:(id)arg1 subtractingRegion:(id)arg2 ;
+(id)regionFillingColumnsFromRegion:(id)arg1 ;
+(id)regionFillingRowsFromRegion:(id)arg1 ;
+(id)regionFromRowIndices:(id)arg1 ;
+(id)regionFromColumnIndices:(id)arg1 ;
-(id)initFromMessage:(const CellRegion*)arg1 ;
-(void)saveToMessage:(CellRegion*)arg1 ;
-(TSUCellCoord)firstCellID;
-(TSUCellCoord)lastCellID;
-(id)regionByTrimmingAroundRowIndices:(id)arg1 ;
-(id)regionByTrimmingAroundColumnIndices:(id)arg1 ;
-(TSUCellCoord)boundingTopLeftCellID;
-(NSObject*)newRightToLeftIterator;
-(NSObject*)newIterator;
-(void)enumerateMissingRowsIntersectingCellRange:(TSUCellRect)arg1 usingBlock:(/*^block*/id)arg2 ;
-(void)enumerateRowsIntersectingCellRange:(TSUCellRect)arg1 usingBlock:(/*^block*/id)arg2 ;
-(void)enumerateMissingColumnsIntersectingCellRange:(TSUCellRect)arg1 usingBlock:(/*^block*/id)arg2 ;
-(void)enumerateColumnsIntersectingCellRange:(TSUCellRect)arg1 usingBlock:(/*^block*/id)arg2 ;
-(id)intersectingColumnsInRow:(unsigned short)arg1 ;
-(const vector<TSUCellRect*)cellRanges;
-(id)regionByIntersectingRegion:(id)arg1 ;
-(id)regionByMovingColumnsFromRange:(NSRange)arg1 toIndex:(unsigned char)arg2 ;
-(id)regionByMovingRowsFromRange:(NSRange)arg1 toIndex:(unsigned short)arg2 ;
-(void)enumerateRowRangesInReverseUsingBlock:(/*^block*/id)arg1 ;
-(void)enumerateColumnRangesInReverseUsingBlock:(/*^block*/id)arg1 ;
-(id)p_copy;
-(void)p_calculateUpperLeftAndBottomRightCellIDAndBoundingCellRange;
-(id)regionUpToColumnIndex:(unsigned char)arg1 ;
-(id)regionUpToColumnIndexRtoL:(unsigned char)arg1 maxColumnIndex:(unsigned char)arg2 ;
-(id)regionAfterColumnIndex:(unsigned char)arg1 ;
-(id)regionAfterColumnIndexRtoL:(unsigned char)arg1 ;
-(id)regionUpToRowIndex:(unsigned short)arg1 ;
-(id)regionAfterRowIndex:(unsigned short)arg1 ;
-(TSUCellCoord)boundingBottomRightCellID;
-(TSUCellRect)largestRangeContainingCellID:(TSUCellCoord)arg1 ;
-(void)enumerateColumnsInReverseUsingBlock:(/*^block*/id)arg1 ;
-(void)enumerateRowsInReverseUsingBlock:(/*^block*/id)arg1 ;
-(void)enumerateGridColumnsUsingBlock:(/*^block*/id)arg1 ;
-(void)enumerateGridRowsUsingBlock:(/*^block*/id)arg1 ;
-(void)setBoundingCellRange:(TSUCellRect)arg1 ;
-(void)setCellCount:(unsigned long long)arg1 ;
-(void)setFirstCellID:(TSUCellCoord)arg1 ;
-(void)setLastCellID:(TSUCellCoord)arg1 ;
-(void)setIntersectingColumnsIndexSet:(NSIndexSet *)arg1 ;
-(void)setIntersectingRowsIndexSet:(NSIndexSet *)arg1 ;
-(id)init;
-(id)description;
-(BOOL)isValid;
-(id)copyWithZone:(NSZone*)arg1 ;
-(BOOL)isEmpty;
-(id)propertyListRepresentation;
-(unsigned long long)cellCount;
-(TSUCellRect)boundingCellRange;
-(unsigned short)numberOfIntersectingRows;
-(void)enumerateRowsUsingBlock:(/*^block*/id)arg1 ;
-(unsigned short)numberOfIntersectingColumns;
-(void)enumerateColumnsUsingBlock:(/*^block*/id)arg1 ;
-(id)regionOffsetBy:(SCD_Struct_TS87)arg1 ;
-(TSUCellCoord)suitableAnchor;
-(TSUCellCoord)suitableCursor;
-(BOOL)equalsCellRange:(TSUCellRect)arg1 ;
-(BOOL)containsCellID:(TSUCellCoord)arg1 ;
-(id)regionByAddingRange:(TSUCellRect)arg1 ;
-(id)regionBySubtractingRange:(TSUCellRect)arg1 ;
-(BOOL)equalsCellRegion:(id)arg1 ;
-(BOOL)containsCellRegion:(id)arg1 ;
-(BOOL)intersectsCellRange:(TSUCellRect)arg1 ;
-(BOOL)containsCellRange:(TSUCellRect)arg1 ;
-(void)p_insertRangeIntoRegion:(TSUCellRect)arg1 ;
-(void)p_calculateAncillaryInformation;
-(void)enumerateCellRangesUsingBlock:(/*^block*/id)arg1 ;
-(id)regionByIntersectingRange:(TSUCellRect)arg1 ;
-(void)p_calculateIntersectingColumns;
-(void)p_calculateIntersectingRows;
-(id)regionByUnioningEveryRangeInRegionWithRange:(TSUCellRect)arg1 ;
-(id)regionByAddingRegion:(id)arg1 ;
-(id)regionBySubtractingRegion:(id)arg1 ;
-(id)regionByRemovingRows:(id)arg1 ;
-(id)regionByRemovingColumns:(id)arg1 ;
-(id)regionByIntersectingRowIndices:(id)arg1 ;
-(id)regionByIntersectingColumnIndices:(id)arg1 ;
-(id)regionByAddingRows:(id)arg1 ;
-(id)regionByAddingColumns:(id)arg1 ;
-(id)regionByApplyingRowMapping:(id)arg1 ;
-(BOOL)isRectangle;
-(BOOL)partiallyIntersectsCellRange:(TSUCellRect)arg1 ;
-(BOOL)intersectsColumn:(unsigned char)arg1 ;
-(BOOL)intersectsRow:(unsigned short)arg1 ;
-(NSIndexSet *)intersectingColumnsIndexSet;
-(NSIndexSet *)intersectingRowsIndexSet;
-(void)enumerateCellIDsUsingBlock:(/*^block*/id)arg1 ;
-(void)enumerateInDirection:(long long)arg1 usingBlock:(/*^block*/id)arg2 ;
-(void)enumerateRowRangesUsingBlock:(/*^block*/id)arg1 ;
-(void)enumerateColumnRangesUsingBlock:(/*^block*/id)arg1 ;
-(void)fillCellRangeRowMajorSet:(set<TSUCellRect, TSTCellRangeRowMajorLess, std::__1::allocator<TSUCellRect> >*)arg1 leftToRight:(BOOL)arg2 ;
@end

