/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:29:44 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <iWorkImport/iWorkImport-Structs.h>
@class TSCETableTransposedInfo, TSCEFormulaRewriteInfo_RowColumnInfo, TSCEFormulaRewrite_RegionMovedInfo, TSCEFormulaRewrite_RegionMergedInfo, TSCEFormulaRewrite_MergeOriginMovedInfo, TSCERewriteTableIDInfo;

@interface TSCEFormulaRewriteSpec : NSObject {

	int _type;
	UUIDData<TSP::UUIDData> _tableUID;
	UUIDData<TSP::UUIDData> _conditionalStyleOwnerUID;
	BOOL _isInverse;
	TSCETableTransposedInfo* _transposedInfo;
	TSCEFormulaRewriteInfo_RowColumnInfo* _rowColumnInfo;
	TSCEFormulaRewrite_RegionMovedInfo* _regionMovedInfo;
	TSCEFormulaRewrite_RegionMergedInfo* _mergeInfo;
	TSCEFormulaRewrite_MergeOriginMovedInfo* _mergeOriginMovedInfo;
	TSCERewriteTableIDInfo* _tableIDInfo;

}

@property (nonatomic,readonly) int rewriteType;                                                                    //@synthesize type=_type - In the implementation block
@property (nonatomic,readonly) UUIDData<TSP::UUIDData> tableUID;                                                   //@synthesize tableUID=_tableUID - In the implementation block
@property (nonatomic,readonly) UUIDData<TSP::UUIDData> conditionalStyleOwnerUID;                                   //@synthesize conditionalStyleOwnerUID=_conditionalStyleOwnerUID - In the implementation block
@property (assign,nonatomic) UUIDData<TSP::UUIDData> insertAtUid; 
@property (assign,nonatomic) BOOL isInverse;                                                                       //@synthesize isInverse=_isInverse - In the implementation block
@property (nonatomic,retain,readonly) TSCETableTransposedInfo * transposedInfo;                                    //@synthesize transposedInfo=_transposedInfo - In the implementation block
@property (nonatomic,retain,readonly) TSCEFormulaRewriteInfo_RowColumnInfo * rowColumnInfo;                        //@synthesize rowColumnInfo=_rowColumnInfo - In the implementation block
@property (nonatomic,retain,readonly) TSCEFormulaRewrite_RegionMovedInfo * regionMovedInfo;                        //@synthesize regionMovedInfo=_regionMovedInfo - In the implementation block
@property (nonatomic,retain,readonly) TSCEFormulaRewrite_RegionMergedInfo * mergeInfo;                             //@synthesize mergeInfo=_mergeInfo - In the implementation block
@property (nonatomic,retain,readonly) TSCEFormulaRewrite_MergeOriginMovedInfo * mergeOriginMovedInfo;              //@synthesize mergeOriginMovedInfo=_mergeOriginMovedInfo - In the implementation block
@property (nonatomic,retain,readonly) TSCERewriteTableIDInfo * tableIDInfo;                                        //@synthesize tableIDInfo=_tableIDInfo - In the implementation block
-(UUIDData<TSP::UUIDData>)tableUID;
-(UUIDData<TSP::UUIDData>)conditionalStyleOwnerUID;
-(id)initFromMessage:(const FormulaRewriteSpecArchive*)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)expandedRowColumnUuids;
-(UUIDData<TSP::UUIDData>)insertAtUid;
-(void)setInsertAtUid:(UUIDData<TSP::UUIDData>)arg1 ;
-(id)initWithOwnerDeletion:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(id)initWithOwnerInsertion:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(id)initWithTransposeTable:(const UUIDData<TSP::UUIDData>*)arg1 transposedBodyRange:(TSCERangeCoordinate)arg2 numberOfFooterRows:(unsigned short)arg3 ;
-(id)initForRemoveRowsOrColumnsFromTable:(const UUIDData<TSP::UUIDData>*)arg1 rowColumnUuids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 areRows:(BOOL)arg3 ;
-(id)initForInsertingRowsOrColumnsIntoTable:(const UUIDData<TSP::UUIDData>*)arg1 rowColumnUuids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 areRows:(BOOL)arg3 ;
-(id)initForMovingRowsOrColumnsInTable:(const UUIDData<TSP::UUIDData>*)arg1 rowColumnUuids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 areRows:(BOOL)arg3 ;
-(id)initForSortWithTableUID:(const UUIDData<TSP::UUIDData>*)arg1 rowUids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 ;
-(id)initForMovingRegionWithSrcTableUID:(const UUIDData<TSP::UUIDData>*)arg1 srcColumnUids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 srcRowUids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg3 dstTableUID:(const UUIDData<TSP::UUIDData>*)arg4 dstColumnUids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg5 dstRowUids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg6 ;
-(id)initForMergeCellsWithTableUID:(const UUIDData<TSP::UUIDData>*)arg1 columnUids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 rowUids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg3 mergeSource:(TSUCellCoord)arg4 ;
-(id)initForUndoMergeCellsWithTableUID:(const UUIDData<TSP::UUIDData>*)arg1 columnUids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 rowUids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg3 mergeSource:(TSUCellCoord)arg4 ;
-(id)initForMergeOriginsMovedWithMap:(const unordered_map<TSUCellCoord, TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<std::__1::pair<const TSUCellCoord, TSUCellCoord> > >*)arg1 reverseMap:(const unordered_map<TSUCellCoord, TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<std::__1::pair<const TSUCellCoord, TSUCellCoord> > >*)arg2 inTableUID:(const UUIDData<TSP::UUIDData>*)arg3 ;
-(id)initForTableIDReassignment:(const UUIDMap<TSP::UUIDMap>*)arg1 ;
-(id)miniDescription;
-(UUIDData<TSP::UUIDData>)affectedOwnerUID;
-(unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)affectedOwnerUIDs;
-(UUIDData<TSP::UUIDData>)affectedConditionalStyleOwnerUID;
-(TSUCellCoord)updatedCellCoordinateForTableUID:(const UUIDData<TSP::UUIDData>*)arg1 originalCellCoordinate:(TSUCellCoord)arg2 ;
-(TSUCellCoord)previousCellCoordinateForTableUID:(const UUIDData<TSP::UUIDData>*)arg1 updatedCellCoordinate:(TSUCellCoord)arg2 ;
-(UUIDData<TSP::UUIDData>)updatedTableUIDForOriginalTableUID:(const UUIDData<TSP::UUIDData>*)arg1 originalCellCoordinate:(TSUCellCoord)arg2 ;
-(UUIDData<TSP::UUIDData>)previousTableUIDForUpdatedTableUID:(const UUIDData<TSP::UUIDData>*)arg1 updatedCellCoordinate:(TSUCellCoord)arg2 ;
-(void)willModifyTable:(id)arg1 ;
-(void)willModifySrcTable:(id)arg1 dstTable:(id)arg2 ;
-(void)didModifySrcTable:(id)arg1 dstTable:(id)arg2 ;
-(void)didModifyTable:(id)arg1 ;
-(void)clearTableIndexes;
-(void)saveToMessage:(FormulaRewriteSpecArchive*)arg1 archiver:(id)arg2 ;
-(TSCETableTransposedInfo *)transposedInfo;
-(TSCEFormulaRewriteInfo_RowColumnInfo *)rowColumnInfo;
-(TSCEFormulaRewrite_RegionMovedInfo *)regionMovedInfo;
-(TSCEFormulaRewrite_RegionMergedInfo *)mergeInfo;
-(TSCEFormulaRewrite_MergeOriginMovedInfo *)mergeOriginMovedInfo;
-(TSCERewriteTableIDInfo *)tableIDInfo;
-(int)rewriteType;
-(BOOL)isInverse;
-(void)setIsInverse:(BOOL)arg1 ;
-(void)dealloc;
-(id)description;
-(TSCERangeCoordinate)affectedRange;
@end

