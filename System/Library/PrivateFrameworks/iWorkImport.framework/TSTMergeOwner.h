/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:30:04 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <iWorkImport/TSCEFormulaOwning.h>

@class TSTTableModel, TSCECalculationEngine, TSTFormulaStore, TSTMergeRangeCache, NSString;

@interface TSTMergeOwner : NSObject <TSCEFormulaOwning> {

	TSTTableModel* _tableModel;
	TSCECalculationEngine* _calculationEngine;
	UUIDData<TSP::UUIDData> _ownerUID;
	TSTFormulaStore* _mergeRangeStorage;
	A@ _mergeRangeCache;
	unordered_map<TSUCellCoord, TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<std::__1::pair<const TSUCellCoord, TSUCellCoord> > >* _mergeOriginsMap;
	unordered_map<TSUCellCoord, TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<std::__1::pair<const TSUCellCoord, TSUCellCoord> > >* _reverseOriginsMap;

}

@property (nonatomic,readonly) TSTMergeRangeCache * mergeRangeCache; 
@property (nonatomic,readonly) TSTFormulaStore * formulaStore;                    //@synthesize mergeRangeStorage=_mergeRangeStorage - In the implementation block
@property (assign,nonatomic) UUIDData<TSP::UUIDData> ownerUID; 
@property (nonatomic,readonly) TSTTableModel * tableModel;                        //@synthesize tableModel=_tableModel - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(UUIDData<TSP::UUIDData>)ownerUID;
-(int)registerWithCalculationEngine:(id)arg1 ;
-(SCD_Struct_TS153)recalculateForCalculationEngine:(id)arg1 formulaID:(SCD_Struct_TS128)arg2 isInCycle:(BOOL)arg3 hasCalculatedPrecedents:(BOOL)arg4 ;
-(void)unregisterFromCalculationEngine;
-(void)writeResultsForCalculationEngine:(id)arg1 ;
-(void)invalidateForCalculationEngine:(id)arg1 ;
-(void)rewriteForCalculationEngine:(id)arg1 formulaID:(SCD_Struct_TS128)arg2 rewriteSpec:(id)arg3 ;
-(void)beginRewriteForCalculationEngine:(id)arg1 spec:(id)arg2 ;
-(void)saveToArchive:(MergeOwnerArchive*)arg1 archiver:(id)arg2 ;
-(TSUCellRect)expandCellRangeToCoverMergedCells:(TSUCellRect)arg1 ;
-(TSUCellCoord)mergeOriginForCellID:(TSUCellCoord)arg1 ;
-(vector<TSUCellRect, std::__1::allocator<TSUCellRect> >*)mergeRangesIntersectingRange:(TSUCellRect)arg1 ;
-(vector<TSUCellRect, std::__1::allocator<TSUCellRect> >*)mergeRangesIntersectingCellRegion:(id)arg1 ;
-(id)initWithArchive:(const MergeOwnerArchive*)arg1 unarchiver:(id)arg2 forTableModel:(id)arg3 ;
-(void)resetMergeCache;
-(void)rewriteMergesForInsertedRange:(NSRange)arg1 uids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 isRows:(BOOL)arg3 ;
-(void)rewriteMergesForRemovedRange:(NSRange)arg1 uids:(const vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)arg2 isRows:(BOOL)arg3 ;
-(BOOL)insertMergeRangeRemovingOverlaps:(TSUCellRect)arg1 ;
-(void)removeMergeRange:(TSUCellRect)arg1 ;
-(BOOL)hasMergeRangesIntersectingCellRegion:(id)arg1 ;
-(id)mergesIntersectingRange:(TSUCellRect)arg1 ;
-(id)mergesIntersectingCellRegion:(id)arg1 ;
-(id)expandCellRegionToCoverMergedCells:(id)arg1 ;
-(void)setOwnerUID:(UUIDData<TSP::UUIDData>)arg1 ;
-(void)remapTableUIDsInFormulasWithMap:(const UUIDMap<TSP::UUIDMap>*)arg1 calcEngine:(id)arg2 ;
-(void)enumerateMergeFormulasUsingBlock:(/*^block*/id)arg1 ;
-(void)assertCollaborationConvergence;
-(id)mergeActionForRegion:(id)arg1 ;
-(unsigned long long)markForRollback;
-(void)rollbackToMark:(unsigned long long)arg1 ;
-(id)initWithTableModel:(id)arg1 ownerUID:(const UUIDData<TSP::UUIDData>*)arg2 ;
-(void)loadMergeCache;
-(id)mergeIndexesForRange:(TSUCellRect)arg1 ;
-(void)p_updateOriginMapWithSourceCellID:(TSUCellCoord)arg1 destCellID:(TSUCellCoord)arg2 ;
-(TSUCellRect)rangeFromMergeFormula:(const TSCEFormula*)arg1 atCoord:(const TSUCellCoord*)arg2 ;
-(void)p_moveCellFromCellID:(TSUCellCoord)arg1 toCellID:(TSUCellCoord)arg2 ;
-(TSCEFormula*)p_createFormulaForRange:(TSUCellRect)arg1 atIndex:(unsigned long long)arg2 tableUID:(const UUIDData<TSP::UUIDData>*)arg3 ;
-(id)mergeActionForRegion:(id)arg1 nonOriginPartialsOnly:(BOOL)arg2 ;
-(id)mergeIndexesForCellRegion:(id)arg1 ;
-(TSTFormulaStore *)formulaStore;
-(BOOL)isValidMergeRange:(TSUCellRect)arg1 ;
-(void)createMergeRangeStorage;
-(BOOL)insertMergeRange:(TSUCellRect)arg1 ;
-(void)reloadMergeCacheForIndexes:(id)arg1 ;
-(void)p_dirtyCellsForMerge:(const TSUCellRect*)arg1 ;
-(id)p_shrinkReturningInverseForAction:(id)arg1 ;
-(id)p_growReturningInverseForAction:(id)arg1 ;
-(id)p_shrinkMergesAtIndexes:(id)arg1 intersectedByRegion:(id)arg2 ;
-(id)shrinkReturningInverseForRegion:(id)arg1 ;
-(id)regionFromUIDMergeFormula:(const TSCEFormula*)arg1 ;
-(TSUCellRect)p_growRangeFrom:(TSUCellRect)arg1 toDesired:(TSUCellRect)arg2 ;
-(BOOL)hasRangeSpanningRowsForCellRange:(TSUCellRect)arg1 ;
-(void)openRewritingTransaction;
-(void)commitRewritingTransaction;
-(void)upgradeFromMergeRegionMap;
-(TSTMergeRangeCache *)mergeRangeCache;
-(id)allMergesAsString;
-(void)resetMergeOriginMap;
-(id)performActionReturningInverse:(id)arg1 ;
-(id)removeReturningInverseForRegion:(id)arg1 ;
-(BOOL)p_hasAnyMergesIntersectingRange:(TSUCellRect)arg1 ;
-(void)enumerateMergesUsingBlock:(/*^block*/id)arg1 ;
-(void)enumerateMergesIntersectingRange:(TSUCellRect)arg1 usingBlock:(/*^block*/id)arg2 ;
-(void)enumerateMergesIntersectingCellRegion:(id)arg1 usingBlock:(/*^block*/id)arg2 ;
-(void)insertAll:(id)arg1 ;
-(vector<TSUCellRect, std::__1::allocator<TSUCellRect> >*)mergeRangesAndCrumbsIntersectingRange:(TSUCellRect)arg1 ;
-(id)regionForMergeRangesIntersectingRegion:(id)arg1 ;
-(TSUCellRect)rewroteFormula:(TSCEFormula*)arg1 atCoordinate:(TSUCellCoord*)arg2 withRewriteSpec:(id)arg3 isUndo:(BOOL)arg4 ;
-(unsigned long long)count;
-(void)dealloc;
-(NSString *)description;
-(TSTTableModel *)tableModel;
-(TSUCellRect)mergedRangeForCellID:(TSUCellCoord)arg1 ;
-(id)initWithTableModel:(id)arg1 ;
-(BOOL)partiallyIntersectsCellRange:(TSUCellRect)arg1 ;
-(id)mergedGridIndicesForDimension:(long long)arg1 ;
-(vector<TSUCellRect, std::__1::allocator<TSUCellRect> >*)mergeRanges;
-(BOOL)find:(TSUCellRect)arg1 ;
-(BOOL)partiallyIntersectsCellRegion:(id)arg1 ;
@end

