/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:29:44 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <iWorkImport/TSPObject.h>

@protocol OS_dispatch_group, OS_dispatch_queue, OS_dispatch_semaphore, TSKMultiTableRemapping;
@class NSObject, NSMutableSet, NSMutableDictionary, NSDate, NSTimeZone, NSMutableArray, TSKChangeGroup, TSKAccessController, TSKChangeNotifier, TSCERemoteDataStore, NSString, TSCETableInfosByName, TSCETransaction, TSCENamedReferenceManager, TSCEUUidReferenceMap, TSCERewriteTableIDInfo;

@interface TSCECalculationEngine : TSPObject {

	TSCEDependencyTracker* _dependencyTracker;
	int _recalculationThreadState;
	opaque_pthread_mutex_t _recalculationThreadStateMutex;
	BOOL _shouldCancelRecalculation;
	int _calculationPauseCount;
	NSObject*<OS_dispatch_group> _recalcLoopGroup;
	BOOL _blockingUntilRecalcIsComplete;
	double _recalcTime;
	NSObject*<OS_dispatch_group> _recalcDispatchGroup;
	Ai _recalcDispatchGroupSize;
	NSObject*<OS_dispatch_queue> _recalcHighPriorityQueue;
	NSObject*<OS_dispatch_queue> _recalcLowPriorityQueue;
	NSObject*<OS_dispatch_semaphore> _modifiedOwnersSem;
	unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >* _modifiedOwnersInThisRecalcCycle;
	BOOL _shouldRefillRecalcQueue;
	NSMutableSet* _retainReferenceResolvers;
	unordered_map<TSU::UUIDData<TSP::UUIDData>, id<TSCEReferenceResolving>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, id<TSCEReferenceResolving> > > >* _referenceResolversByUid;
	NSMutableDictionary* _legacyGlobalIDStringToOwnerUIDMap;
	unsigned long long _batchingGroupCellDirtyingLevel;
	BOOL _dirtyRandomVolatileFunctionsAtEndOfDirtyBatching;
	unsigned long long _documentRandomSeed;
	NSDate* _currentDate;
	NSTimeZone* _currentTimeZone;
	NSMutableArray* _calculationStateObservers;
	unsigned long long _suppressWillModifyCallsLevel;
	unsigned long long _numberOfFormulas;
	TSKChangeGroup* _pendingChangesForAsyncNotification;
	NSObject*<OS_dispatch_queue> _writeMutualExclusionQueue;
	BOOL _dirtyAllFormulasInDocumentDidLoad;
	UUIDData<TSP::UUIDData> _transposingTableUID;
	BOOL _duringRollback;
	BOOL _calculationWillShutDown;
	BOOL _sentSetNowCommand;
	int _XLImportDateMode;
	TSKAccessController* _accessController;
	TSKChangeNotifier* _changeNotifier;
	TSCERemoteDataStore* _remoteDataStore;
	NSString* _previousLocaleIdentifier;
	unsigned long long _loadFromFileVersion;
	TSCETableInfosByName* _tableInfosByName;
	TSCETransaction* _currentTransaction;
	TSCENamedReferenceManager* _namedReferenceManager;
	TSCEUUidReferenceMap* _uuidReferenceMap;
	TSCERewriteTableIDInfo* _tableIDHistory;
	id<TSKMultiTableRemapping> _currentTableIdRemapper;

}

@property (assign,nonatomic,__weak) TSKAccessController * accessController;                    //@synthesize accessController=_accessController - In the implementation block
@property (assign,nonatomic,__weak) TSKChangeNotifier * changeNotifier;                        //@synthesize changeNotifier=_changeNotifier - In the implementation block
@property (retain) NSDate * currentDate; 
@property (retain) NSTimeZone * currentTimeZone; 
@property (assign) int XLImportDateMode;                                                       //@synthesize XLImportDateMode=_XLImportDateMode - In the implementation block
@property (readonly) NSString * previousLocaleIdentifier;                                      //@synthesize previousLocaleIdentifier=_previousLocaleIdentifier - In the implementation block
@property (assign,nonatomic) unsigned long long loadFromFileVersion;                           //@synthesize loadFromFileVersion=_loadFromFileVersion - In the implementation block
@property (readonly) TSCETableInfosByName * tableInfosByName;                                  //@synthesize tableInfosByName=_tableInfosByName - In the implementation block
@property (readonly) TSCETransaction * currentTransaction;                                     //@synthesize currentTransaction=_currentTransaction - In the implementation block
@property (nonatomic,readonly) BOOL shouldSendSetNowCommand; 
@property (readonly) BOOL shouldAbortRecalculation; 
@property (readonly) TSCERemoteDataStore * remoteDataStore;                                    //@synthesize remoteDataStore=_remoteDataStore - In the implementation block
@property (assign) UUIDData<TSP::UUIDData> transposingTableUID;                                //@synthesize transposingTableUID=_transposingTableUID - In the implementation block
@property (nonatomic,readonly) TSCENamedReferenceManager * namedReferenceManager;              //@synthesize namedReferenceManager=_namedReferenceManager - In the implementation block
@property (assign) unsigned long long documentRandomSeed; 
@property (readonly) TSCEUUidReferenceMap * uuidReferenceMap;                                  //@synthesize uuidReferenceMap=_uuidReferenceMap - In the implementation block
@property (readonly) TSCERewriteTableIDInfo * tableIDHistory;                                  //@synthesize tableIDHistory=_tableIDHistory - In the implementation block
@property (retain) id<TSKMultiTableRemapping> currentTableIdRemapper;                          //@synthesize currentTableIdRemapper=_currentTableIdRemapper - In the implementation block
@property (assign,nonatomic) BOOL duringRollback;                                              //@synthesize duringRollback=_duringRollback - In the implementation block
+(Class)resolverClass;
+(unsigned long long)generateRandomSeed;
+(BOOL)localVariablesEnabled;
+(unsigned long long)randomSeedFromRandomLo:(int)arg1 hi:(int)arg2 ;
+(void)splitRandomSeed:(unsigned long long)arg1 intoLo:(int*)arg2 hi:(int*)arg3 ;
+(void)terminate;
+(BOOL)isTerminating;
-(BOOL)rangeIsWithinTable:(const TSCERangeRef*)arg1 ;
-(id)documentLocale;
-(BOOL)ownerIsRegistered:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(id)resolverForTableUID:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(BOOL)cellIsInACycle:(const TSCECellRef*)arg1 ;
-(TSCERewriteTableIDInfo *)tableIDHistory;
-(BOOL)duringRollback;
-(int)XLImportDateMode;
-(id)stringForRangeReference:(const TSCERangeRef*)arg1 hostTableUID:(const UUIDData<TSP::UUIDData>*)arg2 stickyBits:(unsigned char)arg3 suppressIdenticalEndReference:(BOOL)arg4 ;
-(NSTimeZone *)currentTimeZone;
-(BOOL)parseComponentsOfReference:(id)arg1 gettingSheetName:(id*)arg2 gettingTableName:(id*)arg3 gettingRest:(id*)arg4 ;
-(TSCERangeRef)parseStringAsReference:(id)arg1 withParsingContext:(id)arg2 ;
-(TSCENamedReferenceManager *)namedReferenceManager;
-(int)forwardRegisterOwnerWithOwnerUID:(const UUIDData<TSP::UUIDData>*)arg1 legacyGlobalID:(id)arg2 ;
-(UUIDData<TSP::UUIDData>)ownerUIDForLegacyGlobalID:(id)arg1 registeringIfNeeded:(BOOL)arg2 ;
-(UUIDData<TSP::UUIDData>)uuidForTableUID:(const UUIDData<TSP::UUIDData>*)arg1 andIndex:(unsigned short)arg2 direction:(BOOL)arg3 ;
-(void)replaceRemoteDataKeysInterestedIn:(id)arg1 forCell:(const TSCECellRef*)arg2 ;
-(TSCERemoteDataStore *)remoteDataStore;
-(void)markIndirectCallsAsDirty;
-(void)saveToArchiver:(id)arg1 ;
-(void)loadFromUnarchiver:(id)arg1 ;
-(id)stringForRangeReference:(const TSCERangeRef*)arg1 contextSheetName:(id)arg2 stickyBits:(unsigned char)arg3 suppressIdenticalEndReference:(BOOL)arg4 ;
-(id)escapedStringForRangeReference:(const TSCERangeRef*)arg1 hostTableUID:(const UUIDData<TSP::UUIDData>*)arg2 stickyBits:(unsigned char)arg3 suppressIdenticalEndReference:(BOOL)arg4 forceEscaping:(BOOL)arg5 ;
-(id)escapedStringForRangeReference:(const TSCERangeRef*)arg1 contextSheetName:(id)arg2 stickyBits:(unsigned char)arg3 suppressIdenticalEndReference:(BOOL)arg4 forceEscaping:(BOOL)arg5 ;
-(BOOL)isInCollaborationMode;
-(void)initializeDispatchObjects;
-(void)setCurrentTimeZone:(NSTimeZone *)arg1 ;
-(void)pauseRecalculation;
-(void)p_addApplicationNotification;
-(void)p_removeApplicationNotification;
-(int)preferredDispatchQueueSize;
-(void)notifyObserversOfRecalcProgress;
-(void)p_enqueueTaskForCell:(TSCEInternalCellReference)arg1 ;
-(void)p_recalcOneCellHoldingReadLock:(TSCEInternalCellReference)arg1 formulaOwner:(id)arg2 hasExistingCalculatedPrecedents:(BOOL)arg3 isInACycle:(BOOL)arg4 ;
-(TSCEInternalCellReference)p_refillRecalcQueue;
-(unsigned long long)dirtyCellCount;
-(BOOL)allCellsAreClean;
-(BOOL)recalcHoldingReadLock;
-(void)recalcHoldingWriteLock;
-(void)invalidateAfterRecalc;
-(void)resumeRecalculation;
-(id)legacyGlobalIDStringToOwnerUIDMap;
-(void)beginSuppressingWillModifyCalls;
-(void)endSuppressingWillModifyCalls;
-(void)replaceFormula:(SCD_Struct_TS128)arg1 inOwner:(const UUIDData<TSP::UUIDData>*)arg2 precedentIterator:(/*function pointer*/void*)arg3 userData:(void*)arg4 ;
-(void)replaceFormula:(SCD_Struct_TS128)arg1 inOwner:(const UUIDData<TSP::UUIDData>*)arg2 precedentIterator:(/*function pointer*/void*)arg3 userData:(void*)arg4 clearCycle:(BOOL)arg5 ;
-(void)replaceFormula:(SCD_Struct_TS128)arg1 inOwner:(const UUIDData<TSP::UUIDData>*)arg2 precedentIterator:(/*function pointer*/void*)arg3 userData:(void*)arg4 calculatedRemoteDataInterest:(id)arg5 clearCycle:(BOOL)arg6 ;
-(void)markRandomVolatileFunctionsAsDirty;
-(void)markCellRefAsDirty:(const TSCECellRef*)arg1 ;
-(BOOL)isCellReferenceDirty:(const TSCECellRef*)arg1 ;
-(void)headerStateOfTableChanged:(const UUIDData<TSP::UUIDData>*)arg1 changeIsForColumns:(BOOL)arg2 ;
-(void)markRangeRefAsDirty:(const TSCERangeRef*)arg1 ;
-(void)markTimeVolatileFunctionsAsDirty;
-(BOOL)recalculationIsPaused;
-(void)p_blockUntilRecalcTaskExitedWithTimeout:(double)arg1 ;
-(void)pauseRecalculationSometimeSoon;
-(void)p_blockUntilRecalcIsCompleteOnNewThreadWithTimeout:(id)arg1 ;
-(void)startRecalcTaskIfNecessary;
-(void)p_startRecalculationTask;
-(double)recalcTimeInSecs;
-(UUIDData<TSP::UUIDData>)transposingTableUID;
-(id)p_stringForRangeReference:(const TSCERangeRef*)arg1 hostTableUID:(const UUIDData<TSP::UUIDData>*)arg2 contextSheetName:(id)arg3 stickyBits:(unsigned char)arg4 suppressIdenticalEndReference:(BOOL)arg5 quoteComponents:(BOOL)arg6 forceEscaping:(BOOL)arg7 ;
-(TSUCellCoord)parseStringAsGeometricReferenceComponent:(id)arg1 inResolver:(id)arg2 outStickyBits:(char*)arg3 gettingReferencesMatchingInputAsPrefix:(id*)arg4 ;
-(TSCERangeRef)parseStringAsReferenceComponentIntersection:(id)arg1 inResolver:(id)arg2 inTableNamed:(id)arg3 preferredGeometricResolver:(id)arg4 withParsingContext:(id)arg5 ;
-(id)parseWithParsingContext:(id)arg1 ;
-(void)markOwnerAsDirty:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(unsigned long long)documentRandomSeed;
-(void)setDocumentRandomSeed:(unsigned long long)arg1 ;
-(BOOL)shouldAbortRecalculation;
-(void)wroteCells:(const vector<TSUCellCoord, std::__1::allocator<TSUCellCoord> >*)arg1 inOwnerUID:(const UUIDData<TSP::UUIDData>*)arg2 ;
-(void)recalculateWithTimeout:(double)arg1 ;
-(void)dirtyCellsForUpgrade;
-(int)registerOwnerWithOwnerUID:(const UUIDData<TSP::UUIDData>*)arg1 owner:(id)arg2 referenceResolver:(id)arg3 ownerKind:(int)arg4 ;
-(int)ownerKindForTableUID:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(void)unregisterOwner:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(BOOL)allOwnersRegistered;
-(id)ownerForOwnerUID:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >*)allOwnerUIDs;
-(void)enumerateFormulaOwnersUsingBlock:(/*^block*/id)arg1 ;
-(void)clearLegacyGlobalIDs;
-(id)resolverForCellRef:(id)arg1 ;
-(id)anyResolver;
-(void)setOwnerUIDForLegacyGlobalID:(id)arg1 ownerUID:(const UUIDData<TSP::UUIDData>*)arg2 ;
-(void)closeTransaction:(id)arg1 ;
-(void)addFormula:(SCD_Struct_TS128)arg1 inOwner:(const UUIDData<TSP::UUIDData>*)arg2 precedentIterator:(/*function pointer*/void*)arg3 userData:(void*)arg4 ;
-(void)removeFormula:(SCD_Struct_TS128)arg1 inOwner:(const UUIDData<TSP::UUIDData>*)arg2 ;
-(void)removeAllFormulasFromOwner:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(void)removeFormulasFromRange:(TSCERangeRef)arg1 ;
-(void)setError:(id)arg1 forCell:(const TSCECellRef*)arg2 ;
-(void)clearErrorForCell:(const TSCECellRef*)arg1 ;
-(TSCECellRef)rootCauseForErrorInCell:(const TSCECellRef*)arg1 atRootCell:(BOOL*)arg2 ;
-(void)foreachFormulaInOwner:(const UUIDData<TSP::UUIDData>*)arg1 block:(/*^block*/id)arg2 ;
-(vector<TSUCellCoord, std::__1::allocator<TSUCellCoord> >*)formulaCoordsReferringToRange:(const TSCERangeRef*)arg1 fromOwner:(const UUIDData<TSP::UUIDData>*)arg2 ;
-(vector<TSUCellCoord, std::__1::allocator<TSUCellCoord> >*)formulaCoordsInRange:(const TSCERangeCoordinate*)arg1 inOwner:(const UUIDData<TSP::UUIDData>*)arg2 ;
-(unordered_set<TSCECellRef, std::__1::hash<TSCECellRef>, std::__1::equal_to<TSCECellRef>, std::__1::allocator<TSCECellRef> >*)formulaCellsUsingVolatiles:(unsigned long long)arg1 ;
-(unsigned long long)dirtyCellCountInOwner:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(BOOL)referenceWasGuaranteedCleanAtRecalcCycleStart:(TSCECReference)arg1 ;
-(BOOL)clearCellIsDirtyAfterRecalc:(const TSCECellRef*)arg1 ;
-(id)extendTableIDHistoryWithRewrite:(id)arg1 ;
-(void)rollbackTableIDHistoryWithRewriteInfo:(id)arg1 ;
-(void)headerStateOfTableChanged:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(void)updateDirtyPrecedentCountsForRemovedIndex:(int)arg1 inTable:(const UUIDData<TSP::UUIDData>*)arg2 forColumns:(BOOL)arg3 ;
-(void)dirtyCellsForRemovalOfColumns:(NSRange)arg1 fromTable:(const UUIDData<TSP::UUIDData>*)arg2 tableRange:(TSCERangeCoordinate)arg3 ;
-(void)dirtyCellsForRemovalOfRows:(NSRange)arg1 fromTable:(const UUIDData<TSP::UUIDData>*)arg2 tableRange:(TSCERangeCoordinate)arg3 ;
-(void)dirtyCellsForInsertionOfColumns:(NSRange)arg1 forTable:(const UUIDData<TSP::UUIDData>*)arg2 tableRange:(TSCERangeCoordinate)arg3 headerRange:(TSCERangeCoordinate)arg4 ;
-(void)dirtyCellsForInsertionOfRows:(NSRange)arg1 forTable:(const UUIDData<TSP::UUIDData>*)arg2 tableRange:(TSCERangeCoordinate)arg3 headerRange:(TSCERangeCoordinate)arg4 ;
-(void)dirtyCellsForMergingRange:(TSCERangeCoordinate)arg1 forTable:(const UUIDData<TSP::UUIDData>*)arg2 headerRowRange:(TSCERangeCoordinate)arg3 headerColumnRange:(TSCERangeCoordinate)arg4 ;
-(void)markAllFunctionsAsDirty;
-(void)markOnlyDependentsDirty:(const TSCECellRef*)arg1 ;
-(void)detectAndRepairConsistencyViolations;
-(void)markTimeVolatileFunctionsAsDirtyForCurrentDateTime;
-(BOOL)shouldSendSetNowCommand;
-(void)markLocaleVolatileFunctionsAsDirty;
-(void)markLocationVolatileFunctionsAsDirty;
-(void)markCompassVolatileFunctionsAsDirty;
-(void)markGeometryVolatileFunctionsAsDirtyInOwner:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(void)markRemoteDataVolatileFunctionsAsDirty;
-(BOOL)cellContainsAFormula:(const TSCECellRef*)arg1 ;
-(void)blockUntilRecalcIsCompleteWithTimeout:(double)arg1 ;
-(void)startRecalculation;
-(void)pauseRecalculationForBlock:(/*^block*/id)arg1 ;
-(void)executeBlockWhileCalculationEngineIsNotWriting:(/*^block*/id)arg1 ;
-(void)beginBatchingGroupCellDirtying;
-(void)endBatchingGroupCellDirtying;
-(BOOL)hasRunRecalculationALongTime;
-(void)clearRecalculationTimer;
-(unordered_set<TSCECellRef, std::__1::hash<TSCECellRef>, std::__1::equal_to<TSCECellRef>, std::__1::allocator<TSCECellRef> >*)corruptCellRefs;
-(void)resetCorruptCellRefs:(const unordered_set<TSCECellRef, std::__1::hash<TSCECellRef>, std::__1::equal_to<TSCECellRef>, std::__1::allocator<TSCECellRef> >*)arg1 ;
-(void)markRemoteDataVolatileFunctionsAsDirtyForKeys:(id)arg1 ;
-(BOOL)referenceIsValid:(const TSCERangeRef*)arg1 ;
-(id)stringForRangeReference:(id)arg1 nsHostTableUID:(id)arg2 stickyBits:(unsigned char)arg3 suppressIdenticalEndReference:(BOOL)arg4 ;
-(TSCEReferenceSet*)precedentsOfCell:(TSCECellRef)arg1 ;
-(TSCEReferenceSet*)emptyReferenceSet;
-(void)addCalculationStateObserver:(id)arg1 ;
-(void)removeCalculationStateObserver:(id)arg1 ;
-(unsigned long long)numberOfCellsWithFormulas;
-(unsigned long long)numFormulaCellsInOwner:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(BOOL)hasMaxNumFormulas;
-(void)assertDirtyPrecedentsCountConsistency;
-(void)assertAllDirtyCellsAreOnLeafStack;
-(id)allFormulaOwnersAsString;
-(id)allCellDependenciesAsString;
-(id)allSpanningDependenciesAsString;
-(id)allWholeOwnerDependenciesAsString;
-(unordered_set<TSUCellCoord, TSCECellCoordinateHash, TSCECellCoordinateEqual, std::__1::allocator<TSUCellCoord> >*)cellCoordinatesNeedingExcelImportForTable:(const UUIDData<TSP::UUIDData>*)arg1 ;
-(void)setAccessController:(TSKAccessController *)arg1 ;
-(void)setXLImportDateMode:(int)arg1 ;
-(NSString *)previousLocaleIdentifier;
-(unsigned long long)loadFromFileVersion;
-(void)setLoadFromFileVersion:(unsigned long long)arg1 ;
-(TSCETableInfosByName *)tableInfosByName;
-(void)setTransposingTableUID:(UUIDData<TSP::UUIDData>)arg1 ;
-(TSCEUUidReferenceMap *)uuidReferenceMap;
-(id<TSKMultiTableRemapping>)currentTableIdRemapper;
-(void)setCurrentTableIdRemapper:(id<TSKMultiTableRemapping>)arg1 ;
-(void)setDuringRollback:(BOOL)arg1 ;
-(id)init;
-(void)dealloc;
-(void)applicationDidBecomeActive:(id)arg1 ;
-(void)applicationWillResignActive:(id)arg1 ;
-(id)initWithContext:(id)arg1 ;
-(TSCETransaction *)currentTransaction;
-(id)openTransaction;
-(void)setCurrentDate:(NSDate *)arg1 ;
-(NSDate *)currentDate;
-(id)packageLocator;
-(BOOL)shouldDelayArchiving;
-(unsigned)delayedArchivingPriority;
-(void)documentDidLoad;
-(TSKAccessController *)accessController;
-(TSKChangeNotifier *)changeNotifier;
-(id)documentRoot;
-(void)setChangeNotifier:(TSKChangeNotifier *)arg1 ;
-(void)willClose;
@end

