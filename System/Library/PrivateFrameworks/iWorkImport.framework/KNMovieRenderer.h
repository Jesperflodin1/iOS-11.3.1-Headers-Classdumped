/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:30:12 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <iWorkImport/KNBuildRenderer.h>
#import <iWorkImport/TSKMediaPlayerControllerDelegate.h>
#import <iWorkImport/KNAmbientBuildRenderer.h>

@protocol TSKLayerMediaPlayerController;
@class KNBuildRenderer, NSObject, CALayer, TSUWeakReference, NSString;

@interface KNMovieRenderer : KNBuildRenderer <TSKMediaPlayerControllerDelegate, KNAmbientBuildRenderer> {

	NSObject*<TSKLayerMediaPlayerController> _playerController;
	CALayer* _videoLayer;
	double _startTime;
	double _playbackAtStartTimePauseTime;
	double _playbackAtStartTimePauseOffset;
	TSUWeakReference* _buildInRendererReference;
	CGRect _frameInContainerView;
	id _movieStartCallbackTarget;
	SEL _movieStartCallbackSelector;
	unsigned _hasMoviePlaybackStarted : 1;
	unsigned _needsToSendMovieStartCallback : 1;
	unsigned _needsToSendBuildEndCallback : 1;
	unsigned _isObservingVideoLayerReadyForDisplay : 1;
	unsigned _needsPlaybackAtStartTime : 1;
	unsigned _hasPendingTogglePlayingControl : 1;
	unsigned _pendingTogglePlayingControlStartsPlaying : 1;
	unsigned _shouldMoviePlaybackEndOnCompletion : 1;
	unsigned _wasMoviePlayingBeforeAnimationPause : 1;
	unsigned _isTeardownCompletionBlockPending : 1;

}

@property (nonatomic,readonly) NSObject*<TSKMediaPlayerController> playerController;              //@synthesize playerController=_playerController - In the implementation block
@property (nonatomic,readonly) CALayer * offscreenVideoLayer; 
@property (nonatomic,readonly) NSObject*<NSCopying> movieTimelineMovieIdentifier; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (assign,nonatomic,__weak) KNBuildRenderer * buildInRenderer; 
@property (nonatomic,readonly) BOOL hasAmbientBuildStarted; 
@property (nonatomic,readonly) BOOL shouldActionBuildsStopAnimations; 
+(id)movieTimelineMovieIdentifierForMovieInfo:(id)arg1 ;
+(id)movieInfoForMovieTimelineMovieIdentifier:(id)arg1 ;
-(id)initWithAnimatedBuild:(id)arg1 info:(id)arg2 buildStage:(id)arg3 session:(id)arg4 animatedSlideView:(id)arg5 ;
-(void)setBuildInRenderer:(KNBuildRenderer *)arg1 ;
-(void)removeAnimationsAndFinish:(BOOL)arg1 ;
-(void)updateAnimationsForLayerTime:(double)arg1 ;
-(void)forceRemoveAnimations;
-(void)pauseAnimationsAtTime:(double)arg1 ;
-(void)resumeAnimationsIfPausedAtTime:(double)arg1 ;
-(BOOL)addAnimationsAtLayerTime:(double)arg1 ;
-(void)animateAfterDelay:(double)arg1 ;
-(void)resumeAnimationsIfPaused;
-(KNBuildRenderer *)buildInRenderer;
-(void)p_setupPlayerController;
-(void)p_schedulePlaybackAtStartTime;
-(void)p_setupVideoLayer;
-(void)p_startMoviePlaybackIfNeeded;
-(void)p_teardownUpdatingTexture:(BOOL)arg1 ;
-(void)p_unschedulePlaybackAtStartTime;
-(void)p_didStartMoviePlayback;
-(void)p_startPlaybackAtStartTime;
-(void)p_setupReflectionAndMaskingOnMovieTexture:(id)arg1 strokeTexture:(id)arg2 reflectionMaskTexture:(id)arg3 frameMaskTexture:(id)arg4 ;
-(void)p_cancelPlaybackAtStartTime;
-(void)p_didEndMoviePlayback;
-(CGImageRef)p_copyCurrentVideoFrameImage;
-(CGImageRef)p_copyCurrentVideoFrameImageUsingAVAssetImageGenerator;
-(void)p_showVideoLayer;
-(void)registerForAmbientBuildStartCallback:(SEL)arg1 target:(id)arg2 ;
-(void)interruptAndReset;
-(BOOL)hasAmbientBuildStarted;
-(BOOL)shouldActionBuildsStopAnimations;
-(void)applyMovieControl:(long long)arg1 ;
-(void)p_applyActionEffect:(id)arg1 ;
-(CALayer *)offscreenVideoLayer;
-(NSObject*<NSCopying>)movieTimelineMovieIdentifier;
-(void)dealloc;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(void)stopAnimations;
-(void)pauseAnimations;
-(void)playbackDidStopForPlayerController:(id)arg1 ;
-(void)playerController:(id)arg1 playbackDidFailWithError:(id)arg2 ;
-(void)p_playbackDidFailWithError:(id)arg1 ;
-(NSObject*<TSKMediaPlayerController>)playerController;
@end

