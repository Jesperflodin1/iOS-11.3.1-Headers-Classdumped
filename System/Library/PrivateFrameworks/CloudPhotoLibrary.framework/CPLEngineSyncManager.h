/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:14:35 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/CloudPhotoLibrary.framework/CloudPhotoLibrary
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <libobjc.A.dylib/CPLPushToTransportTaskDelegate.h>
#import <libobjc.A.dylib/CPLPullFromTransportTaskDelegate.h>
#import <libobjc.A.dylib/CPLMinglePulledChangesTaskDelegate.h>
#import <libobjc.A.dylib/CPLBackgroundDownloadsTaskDelegate.h>
#import <libobjc.A.dylib/CPLAbstractObject.h>
#import <libobjc.A.dylib/CPLEngineComponent.h>

@protocol CPLEngineStoreUserIdentifier, CPLEngineTransportSetupTask, OS_dispatch_queue;
@class NSString, NSMutableArray, NSObject, NSError, CPLPullFromTransportTask, CPLPushToTransportTask, CPLMinglePulledChangesTask, CPLBackgroundDownloadsTask, CPLPlatformObject, CPLEngineLibrary;

@interface CPLEngineSyncManager : NSObject <CPLPushToTransportTaskDelegate, CPLPullFromTransportTaskDelegate, CPLMinglePulledChangesTaskDelegate, CPLBackgroundDownloadsTaskDelegate, CPLAbstractObject, CPLEngineComponent> {

	id<CPLEngineStoreUserIdentifier> _transportUserIdentifier;
	NSString* _libraryZoneName;
	BOOL _setupIsDone;
	id<CPLEngineTransportSetupTask> _setupTask;
	NSMutableArray* _setupBarriers;
	/*^block*/id _closingCompletionHandler;
	NSObject*<OS_dispatch_queue> _lock;
	NSError* _lastError;
	CPLPullFromTransportTask* _prePushTask;
	CPLPushToTransportTask* _pushTask;
	CPLPullFromTransportTask* _pullTask;
	CPLMinglePulledChangesTask* _mingleTask;
	CPLBackgroundDownloadsTask* _backgroundDownloadsTask;
	unsigned long long _shouldRestartSessionFromState;
	NSMutableArray* _lastErrors;
	BOOL _foreground;
	BOOL _hasTransactionForSyncSession;
	BOOL _shouldTryToMingleImmediately;
	CPLPlatformObject* _platformObject;
	CPLEngineLibrary* _engineLibrary;
	unsigned long long _state;

}

@property (assign,setter=_setState:,nonatomic) unsigned long long state;              //@synthesize state=_state - In the implementation block
@property (assign,nonatomic) BOOL shouldTryToMingleImmediately;                       //@synthesize shouldTryToMingleImmediately=_shouldTryToMingleImmediately - In the implementation block
@property (nonatomic,__weak,readonly) CPLEngineLibrary * engineLibrary;               //@synthesize engineLibrary=_engineLibrary - In the implementation block
@property (nonatomic,readonly) NSError * lastError; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) CPLPlatformObject * platformObject;                    //@synthesize platformObject=_platformObject - In the implementation block
+(id)platformImplementationProtocol;
+(id)descriptionForState:(unsigned long long)arg1 ;
+(id)shortDescriptionForState:(unsigned long long)arg1 ;
-(NSError *)lastError;
-(unsigned long long)state;
-(void)_setState:(unsigned long long)arg1 ;
-(id)componentName;
-(void)openWithCompletionHandler:(/*^block*/id)arg1 ;
-(CPLEngineLibrary *)engineLibrary;
-(CPLPlatformObject *)platformObject;
-(void)closeAndDeactivate:(BOOL)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)getStatusWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)getStatusDictionaryWithCompletionHandler:(/*^block*/id)arg1 ;
-(id)initWithEngineLibrary:(id)arg1 ;
-(void)cancelCurrentSyncSession;
-(void)startSyncSessionWithMinimalPhase:(unsigned long long)arg1 ;
-(void)kickOffSyncSession;
-(void)setSyncSessionShouldBeForeground:(BOOL)arg1 ;
-(void)resetTransportUserIdentifierAndRestartSync:(BOOL)arg1 ;
-(id)task:(id)arg1 wantsToCheckRecordsExistence:(id)arg2 fetchRecordProperties:(id)arg3 withCompletionHandler:(/*^block*/id)arg4 ;
-(id)task:(id)arg1 wantsToPushBatch:(id)arg2 progressBlock:(/*^block*/id)arg3 continuationBlock:(/*^block*/id)arg4 ;
-(void)task:(id)arg1 didFinishWithError:(id)arg2 ;
-(void)task:(id)arg1 didProgress:(float)arg2 userInfo:(id)arg3 ;
-(void)addSetupBarrier:(/*^block*/id)arg1 ;
-(id)_descriptionForCurrentState;
-(void)_cancelAllTasksLockedDeferringPushTaskCancellationIfCurrentlyUploadingForeground:(BOOL)arg1 ;
-(id)_descriptionForLaunchedTasks;
-(void)_cancelAllTasksForSetup;
-(void)_cancelAllTasksForPrePush;
-(void)_cancelAllTasksForPush:(BOOL)arg1 ;
-(void)_cancelAllTasksForPull;
-(void)_cancelAllTasksForBackgroundDownloads;
-(id)_descriptionForSetupTasks;
-(id)_descriptionForPrePushTasks;
-(id)_descriptionForPushTasks;
-(id)_descriptionForPullTasks;
-(id)_descriptionForBackgroundDownloadsTasks;
-(BOOL)_launchSetupTask;
-(BOOL)_launchNecessaryTasksForPrePush;
-(BOOL)_launchNecessaryTasksForPush;
-(BOOL)_launchNecessaryTasksForPull;
-(BOOL)_launchNecessaryTasksForBackgroundDownloads;
-(void)_advanceToNextStateLockedMinimalState:(unsigned long long)arg1 ;
-(BOOL)_launchNecessaryTasksForCurrentStateLocked;
-(void)_notifyEndOfSyncSession;
-(void)_cancelAllTasksLocked;
-(void)_resetErrorForSyncSession;
-(void)_advanceToNextStateLocked;
-(void)_restartSyncSessionFromStateLocked:(unsigned long long)arg1 cancelIfNecessary:(BOOL)arg2 ;
-(void)_moveAllTasksToBackgroundLocked;
-(void)_setErrorForSyncSession:(id)arg1 ;
-(BOOL)_prepareAndLaunchSyncTask:(id*)arg1 ;
-(void)_retainPowerAssertionForMingleTaskIfNecessary;
-(void)_releasePowerAssertionForMingleTaskIfNecessary;
-(BOOL)_didFinishSetupTaskWithError:(id)arg1 shouldStop:(BOOL*)arg2 ;
-(BOOL)_didFinishPrePushTask:(id)arg1 withError:(id)arg2 shouldStop:(BOOL*)arg3 ;
-(BOOL)_didFinishPushTask:(id)arg1 withError:(id)arg2 shouldStop:(BOOL*)arg3 ;
-(BOOL)_didFinishPullTask:(id)arg1 withError:(id)arg2 shouldStop:(BOOL*)arg3 ;
-(BOOL)_didFinishBackgroundDownloadsTask:(id)arg1 withError:(id)arg2 shouldStop:(BOOL*)arg3 ;
-(float)_progressForPrePushTask:(id)arg1 progress:(float)arg2 ;
-(float)_progressForPushTask:(id)arg1 progress:(float)arg2 ;
-(float)_progressForPullTask:(id)arg1 progress:(float)arg2 ;
-(float)_progressForBackgroundDownloadsTask:(id)arg1 progress:(float)arg2 ;
-(void)beginClientWork:(id)arg1 ;
-(void)endClientWork:(id)arg1 ;
-(id)task:(id)arg1 wantsToQueryTaskForCursor:(id)arg2 class:(Class)arg3 progressHandler:(/*^block*/id)arg4 completionHandler:(/*^block*/id)arg5 ;
-(id)task:(id)arg1 wantsToDownloadBatchesFromSyncAnchor:(id)arg2 progressHandler:(/*^block*/id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(BOOL)shouldTryToMingleImmediately;
-(void)setShouldTryToMingleImmediately:(BOOL)arg1 ;
@end

