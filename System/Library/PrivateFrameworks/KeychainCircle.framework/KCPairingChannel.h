/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:22:38 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/KeychainCircle.framework/KeychainCircle
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@class KCPairingChannelContext, NSXPCConnection;

@interface KCPairingChannel : NSObject {

	BOOL _needInitialSync;
	BOOL _initator;
	BOOL _acceptorWillSendInitialSyncCredentials;
	unsigned _counter;
	KCPairingChannelContext* _peerVersionContext;
	NSXPCConnection* _connection;
	/*^block*/id _nextState;

}

@property (assign) KCPairingChannelContext * peerVersionContext;              //@synthesize peerVersionContext=_peerVersionContext - In the implementation block
@property (assign) BOOL initator;                                             //@synthesize initator=_initator - In the implementation block
@property (assign) unsigned counter;                                          //@synthesize counter=_counter - In the implementation block
@property (assign) BOOL acceptorWillSendInitialSyncCredentials;               //@synthesize acceptorWillSendInitialSyncCredentials=_acceptorWillSendInitialSyncCredentials - In the implementation block
@property (retain) NSXPCConnection * connection;                              //@synthesize connection=_connection - In the implementation block
@property (copy) id nextState;                                                //@synthesize nextState=_nextState - In the implementation block
@property (readonly) BOOL needInitialSync;                                    //@synthesize needInitialSync=_needInitialSync - In the implementation block
+(BOOL)isSupportedPlatform;
+(id)pairingChannelInitiator:(id)arg1 ;
+(id)pairingChannelAcceptor:(id)arg1 ;
-(NSXPCConnection *)connection;
-(void)setConnection:(NSXPCConnection *)arg1 ;
-(id)initAsInitiator:(BOOL)arg1 version:(id)arg2 ;
-(void)initatorFirstPacket:(id)arg1 complete:(/*^block*/id)arg2 ;
-(void)acceptorFirstPacket:(id)arg1 complete:(/*^block*/id)arg2 ;
-(void)oneStepTooMany:(id)arg1 complete:(/*^block*/id)arg2 ;
-(BOOL)ensureControlChannel;
-(void)setNextStateError:(id)arg1 complete:(/*^block*/id)arg2 ;
-(void)initatorSecondPacket:(id)arg1 complete:(/*^block*/id)arg2 ;
-(void)setAcceptorWillSendInitialSyncCredentials:(BOOL)arg1 ;
-(void)initatorCompleteSecondPacket:(/*^block*/id)arg1 ;
-(void)initatorThirdPacket:(id)arg1 complete:(/*^block*/id)arg2 ;
-(void)initatorFourthPacket:(id)arg1 complete:(/*^block*/id)arg2 ;
-(void)acceptorSecondPacket:(id)arg1 complete:(/*^block*/id)arg2 ;
-(BOOL)acceptorWillSendInitialSyncCredentials;
-(void)acceptorThirdPacket:(id)arg1 complete:(/*^block*/id)arg2 ;
-(BOOL)initator;
-(id)decompressData:(id)arg1 ;
-(void)exchangePacket:(id)arg1 complete:(/*^block*/id)arg2 ;
-(void)validateStart:(/*^block*/id)arg1 ;
-(void)setXPCConnectionObject:(id)arg1 ;
-(KCPairingChannelContext *)peerVersionContext;
-(void)setPeerVersionContext:(KCPairingChannelContext *)arg1 ;
-(void)setInitator:(BOOL)arg1 ;
-(id)nextState;
-(void)setNextState:(id)arg1 ;
-(unsigned)counter;
-(void)setCounter:(unsigned)arg1 ;
-(id)exchangePacket:(id)arg1 complete:(BOOL*)arg2 error:(id*)arg3 ;
-(BOOL)needInitialSync;
-(id)compressData:(id)arg1 ;
@end

