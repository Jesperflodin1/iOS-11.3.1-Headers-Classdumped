/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:20:17 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/CoreSpeech.framework/CoreSpeech
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <CoreSpeech/CoreSpeech-Structs.h>
#import <libobjc.A.dylib/AVVoiceControllerRecordDelegate.h>
#import <libobjc.A.dylib/AVVoiceControllerPlaybackDelegate.h>
#import <libobjc.A.dylib/CSBeepCancellerDelegate.h>

@protocol CSAudioRecorderDelegate;
@class AVVoiceController, CSAudioZeroFilter, CSBeepCanceller, CSAudioSampleRateConverter, CSRemoteRecordClient, NSDictionary, CSAudioZeroCounter, NSString;

@interface CSAudioRecorder : NSObject <AVVoiceControllerRecordDelegate, AVVoiceControllerPlaybackDelegate, CSBeepCancellerDelegate> {

	AVVoiceController* _voiceController;
	CSAudioZeroFilter* _zeroFilter;
	CSBeepCanceller* _beepCanceller;
	unsigned long long _vtEndInSampleCount;
	unsigned long long _numSamplesProcessed;
	OpaqueAudioConverterRef _deinterleaver;
	AudioBufferList* _interleavedABL;
	AudioBufferList* _pNonInterleavedABL;
	CSAudioSampleRateConverter* _sampleRateConverter;
	BOOL _needSampleRateConversion;
	CSRemoteRecordClient* _remoteRecordClient;
	NSDictionary* _latestContext;
	BOOL _shouldUseRemoteRecord;
	CSAudioZeroCounter* _continuousZeroCounter;
	id<CSAudioRecorderDelegate> _delegate;

}

@property (assign,nonatomic,__weak) id<CSAudioRecorderDelegate> delegate;              //@synthesize delegate=_delegate - In the implementation block
@property (assign,nonatomic) BOOL duckOthersOption; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(id<CSAudioRecorderDelegate>)delegate;
-(void)setDelegate:(id<CSAudioRecorderDelegate>)arg1 ;
-(void)dealloc;
-(id)metrics;
-(BOOL)isRecording;
-(void)stopRecording;
-(id)initWithContext:(id)arg1 error:(id*)arg2 ;
-(void)setMeteringEnabled:(BOOL)arg1 ;
-(BOOL)setAlertSoundFromURL:(id)arg1 forType:(long long)arg2 ;
-(BOOL)setRecordBufferDuration:(double)arg1 ;
-(BOOL)setCurrentContext:(id)arg1 error:(id*)arg2 ;
-(id)recordSettings;
-(BOOL)prepareRecordWithSettings:(id)arg1 error:(id*)arg2 ;
-(BOOL)startRecording;
-(BOOL)playAlertSoundForType:(long long)arg1 ;
-(void)releaseAudioSession:(unsigned long long)arg1 ;
-(void)voiceControllerRecordBufferAvailable:(id)arg1 buffer:(id)arg2 ;
-(void)voiceControllerDidStopRecording:(id)arg1 forReason:(long long)arg2 ;
-(void)updateMeters;
-(float)averagePowerForChannel:(unsigned long long)arg1 ;
-(void)voiceControllerDidStartRecording:(id)arg1 successfully:(BOOL)arg2 error:(id)arg3 ;
-(void)voiceControllerRecordHardwareConfigurationDidChange:(id)arg1 toConfiguration:(int)arg2 ;
-(void)voiceControllerBeginRecordInterruption:(id)arg1 ;
-(void)voiceControllerBeginRecordInterruption:(id)arg1 withContext:(id)arg2 ;
-(void)voiceControllerEndRecordInterruption:(id)arg1 ;
-(void)voiceControllerMediaServicesWereLost:(id)arg1 ;
-(void)voiceControllerMediaServicesWereReset:(id)arg1 ;
-(void)voiceControllerWillSetAudioSessionActive:(id)arg1 willActivate:(BOOL)arg2 ;
-(void)voiceControllerDidSetAudioSessionActive:(id)arg1 isActivated:(BOOL)arg2 ;
-(void)voiceControllerLPCMRecordBufferAvailable:(id)arg1 buffer:(id)arg2 ;
-(void)willDestroy;
-(BOOL)prepareListenWithSettings:(id)arg1 error:(id*)arg2 ;
-(void)prewarmAudioSession;
-(id)recordRoute;
-(BOOL)isNarrowBand;
-(BOOL)startRecordingWithSettings:(id)arg1 error:(id*)arg2 ;
-(BOOL)startListening:(id*)arg1 ;
-(BOOL)setRecordMode:(long long)arg1 error:(id*)arg2 ;
-(BOOL)releaseAudioSessionForListening:(unsigned long long)arg1 error:(id*)arg2 ;
-(void)configureAlertBehavior:(id)arg1 ;
-(id)voiceTriggerInfo;
-(BOOL)duckOthersOption;
-(void)setDuckOthersOption:(BOOL)arg1 ;
-(unsigned long long)alertStartTime;
-(BOOL)playRecordStartingAlertAndResetEndpointer;
-(float)peakPowerForChannel:(unsigned long long)arg1 ;
-(void)setSynchronousCallbackEnabled:(BOOL)arg1 ;
-(double)getRecordBufferDuration;
-(BOOL)startRecording:(id*)arg1 ;
-(void)beepCancellerDidCancelSamples:(id)arg1 buffer:(id)arg2 timestamp:(unsigned long long)arg3 ;
-(id)_beepCanceller;
-(id)_voiceControllerWithContext:(id)arg1 error:(id*)arg2 ;
-(float)_recordingSampleRate;
-(void)_destroyVoiceController;
-(BOOL)_shouldUseRemoteRecordForContext:(id)arg1 ;
-(void)_createDeInterleaverIfNeeded;
-(void)_createSampleRateConverterIfNeeded;
-(BOOL)_shouldRunZeroFilter;
-(void)_resetZeroFilter;
-(BOOL)releaseAudioSessionForListening:(id*)arg1 ;
-(id)playbackRoute;
-(id)_deinterleaveBufferIfNeeded:(id)arg1 ;
-(id)_samplingRateConvertIfNeeded:(id)arg1 ;
-(void)_processAudioChainWithZeroFiltering:(id)arg1 atTime:(unsigned long long)arg2 ;
-(void)_processAudioChain:(id)arg1 atTime:(unsigned long long)arg2 ;
-(void)_audioRecorderDidStartRecordingSuccessfully:(BOOL)arg1 error:(id)arg2 ;
-(void)_audioRecorderDidStopRecordingForReason:(long long)arg1 ;
-(void)enableVoiceTriggerOnAOP:(BOOL)arg1 ;
-(void)updateVoiceTriggerAOPModel:(id)arg1 ;
-(void)voiceTriggerOccuredNotification:(id)arg1 ;
@end

