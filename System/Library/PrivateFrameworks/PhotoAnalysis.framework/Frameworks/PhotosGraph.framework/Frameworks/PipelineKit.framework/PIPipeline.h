/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:25:46 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/PhotoAnalysis.framework/Frameworks/PhotosGraph.framework/Frameworks/PipelineKit.framework/PipelineKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol OS_dispatch_queue, OS_dispatch_group;
@class NSObject, NSString, NSMutableSet, PIGroup, NSMutableArray, NSMutableDictionary, NSMapTable, PIStatisticsElapsedTime, NSArray, NSSet;

@interface PIPipeline : NSObject {

	NSObject*<OS_dispatch_queue> _schedulerQueue;
	NSObject*<OS_dispatch_queue> _asynchronousMethodsQueue;
	PIPipeline* _mainPipeline;
	NSString* _identifier;
	long long _concurrencyLimit;
	long long _qualityOfService;
	unsigned long long _schedulerType;
	BOOL _suspended;
	NSMutableSet* _groups;
	PIGroup* _mainGroup;
	PIGroup* _limitedGroup;
	PIGroup* _serialGroup;
	NSObject*<OS_dispatch_queue> _userInterfaceQueue;
	NSObject*<OS_dispatch_queue> _userInteractiveQueue;
	NSObject*<OS_dispatch_queue> _userInitiatedQueue;
	NSObject*<OS_dispatch_queue> _defaultQueue;
	NSObject*<OS_dispatch_queue> _utilityQueue;
	NSObject*<OS_dispatch_queue> _backgroundQueue;
	NSObject*<OS_dispatch_group> _operationsGroup;
	NSMutableArray* _operations;
	long long _executingConcurrency;
	NSMutableArray* _executingOperations;
	NSMutableDictionary* _operationsByPriority;
	NSMapTable* _operationsByIdentifier;
	NSMapTable* _operationsByKey;
	NSMapTable* _operationsRates;
	double _timestampStart;
	PIStatisticsElapsedTime* _executionTime;

}

@property (assign,nonatomic,__weak) PIPipeline * mainPipeline;                 //@synthesize mainPipeline=_mainPipeline - In the implementation block
@property (nonatomic,copy,readonly) NSString * identifier;                     //@synthesize identifier=_identifier - In the implementation block
@property (assign) long long concurrencyLimit;                                 //@synthesize concurrencyLimit=_concurrencyLimit - In the implementation block
@property (assign) long long qualityOfService;                                 //@synthesize qualityOfService=_qualityOfService - In the implementation block
@property (assign) unsigned long long schedulerType;                           //@synthesize schedulerType=_schedulerType - In the implementation block
@property (getter=isSuspended) BOOL suspended;                                 //@synthesize suspended=_suspended - In the implementation block
@property (copy,readonly) NSArray * operations;                                //@synthesize operations=_operations - In the implementation block
@property (copy,readonly) NSArray * executingOperations; 
@property (readonly) unsigned long long operationsCount; 
@property (readonly) unsigned long long executingOperationsCount; 
@property (readonly) long long executingConcurrency; 
@property (readonly) BOOL isExecuting; 
@property (copy,readonly) NSSet * groups; 
+(id)sharedPipeline;
+(id)pipelineWithConcurrencyLimit:(long long)arg1 qualityOfService:(long long)arg2 ;
+(id)pipeline;
-(id)init;
-(BOOL)isSuspended;
-(void)dealloc;
-(id)description;
-(NSString *)identifier;
-(NSSet *)groups;
-(void)addOperation:(id)arg1 ;
-(void)setQualityOfService:(long long)arg1 ;
-(NSArray *)operations;
-(void)setSuspended:(BOOL)arg1 ;
-(BOOL)isExecuting;
-(double)executionTime;
-(void)_removeOperation:(id)arg1 ;
-(id)_queueForOperation:(id)arg1 ;
-(void)_updateInternalGroups;
-(long long)concurrencyLimit;
-(unsigned long long)schedulerType;
-(void)_scheduleOperations;
-(void)_rebuildOperationsByPriority;
-(id)mainGroup;
-(void)_executeOperation:(id)arg1 ;
-(void)_finishOperation:(id)arg1 result:(id)arg2 ;
-(id)_nextValidOperation;
-(void)scheduleOperations;
-(id)_firstValidOperationInArray:(id)arg1 ;
-(unsigned long long)executingOperationsCount;
-(void)setSchedulerType:(unsigned long long)arg1 ;
-(id)limitedGroup;
-(void)_operation:(id)arg1 didChangePriority:(long long)arg2 ;
-(NSArray *)executingOperations;
-(long long)executingConcurrency;
-(id)operationWithIdentifier:(id)arg1 ;
-(id)operationsWithPriority:(long long)arg1 ;
-(id)addOperationWithExecutionBlock:(/*^block*/id)arg1 ;
-(void)reorderOperationsWithComparator:(/*^block*/id)arg1 completionBlock:(/*^block*/id)arg2 ;
-(void)updateOperationsWithBlock:(/*^block*/id)arg1 completionBlock:(/*^block*/id)arg2 ;
-(PIPipeline *)mainPipeline;
-(void)setMainPipeline:(PIPipeline *)arg1 ;
-(id)waitUntilFinished:(BOOL)arg1 ;
-(void)cancelAllOperations:(/*^block*/id)arg1 ;
-(void)setConcurrencyLimit:(long long)arg1 ;
-(double)wallTime;
-(long long)qualityOfService;
-(unsigned long long)operationsCount;
-(void)waitUntilFinishedUsingBlock:(/*^block*/id)arg1 ;
-(id)operationsWithKey:(id)arg1 ;
-(void)cancelOperations:(id)arg1 waitUntilFinishedBlock:(/*^block*/id)arg2 ;
-(id)serialGroup;
-(void)_addOperation:(id)arg1 ;
-(void)addGroup:(id)arg1 ;
-(void)removeGroup:(id)arg1 ;
@end

