/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:22:25 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/IMSharedUtilities.framework/Frameworks/XCTest.framework/XCTest
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <XCTest/XCTest-Structs.h>
@class NSData, NSSet, NSDictionary, NSCharacterSet, NSIndexSet;

@interface XCKeyboardKeyMap : NSObject {

	GSKeyboardRef _inputSource;
	NSData* _layoutData;
	const SCD_Struct_XC7* _layoutHeader;
	const SCD_Struct_XC6* _keyboardType;
	const SCD_Struct_XC8* _keyModifiersToTableNum;
	const SCD_Struct_XC9* _keyToCharTableIndex;
	const SCD_Struct_XC10* _keyStateRecordsIndex;
	const SCD_Struct_XC11* _keyStateTerminators;
	const SCD_Struct_XC11* _keySequenceDataIndex;
	NSSet* _numericPadKeyCodes;
	NSDictionary* _systemKeyForKeyCode;
	NSDictionary* _inputsForSystemKey;
	NSDictionary* _inputForKey;
	unsigned long long _longestSystemKey;
	NSDictionary* _modifiersForTableID;
	NSCharacterSet* _validKeyOutputIDs;
	NSDictionary* _inputsForKeyOutputID;
	NSSet* _safeTerminationInputs;
	NSRange _keyStateOutputIDsRange;
	NSIndexSet* _keyStatesWithTerminator;
	NSCharacterSet* _validKeyStates;
	NSCharacterSet* _validSequenceIDs;
	BOOL _canEmitSequenceIDAndKeyState;
	NSDictionary* _inexactSequencesNFC;
	unsigned long long _longestInexactSequence;
	NSDictionary* _stringsForIntendedStrings;

}

@property (readonly) BOOL canEmitSequenceIDAndKeyState;              //@synthesize canEmitSequenceIDAndKeyState=_canEmitSequenceIDAndKeyState - In the implementation block
@property (getter=isPrimary,readonly) BOOL primary; 
-(id)initWithInputSource:(GSKeyboardRef)arg1 layoutData:(id)arg2 index:(unsigned long long)arg3 ;
-(BOOL)supportsKeyboardType:(unsigned long long)arg1 ;
-(id)stringForIntendedString:(id)arg1 ;
-(id)cachedPathsEndingString:(id)arg1 range:(NSRange)arg2 ;
-(id)pathsEndingString:(id)arg1 range:(id)arg2 nextPath:(id)arg3 ;
-(void)addCachedPaths:(id)arg1 endingString:(id)arg2 range:(NSRange)arg3 ;
-(BOOL)canEmitSequenceIDAndKeyState;
-(id)inputsToSetModifierFlags:(unsigned long long)arg1 currentFlags:(unsigned long long)arg2 ;
-(void)_initKeyboardKeys;
-(void)_initModifiers;
-(void)_initKeyOutputs;
-(void)_initKeyStates;
-(void)_initValidity;
-(void)_initInexactSequences;
-(void)_initIntendedStrings;
-(id)stringForInput:(id)arg1 ;
-(BOOL)canEmitSequenceID:(unsigned short)arg1 ;
-(BOOL)canEmitOutputID:(unsigned short)arg1 ;
-(id)inputsForText:(id)arg1 currentFlags:(unsigned long long)arg2 ;
-(id)sequenceIDsForString:(id)arg1 range:(NSRange)arg2 ;
-(void)_sequenceIDsEndingString:(id)arg1 range:(NSRange)arg2 suffixRange:(NSRange)arg3 results:(id)arg4 ;
-(id)stringForSequenceID:(unsigned short)arg1 ;
-(BOOL)canEmitSequenceIDAsOutputID:(unsigned short)arg1 ;
-(id)inputsForOutputID:(unsigned short)arg1 ;
-(BOOL)canEmitKeyState:(unsigned short)arg1 ;
-(id)_pathByTerminatingKeyState:(unsigned short)arg1 next:(id)arg2 output:(id)arg3 sequenceID:(unsigned short)arg4 ;
-(BOOL)_pathsForSystemKeyEndingString:(id)arg1 range:(NSRange)arg2 nextPath:(id)arg3 results:(id)arg4 ;
-(void)_pathsForSequenceID:(unsigned short)arg1 range:(id)arg2 nextPath:(id)arg3 results:(id)arg4 ;
-(id)sequenceIDsEndingString:(id)arg1 range:(NSRange)arg2 ;
-(id)pathsForSequenceID:(unsigned short)arg1 nextPath:(id)arg2 ;
-(id)_stringForInput:(id)arg1 keyState:(unsigned long long*)arg2 output:(id)arg3 ;
-(unsigned long long)uniqueKeyboardType:(unsigned long long)arg1 ;
-(id)inputForKey:(id)arg1 modifierFlags:(unsigned long long)arg2 ;
-(id)inputsForText:(id)arg1 ;
-(id)sequenceIDsForString:(id)arg1 ;
-(id)stringForInputs:(id)arg1 ;
-(id)init;
-(void)dealloc;
-(id)description;
-(BOOL)isPrimary;
@end

