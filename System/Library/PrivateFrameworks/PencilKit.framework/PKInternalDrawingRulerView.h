/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:25:35 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/PencilKit.framework/PencilKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <PencilKit/PencilKit-Structs.h>
#import <PencilKit/PKInternalDrawingView.h>
#import <UIKit/UIGestureRecognizerDelegate.h>

@class PKRulerGestureRecognizer, NSTimer, PKRulerLayer, CALayer, CATextLayer, UIImpactFeedbackGenerator, NSString;

@interface PKInternalDrawingRulerView : PKInternalDrawingView <UIGestureRecognizerDelegate> {

	BOOL _isInteractingWithRuler;
	BOOL _isInlineResizing;
	BOOL _isExpandedInline;
	BOOL _rulerWasShownViaGesture;
	BOOL _rulerIsRotating;
	BOOL _canRulerSnapToAngle;
	BOOL _isRulerDrawingMovingToEndOfRuler;
	BOOL _lastTouchWasMaskedByRuler;
	BOOL _rulerSnappedToAngle;
	PKRulerGestureRecognizer* _rulerGestureRecognizer;
	NSTimer* _imageTransformTimer;
	double _initialDrawingBoundsYOrigin;
	PKRulerLayer* _rulerLayer;
	CALayer* _rulerAngleMarker;
	CALayer* _rulerAngleTick;
	CATextLayer* _rulerAngleText;
	CALayer* _rulerDistanceHUD;
	CATextLayer* _rulerDistanceText;
	double _currentTValueForSnappedDrawing;
	double _minTValueForSnappedDrawing;
	double _maxTValueForSnappedDrawing;
	double _originTValueForSnappedDrawing;
	double _rulerZoomStartCenterTValueOnScreen;
	double _rulerZoomStartScale;
	UIImpactFeedbackGenerator* _snapImpactBehavior;
	UIImpactFeedbackGenerator* _unsnapImpactBehavior;
	SCD_Struct_PK2 _rulerState;
	SCD_Struct_PK2 _previousRulerState;
	CGAffineTransform _rulerTransform;
	CGAffineTransform _rulerStartTransform;
	CGAffineTransform _rulerZoomStartTransform;

}

@property (nonatomic,retain) NSTimer * imageTransformTimer;                                  //@synthesize imageTransformTimer=_imageTransformTimer - In the implementation block
@property (assign,nonatomic) double initialDrawingBoundsYOrigin;                             //@synthesize initialDrawingBoundsYOrigin=_initialDrawingBoundsYOrigin - In the implementation block
@property (assign,nonatomic) BOOL isInlineResizing;                                          //@synthesize isInlineResizing=_isInlineResizing - In the implementation block
@property (assign,nonatomic) BOOL isExpandedInline;                                          //@synthesize isExpandedInline=_isExpandedInline - In the implementation block
@property (nonatomic,retain) PKRulerLayer * rulerLayer;                                      //@synthesize rulerLayer=_rulerLayer - In the implementation block
@property (assign,nonatomic) CGAffineTransform rulerTransform;                               //@synthesize rulerTransform=_rulerTransform - In the implementation block
@property (nonatomic,retain) CALayer * rulerAngleMarker;                                     //@synthesize rulerAngleMarker=_rulerAngleMarker - In the implementation block
@property (nonatomic,retain) CALayer * rulerAngleTick;                                       //@synthesize rulerAngleTick=_rulerAngleTick - In the implementation block
@property (nonatomic,retain) CATextLayer * rulerAngleText;                                   //@synthesize rulerAngleText=_rulerAngleText - In the implementation block
@property (nonatomic,retain) CALayer * rulerDistanceHUD;                                     //@synthesize rulerDistanceHUD=_rulerDistanceHUD - In the implementation block
@property (nonatomic,retain) CATextLayer * rulerDistanceText;                                //@synthesize rulerDistanceText=_rulerDistanceText - In the implementation block
@property (assign,nonatomic) CGAffineTransform rulerStartTransform;                          //@synthesize rulerStartTransform=_rulerStartTransform - In the implementation block
@property (assign,nonatomic) SCD_Struct_PK2 rulerState;                                      //@synthesize rulerState=_rulerState - In the implementation block
@property (assign,nonatomic) SCD_Struct_PK2 previousRulerState;                              //@synthesize previousRulerState=_previousRulerState - In the implementation block
@property (assign,nonatomic) BOOL rulerWasShownViaGesture;                                   //@synthesize rulerWasShownViaGesture=_rulerWasShownViaGesture - In the implementation block
@property (assign,nonatomic) BOOL rulerIsRotating;                                           //@synthesize rulerIsRotating=_rulerIsRotating - In the implementation block
@property (assign,nonatomic) BOOL canRulerSnapToAngle;                                       //@synthesize canRulerSnapToAngle=_canRulerSnapToAngle - In the implementation block
@property (assign,nonatomic) BOOL isRulerDrawingMovingToEndOfRuler;                          //@synthesize isRulerDrawingMovingToEndOfRuler=_isRulerDrawingMovingToEndOfRuler - In the implementation block
@property (assign,nonatomic) BOOL isInteractingWithRuler;                                    //@synthesize isInteractingWithRuler=_isInteractingWithRuler - In the implementation block
@property (assign,nonatomic) double currentTValueForSnappedDrawing;                          //@synthesize currentTValueForSnappedDrawing=_currentTValueForSnappedDrawing - In the implementation block
@property (assign,nonatomic) double minTValueForSnappedDrawing;                              //@synthesize minTValueForSnappedDrawing=_minTValueForSnappedDrawing - In the implementation block
@property (assign,nonatomic) double maxTValueForSnappedDrawing;                              //@synthesize maxTValueForSnappedDrawing=_maxTValueForSnappedDrawing - In the implementation block
@property (assign,nonatomic) double originTValueForSnappedDrawing;                           //@synthesize originTValueForSnappedDrawing=_originTValueForSnappedDrawing - In the implementation block
@property (assign,nonatomic) double rulerZoomStartCenterTValueOnScreen;                      //@synthesize rulerZoomStartCenterTValueOnScreen=_rulerZoomStartCenterTValueOnScreen - In the implementation block
@property (assign,nonatomic) double rulerZoomStartScale;                                     //@synthesize rulerZoomStartScale=_rulerZoomStartScale - In the implementation block
@property (assign,nonatomic) CGAffineTransform rulerZoomStartTransform;                      //@synthesize rulerZoomStartTransform=_rulerZoomStartTransform - In the implementation block
@property (assign,nonatomic) BOOL lastTouchWasMaskedByRuler;                                 //@synthesize lastTouchWasMaskedByRuler=_lastTouchWasMaskedByRuler - In the implementation block
@property (nonatomic,retain) UIImpactFeedbackGenerator * snapImpactBehavior;                 //@synthesize snapImpactBehavior=_snapImpactBehavior - In the implementation block
@property (nonatomic,retain) UIImpactFeedbackGenerator * unsnapImpactBehavior;               //@synthesize unsnapImpactBehavior=_unsnapImpactBehavior - In the implementation block
@property (assign,nonatomic) BOOL rulerSnappedToAngle;                                       //@synthesize rulerSnappedToAngle=_rulerSnappedToAngle - In the implementation block
@property (nonatomic,retain) PKRulerGestureRecognizer * rulerGestureRecognizer;              //@synthesize rulerGestureRecognizer=_rulerGestureRecognizer - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(BOOL)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2 ;
-(BOOL)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2 ;
-(void)animationDidStop:(id)arg1 finished:(BOOL)arg2 ;
-(id)accessibilityElements;
-(PKRulerLayer *)rulerLayer;
-(void)setRulerZoomStartTransform:(CGAffineTransform)arg1 ;
-(CGAffineTransform)rulerZoomStartTransform;
-(double)getRulerCenterTValueOnScreenForTransfrom:(CGAffineTransform)arg1 ;
-(void)setRulerZoomStartCenterTValueOnScreen:(double)arg1 ;
-(CGAffineTransform)canvasTransform;
-(void)setRulerZoomStartScale:(double)arg1 ;
-(void)setZooming:(BOOL)arg1 ;
-(PKRulerGestureRecognizer *)rulerGestureRecognizer;
-(void)rulerMoveGesture:(id)arg1 ;
-(void)setRulerGestureRecognizer:(PKRulerGestureRecognizer *)arg1 ;
-(void)hideUI;
-(CGAffineTransform)ensureRulerFullyOnscreen:(CGAffineTransform)arg1 ;
-(BOOL)compactRuler;
-(id)rulerBackgroundImage;
-(double)rulerZoomStartCenterTValueOnScreen;
-(double)rulerZoomStartScale;
-(CGAffineTransform)pixelSnapRulerTransform:(CGAffineTransform)arg1 ;
-(CGAffineTransform)defaultRulerTransfrom;
-(void)setRulerStartTransform:(CGAffineTransform)arg1 ;
-(void)setRulerIsRotating:(BOOL)arg1 ;
-(void)setRulerLayer:(PKRulerLayer *)arg1 ;
-(CGAffineTransform)rulerStartTransform;
-(void)updateRulerTickMarkImage;
-(id)addOpacityAnimationOnLayer:(id)arg1 delegate:(id)arg2 toOpacity:(double)arg3 ;
-(void)setRulerState:(SCD_Struct_PK2)arg1 ;
-(void)hideRulerAnimated:(BOOL)arg1 ;
-(void)removeRulerMarkers;
-(CALayer *)rulerAngleMarker;
-(CALayer *)rulerDistanceHUD;
-(void)setRulerAngleMarker:(CALayer *)arg1 ;
-(void)setRulerWasShownViaGesture:(BOOL)arg1 ;
-(BOOL)rulerIsRotating;
-(void)updateAngleWithAngleMarkerPosition:(CGPoint)arg1 ;
-(BOOL)shouldUseLargestRulerTextFontSize;
-(id)rulerDialImage;
-(void)setRulerAngleTick:(CALayer *)arg1 ;
-(id)rulerDialLevelImage;
-(CALayer *)rulerAngleTick;
-(void)setRulerAngleText:(CATextLayer *)arg1 ;
-(CATextLayer *)rulerAngleText;
-(SCD_Struct_PK2)rulerState;
-(void)setCanRulerSnapToAngle:(BOOL)arg1 ;
-(void)setPreviousRulerState:(SCD_Struct_PK2)arg1 ;
-(SCD_Struct_PK2)previousRulerState;
-(BOOL)canRulerSnapToAngle;
-(BOOL)rulerSnappedToAngle;
-(void)setRulerSnappedToAngle:(BOOL)arg1 ;
-(UIImpactFeedbackGenerator *)snapImpactBehavior;
-(UIImpactFeedbackGenerator *)unsnapImpactBehavior;
-(CGAffineTransform)angleSnapRulerTransform:(CGAffineTransform)arg1 aroundOrigin:(CGPoint)arg2 ;
-(void)updateAngle:(id)arg1 ;
-(void)showRuler;
-(void)setIsInteractingWithRuler:(BOOL)arg1 ;
-(void)setSnapImpactBehavior:(UIImpactFeedbackGenerator *)arg1 ;
-(void)setUnsnapImpactBehavior:(UIImpactFeedbackGenerator *)arg1 ;
-(void)updateRuler:(id)arg1 ;
-(BOOL)rulerWasShownViaGesture;
-(void)resetRulerTouches;
-(BOOL)viewPointInRuler:(CGPoint)arg1 ;
-(double)maxTValueForSnappedDrawing;
-(double)minTValueForSnappedDrawing;
-(CATextLayer *)rulerDistanceText;
-(double)originTValueForSnappedDrawing;
-(void)setIsRulerDrawingMovingToEndOfRuler:(BOOL)arg1 ;
-(void)setRulerDistanceHUD:(CALayer *)arg1 ;
-(void)setRulerDistanceText:(CATextLayer *)arg1 ;
-(void)addScaleAndOpacityAnimationOnLayer:(id)arg1 delegate:(id)arg2 fromScale:(double)arg3 toScale:(double)arg4 fromAlpha:(double)arg5 toAlpha:(double)arg6 ;
-(double)currentTValueForSnappedDrawing;
-(CGPoint)getRulerCenterLineOriginAndTangent:(CGPoint*)arg1 ;
-(void)setCurrentTValueForSnappedDrawing:(double)arg1 ;
-(void)setMinTValueForSnappedDrawing:(double)arg1 ;
-(void)setMaxTValueForSnappedDrawing:(double)arg1 ;
-(void)setOriginTValueForSnappedDrawing:(double)arg1 ;
-(void)updateDistanceMarkerWithSpacing:(double)arg1 ;
-(void)updateImageTransform:(id)arg1 ;
-(void)setImageTransformFrom:(CGAffineTransform)arg1 toTransform:(CGAffineTransform)arg2 animated:(BOOL)arg3 duration:(double)arg4 ;
-(double)rulerAlignInset;
-(void)drawingBegan:(id)arg1 ;
-(void)startRulerDrawing;
-(void)updateRulerMarkerForLocation:(CGPoint)arg1 firstTouch:(BOOL)arg2 ;
-(void)drawingMoved:(id)arg1 withEvent:(id)arg2 ;
-(BOOL)lastTouchWasMaskedByRuler;
-(void)setLastTouchWasMaskedByRuler:(BOOL)arg1 ;
-(void)drawingEnded:(id)arg1 ;
-(void)endRulerDrawing;
-(id)_accessibilityHitTest:(CGPoint)arg1 withEvent:(id)arg2 ;
-(double)rulerTickMarkInset;
-(id)addScaleAnimationOnLayer:(id)arg1 delegate:(id)arg2 fromScale:(double)arg3 toScale:(double)arg4 ;
-(void)resetRuler;
-(void)resetRulerTransform;
-(void)cancelNonDrawingGestures;
-(void)makeRulerVertical;
-(void)makeRulerHorizontal;
-(void)incrementRulerAngleBy:(double)arg1 ;
-(BOOL)isInteractingWithRuler;
-(NSTimer *)imageTransformTimer;
-(void)setImageTransformTimer:(NSTimer *)arg1 ;
-(double)initialDrawingBoundsYOrigin;
-(void)setInitialDrawingBoundsYOrigin:(double)arg1 ;
-(BOOL)isInlineResizing;
-(void)setIsInlineResizing:(BOOL)arg1 ;
-(BOOL)isExpandedInline;
-(void)setIsExpandedInline:(BOOL)arg1 ;
-(BOOL)isRulerDrawingMovingToEndOfRuler;
-(void)setupGestures;
-(void)hideRuler;
-(void)setRulerTransform:(CGAffineTransform)arg1 ;
-(CGAffineTransform)rulerTransform;
-(double)rulerWidth;
-(void)drawingCancelled;
@end

