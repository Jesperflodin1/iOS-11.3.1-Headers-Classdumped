/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:25:35 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/PencilKit.framework/PencilKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


#import <PencilKit/PencilKit-Structs.h>
@class DKDGLShader, DKDGLDataBuffer, DKDGLFrameBufferTextureConfig, PKGLContext;

@interface PKResourceHandler : NSObject {

	DKDGLShader* _blitShader;
	DKDGLShader* _paintShader;
	DKDGLShader* _linesShader;
	DKDGLShader* _paintCircleShader;
	DKDGLShader* _paperShader;
	DKDGLShader* _particleShader;
	unordered_map<unsigned long long, DKDGLShader *, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, DKDGLShader *> > >* _uberShaders;
	unordered_map<unsigned long long, DKDGLFrameBufferTextureConfig *, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, DKDGLFrameBufferTextureConfig *> > >* _drawingTexConfigs;
	DKDGLDataBuffer* _quadBuffer;
	CVOpenGLESTextureCacheRef _textureCache;
	DKDGLFrameBufferTextureConfig* _paintTexConfig;
	PKGLContext* _sharedContext;
	int _backingWidth;
	int _backingHeight;

}

@property (nonatomic,readonly) int backingWidth;                             //@synthesize backingWidth=_backingWidth - In the implementation block
@property (nonatomic,readonly) int backingHeight;                            //@synthesize backingHeight=_backingHeight - In the implementation block
@property (nonatomic,readonly) DKDGLShader * blitShader; 
@property (nonatomic,readonly) DKDGLShader * paintShader; 
@property (nonatomic,readonly) DKDGLShader * linesShader; 
@property (nonatomic,readonly) DKDGLShader * paintCircleShader; 
@property (nonatomic,readonly) DKDGLShader * paperShader; 
@property (nonatomic,readonly) DKDGLShader * particleShader; 
+(id)inkBundle;
-(id)init;
-(void)dealloc;
-(void)preloadResources;
-(void)flushMemoryIfPossible;
-(id)initWithPixelSize:(CGSize)arg1 andGLContext:(id)arg2 ;
-(id)claimDrawingFrameBuffer;
-(DKDGLShader *)paintCircleShader;
-(DKDGLShader *)paintShader;
-(DKDGLShader *)blitShader;
-(id)compositeOverShaderWithMode:(long long)arg1 clipping:(BOOL)arg2 ;
-(id)compositeSoftWhiteShaderWithMode:(long long)arg1 clipping:(BOOL)arg2 ;
-(id)compositeMultiplyShaderWithMode:(long long)arg1 clipping:(BOOL)arg2 ;
-(id)compositeEraseShaderWithMode:(long long)arg1 clipping:(BOOL)arg2 ;
-(id)compositePaperShaderWithMode:(long long)arg1 ;
-(DKDGLShader *)paperShader;
-(id)lineDataBuffer;
-(DKDGLShader *)linesShader;
-(id)cachedQuadDataBuffer;
-(id)claimPaintFrameBuffer;
-(id)paintDataBufferWithCapacity:(unsigned long long)arg1 dynamicDraw:(BOOL)arg2 ;
-(id)claimDrawingFrameBufferWithSize:(CGSize)arg1 ;
-(DKDGLShader *)particleShader;
-(void)setPixelSize:(CGSize)arg1 ;
-(int)backingWidth;
-(int)backingHeight;
-(id)drawingTexConfigWithSize:(CGSize)arg1 ;
-(id)createFramebuffer:(CGSize)arg1 textureConfig:(id)arg2 ;
-(id)paintTexConfig;
-(id)glVersionString;
-(id)uberShaderForKey:(SCD_Struct_PK45)arg1 ;
-(id)definesForMode:(long long)arg1 clipping:(BOOL)arg2 ;
-(id)quadDataBufferForDynamicDraw:(BOOL)arg1 ;
-(void)updateFullScreenQuadDataBuffer:(id)arg1 flipped:(BOOL)arg2 ;
@end

