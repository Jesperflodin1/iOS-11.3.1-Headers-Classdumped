/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:13:40 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/AppleCVAPhoto.framework/AppleCVAPhoto
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol MTLDeviceSPI, MTLLibrary, MTLCommandQueue, MTLFunction, MTLRenderPipelineState, MTLComputePipelineState, MTLTexture, MTLBuffer, MTLSamplerState, MTLDepthStencilState, OS_dispatch_queue, OS_dispatch_semaphore;
#import <AppleCVAPhoto/AppleCVAPhoto-Structs.h>
@class MTLRenderPassDescriptor, MPSImageGaussianBlur, UIColor, NSObject;

@interface VideoRelightingMetal : NSObject {

	id<MTLDeviceSPI> _device;
	id<MTLLibrary> _library;
	id<MTLCommandQueue> _commandQueue;
	int _renderWidth;
	int _renderHeight;
	MTLRenderPassDescriptor* _shadowRenderDesc3;
	MTLRenderPassDescriptor* _shadowRenderDesc4;
	MTLRenderPassDescriptor* _lightRenderDesc;
	id<MTLFunction> _function_vertex_Depth;
	id<MTLFunction> _function_vertex_Light;
	id<MTLFunction> _function_fragment_Light;
	id<MTLRenderPipelineState> _kernel_Depth;
	id<MTLRenderPipelineState> _kernel_Light;
	id<MTLComputePipelineState> _kernel_EdgeVertical;
	id<MTLComputePipelineState> _kernel_Edge;
	id<MTLComputePipelineState> _kernel_CountVertical;
	id<MTLComputePipelineState> _kernel_Count;
	id<MTLComputePipelineState> _kernel_Boundary;
	id<MTLComputePipelineState> _kernel_Slide;
	id<MTLComputePipelineState> _kernel_SmoothVertSlide;
	id<MTLComputePipelineState> _kernel_SmoothSlide;
	id<MTLComputePipelineState> _kernel_Relight;
	id<MTLComputePipelineState> _kernel_UpScale;
	id<MTLComputePipelineState> _kernel_Clear;
	id<MTLComputePipelineState> _kernel_VertEdge_VertCount;
	id<MTLComputePipelineState> _kernel_Edge_Count;
	MPSImageGaussianBlur* _smoothFilter;
	int _computeWidth;
	int _computeHeight;
	id<MTLTexture> _srcTexture;
	id<MTLTexture> _dstTexture;
	id<MTLTexture> _dstUVTexture;
	id<MTLTexture> _alphaTexture;
	id<MTLTexture> _lightDepthTexture;
	id<MTLTexture> _shadowDepthTexture3;
	id<MTLTexture> _shadowDepthTexture4;
	id<MTLTexture> _directLightTexture;
	id<MTLTexture> _blurLightTexture;
	id<MTLTexture> _lightTexture;
	id<MTLTexture> _vertEdgeTexture;
	id<MTLTexture> _edgeTexture;
	id<MTLTexture> _vertCountTexture;
	id<MTLTexture> _countTexture;
	id<MTLTexture> _boundaryTexture;
	id<MTLTexture> _slideTexture;
	id<MTLTexture> _smoothVertSlideTexture;
	id<MTLTexture> _smoothSlideTexture;
	id<MTLTexture> _relightingMapTexture;
	id<MTLTexture> _scaledLightTexture;
	int _smoothKernelSize;
	vector<float, std::__1::allocator<float> >* _smoothKernel;
	vector<float, std::__1::allocator<float> >* _smoothIndex;
	int _edgeKernelSize;
	vector<float, std::__1::allocator<float> >* _edgeKernel;
	vector<float, std::__1::allocator<float> >* _edgeIndex;
	id<MTLBuffer> _lightBuffer;
	id<MTLSamplerState> _sampler;
	vector<Vertex, std::__1::allocator<Vertex> >* _modelVertices;
	vector<unsigned short, std::__1::allocator<unsigned short> >* _modelIndices;
	id<MTLBuffer> _vertexBuffer;
	id<MTLBuffer> _indexBuffer;
	id<MTLBuffer> _uniformBuffer_shadow3;
	id<MTLBuffer> _uniformBuffer_shadow4;
	id<MTLBuffer> _uniformBuffer_light;
	id<MTLBuffer> _uniformBuffer_vertEdge;
	id<MTLBuffer> _uniformBuffer_edge;
	id<MTLBuffer> _uniformBuffer_vertCount;
	id<MTLBuffer> _uniformBuffer_count;
	id<MTLBuffer> _uniformBuffer_slide;
	id<MTLBuffer> _uniformBuffer_smoothVertSlide;
	id<MTLBuffer> _uniformBuffer_smoothSlide;
	id<MTLBuffer> _uniformBuffer_relight;
	id<MTLBuffer> _uniformBuffer_render;
	id<MTLDepthStencilState> _depthStencilState;
	UIColor* _clearColor;
	float4x4 _modelViewProjectionMatrix;
	float4x4 _modelViewMatrix;
	 _faceCenter;
	array<Light, 5> _lights;
	int _relightingCondition;
	float _backgroundColor;
	float _weightContrast;
	BOOL _faceDetected;
	float _faceImageCenterX;
	float _faceImageCenterY;
	int _displayWidth;
	int _displayHeight;
	int _displayMode;
	BOOL _markFaceCenter;
	BOOL _skipAlpha;
	BOOL _overlayModel;
	NSObject*<OS_dispatch_queue> _synchronousRelightingCallbackQueue;
	NSObject*<OS_dispatch_semaphore> _inflightSemaphore;
	MTLRenderPassDescriptor* _faceRenderDesc1;
	MTLRenderPassDescriptor* _faceRenderDesc2;
	MTLRenderPassDescriptor* _faceRenderDesc3;
	id<MTLFunction> _function_vertex_face;
	id<MTLFunction> _function_fragment_face;
	id<MTLRenderPipelineState> _kernel_Face;
	id<MTLTexture> _facemaskRegionTexture;
	double _gpuStartTime;
	double _gpuEndTime;

}

@property (readonly) double gpuStartTime;              //@synthesize gpuStartTime=_gpuStartTime - In the implementation block
@property (readonly) double gpuEndTime;                //@synthesize gpuEndTime=_gpuEndTime - In the implementation block
-(id)init;
-(id)initWithDevice:(id)arg1 library:(id)arg2 ;
-(id)initWithDevice:(id)arg1 library:(id)arg2 bufferWidth:(unsigned long long)arg3 bufferHeight:(unsigned long long)arg4 ;
-(id)textureForImage:(id)arg1 ;
-(void)createTexturesWith:(unsigned long long)arg1 imgHeight:(unsigned long long)arg2 ;
-(void)createComputeTexturesWith:(unsigned long long)arg1 Height:(unsigned long long)arg2 ;
-(void)initKernelFunctions;
-(void)setLights;
-(void)saveTexture:(id)arg1 toImage:(id)arg2 ;
-(void)saveTexture:(id)arg1 toRaw:(id)arg2 ;
-(void)saveComputeTextures:(BOOL)arg1 ;
-(id)getSmoothSlideTexture;
-(id)getVertEdgeTexture;
-(id)getEdgeTexture;
-(void)configureRenderPipeline;
-(void)setModelwithDict:(id)arg1 pose:(vector<float, std::__1::allocator<float> >*)arg2 camera:(vector<float, std::__1::allocator<float> >*)arg3 ;
-(void)setModelwithVertices:(const float*)arg1 nVertices:(int)arg2 normals:(const float*)arg3 nNormals:(int)arg4 triIndex:(const int*)arg5 nTriIndex:(int)arg6 quadIndex:(const int*)arg7 nQuadIndex:(int)arg8 ;
-(void)generateModelNormals;
-(void)updateMatrixwithWidth:(int)arg1 height:(int)arg2 camera:(const vector<float, std::__1::allocator<float> >*)arg3 pose:(const vector<float, std::__1::allocator<float> >*)arg4 ;
-(void)updateUniforms;
-(void)enableShadowKernelToCommandBuffer:(id)arg1 ;
-(void)enableLightKernelToCommandBuffer:(id)arg1 ;
-(void)encodeRelightKernelToCommandBuffer:(id)arg1 ;
-(void)encodeClearDstKernelToCommandBuffer:(id)arg1 ;
-(void)encodeUpscaleLightKernelToCommandBuffer:(id)arg1 ;
-(void)encodeVertEdgeVertCountKernelToCommandBuffer:(id)arg1 ;
-(void)encodeVertEdgeKernelToCommandBuffer:(id)arg1 ;
-(void)encodeEdgeCountKernelToCommandBuffer:(id)arg1 ;
-(void)encodeEdgeKernelToCommandBuffer:(id)arg1 ;
-(void)encodeVertCountKernelToCommandBuffer:(id)arg1 ;
-(void)encodeCountKernelToCommandBuffer:(id)arg1 ;
-(void)encodeBoundaryKernelToCommandBuffer:(id)arg1 ;
-(void)encodeSlideKernelToCommandBuffer:(id)arg1 ;
-(void)encodeSmoothVertSlideKernelToCommandBuffer:(id)arg1 ;
-(void)encodeSmoothSlideKernelToCommandBuffer:(id)arg1 ;
-(void)encodeComputeKernelsToCommandBuffer:(id)arg1 ;
-(void)updateWithLight:(CVBufferRef)arg1 srcAlpha:(CVBufferRef)arg2 dstImage:(CVBufferRef)arg3 light:(id)arg4 faceDetected:(BOOL)arg5 faceImageCenterX:(float)arg6 faceImageCenterY:(float)arg7 displayMode:(int)arg8 markFaceCenter:(BOOL)arg9 callback:(/*^block*/id)arg10 ;
-(void)updateWithLight:(CVBufferRef)arg1 srcAlpha:(CVBufferRef)arg2 dstImage:(CVBufferRef)arg3 light:(id)arg4 faceDetected:(BOOL)arg5 vertices:(float*)arg6 nVertices:(int)arg7 normals:(float*)arg8 nNormals:(int)arg9 triIndex:(int*)arg10 nTriIndex:(int)arg11 quadIndex:(int*)arg12 nQuadIndex:(int)arg13 pose:(const vector<float, std::__1::allocator<float> >*)arg14 camera:(const vector<float, std::__1::allocator<float> >*)arg15 displayMode:(int)arg16 markFaceCenter:(BOOL)arg17 callback:(/*^block*/id)arg18 ;
-(void)updateWithLight:(CVBufferRef)arg1 srcAlpha:(CVBufferRef)arg2 dstImage:(CVBufferRef)arg3 faceDetected:(BOOL)arg4 faceModel:(id)arg5 displayMode:(int)arg6 markFaceCenter:(BOOL)arg7 skipAlpha:(BOOL)arg8 overlayModel:(BOOL)arg9 relightingCondition:(int)arg10 callback:(/*^block*/id)arg11 ;
-(void)saveTexture:(id)arg1 toHalf:(id)arg2 ;
-(void)encodeFaceKernelToCommandBuffer:(id)arg1 descriptor:(id)arg2 modelViewProjectionMatrix:(float4x4)arg3 inVertexBuffer:(id)arg4 inIndexBuffer:(id)arg5 outFacemask:(id)arg6 flag:(int)arg7 ;
-(void)encodeShiftKernelToCommandBuffer:(id)arg1 width:(int)arg2 height:(int)arg3 inDisparity:(id)arg4 inFacemask:(id)arg5 outDisparity:(id)arg6 focusDisparity:(float)arg7 backgroundDisparity:(float)arg8 ;
-(void)encodeFaceMaskToCommandBuffer:(id)arg1 inputDisparity:(id)arg2 outputDisparity:(id)arg3 outputFaceMask:(id)arg4 faceModel:(id)arg5 colorWidth:(int)arg6 colorHeight:(int)arg7 focusDisparity:(float)arg8 backgroundDisparity:(float)arg9 colorImage:(CVBufferRef)arg10 ;
-(double)gpuStartTime;
-(double)gpuEndTime;
@end

