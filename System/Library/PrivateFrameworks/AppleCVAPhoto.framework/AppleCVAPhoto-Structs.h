/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:13:40 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/AppleCVAPhoto.framework/AppleCVAPhoto
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct __CVBuffer* CVBufferRef;

typedef struct CVAVector {
	double x;
	double y;
	double z;
} CVAVector;

typedef struct CVAQuaternion {
	double w;
	double x;
	double y;
	double z;
} CVAQuaternion;

typedef struct __CVPixelBufferPool* CVPixelBufferPoolRef;

typedef struct VideoPostprocessingParams {
	BOOL useFaceAsFocus;
	float faceSizeRatioInFocus;
	BOOL fillLargeHolesWithBackground;
	float disparityIntervalInHoleSearch;
	float backgroundFillMarginFromValidDisparity_px;
	BOOL useTemporalRejection;
} VideoPostprocessingParams;

typedef struct VideoMattingStaticParams {
	unsigned colorWidth;
	unsigned colorHeight;
	unsigned shiftWidth;
	unsigned shiftHeight;
	unsigned alphaWidth;
	unsigned alphaHeight;
	unsigned kernelSize;
	unsigned nScale;
	float referenceShift;
	float guidedFilterUnconfidentWeight;
	float guidedFilterMinDistToDeweight;
	float alphaMaxLaplacian;
	float alphaContrastExponent;
	float shiftFilterColorStd;
	float shiftFilterUpdateRate;
	float maxShiftFillingInconsistency;
	float maxShiftFillingDistFromFg;
	unsigned maxDistToPushShiftEdgesFwd;
	unsigned maxDistToPushShiftEdgesRev;
	int shiftPushingBgToFgShiftDifference;
} VideoMattingStaticParams;

typedef struct array<float, 3> {
	float __elems_[3];
} array<float, 3>;

typedef struct VideoMattingDynamicParams {
	float updateRate;
	float deltaCanonicalDisparity;
	float alphaCoeffFilterColorStd;
	float alphaGuidedFilterEps;
	float alphaGammaExponent;
	float focusCanonicalDisparity;
	float backgroundCanonicalDisparity;
	float thresholdHardness;
	array<float, 3> gravity;
} VideoMattingDynamicParams;

typedef struct DynamicMetaParams {
	float mattingCoeffUpdateRate;
	float mattingCoeffUpdateRateFast;
	float mattingCoeffColorStd;
	float mattingCoeffColorStdFast;
} DynamicMetaParams;

typedef struct Preferences {
	BOOL drawFocusMachineState;
	int overlayShiftOnRendering;
	int displayFrameTime;
	int retainLastRelativeShift;
	int noiseBits;
	int fNumber_tenths;
} Preferences;

typedef struct _compressed_pair<DisparityConversion *, std::__1::default_delete<DisparityConversion> > {
	DisparityConversion __value_;
} compressed_pair<DisparityConversion *, std::__1::default_delete<DisparityConversion> >;

typedef struct unique_ptr<DisparityConversion, std::__1::default_delete<DisparityConversion> > {
	compressed_pair<DisparityConversion *, std::__1::default_delete<DisparityConversion> > __ptr_;
} unique_ptr<DisparityConversion, std::__1::default_delete<DisparityConversion> >;

typedef struct _compressed_pair<GeometricTransformation *, std::__1::default_delete<GeometricTransformation> > {
	GeometricTransformation __value_;
} compressed_pair<GeometricTransformation *, std::__1::default_delete<GeometricTransformation> >;

typedef struct unique_ptr<GeometricTransformation, std::__1::default_delete<GeometricTransformation> > {
	compressed_pair<GeometricTransformation *, std::__1::default_delete<GeometricTransformation> > __ptr_;
} unique_ptr<GeometricTransformation, std::__1::default_delete<GeometricTransformation> >;

typedef struct _compressed_pair<DisparityAutofocus *, std::__1::default_delete<DisparityAutofocus> > {
	DisparityAutofocus __value_;
} compressed_pair<DisparityAutofocus *, std::__1::default_delete<DisparityAutofocus> >;

typedef struct unique_ptr<DisparityAutofocus, std::__1::default_delete<DisparityAutofocus> > {
	compressed_pair<DisparityAutofocus *, std::__1::default_delete<DisparityAutofocus> > __ptr_;
} unique_ptr<DisparityAutofocus, std::__1::default_delete<DisparityAutofocus> >;

typedef struct _compressed_pair<DisparityStatistics *, std::__1::default_delete<DisparityStatistics> > {
	DisparityStatistics __value_;
} compressed_pair<DisparityStatistics *, std::__1::default_delete<DisparityStatistics> >;

typedef struct unique_ptr<DisparityStatistics, std::__1::default_delete<DisparityStatistics> > {
	compressed_pair<DisparityStatistics *, std::__1::default_delete<DisparityStatistics> > __ptr_;
} unique_ptr<DisparityStatistics, std::__1::default_delete<DisparityStatistics> >;

typedef struct _compressed_pair<cva::FocusStateMachine *, std::__1::default_delete<cva::FocusStateMachine> > {
	FocusStateMachine __value_;
} compressed_pair<cva::FocusStateMachine *, std::__1::default_delete<cva::FocusStateMachine> >;

typedef struct unique_ptr<cva::FocusStateMachine, std::__1::default_delete<cva::FocusStateMachine> > {
	compressed_pair<cva::FocusStateMachine *, std::__1::default_delete<cva::FocusStateMachine> > __ptr_;
} unique_ptr<cva::FocusStateMachine, std::__1::default_delete<cva::FocusStateMachine> >;

typedef struct _compressed_pair<StageLightStateMachine *, std::__1::default_delete<StageLightStateMachine> > {
	StageLightStateMachine __value_;
} compressed_pair<StageLightStateMachine *, std::__1::default_delete<StageLightStateMachine> >;

typedef struct unique_ptr<StageLightStateMachine, std::__1::default_delete<StageLightStateMachine> > {
	compressed_pair<StageLightStateMachine *, std::__1::default_delete<StageLightStateMachine> > __ptr_;
} unique_ptr<StageLightStateMachine, std::__1::default_delete<StageLightStateMachine> >;

typedef struct _compressed_pair<SdofStateMachine *, std::__1::default_delete<SdofStateMachine> > {
	SdofStateMachine __value_;
} compressed_pair<SdofStateMachine *, std::__1::default_delete<SdofStateMachine> >;

typedef struct unique_ptr<SdofStateMachine, std::__1::default_delete<SdofStateMachine> > {
	compressed_pair<SdofStateMachine *, std::__1::default_delete<SdofStateMachine> > __ptr_;
} unique_ptr<SdofStateMachine, std::__1::default_delete<SdofStateMachine> >;

typedef struct _NSZone* NSZoneRef;

typedef struct {
	unsigned long long width;
	unsigned long long height;
	unsigned long long depth;
} SCD_Struct_CV25;

typedef struct _compressed_pair<float *, std::__1::allocator<float> > {
	float __value_;
} compressed_pair<float *, std::__1::allocator<float> >;

typedef struct vector<float, std::__1::allocator<float> > {
	float __begin_;
	float __end_;
	compressed_pair<float *, std::__1::allocator<float> > __end_cap_;
} vector<float, std::__1::allocator<float> >;

typedef struct _compressed_pair<Vertex *, std::__1::allocator<Vertex> > {
	Vertex __value_;
} compressed_pair<Vertex *, std::__1::allocator<Vertex> >;

typedef struct vector<Vertex, std::__1::allocator<Vertex> > {
	Vertex __begin_;
	Vertex __end_;
	compressed_pair<Vertex *, std::__1::allocator<Vertex> > __end_cap_;
} vector<Vertex, std::__1::allocator<Vertex> >;

typedef struct _compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > {
	unsigned short __value_;
} compressed_pair<unsigned short *, std::__1::allocator<unsigned short> >;

typedef struct vector<unsigned short, std::__1::allocator<unsigned short> > {
	unsigned short __begin_;
	unsigned short __end_;
	compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > __end_cap_;
} vector<unsigned short, std::__1::allocator<unsigned short> >;

typedef struct float4x4 {
	[4 columns];
} float4x4;

typedef struct Light {
	 position;
	 direction;
	 intensity;
	 ambient;
	 diffuse;
	 specular;
	int type;
} Light;

typedef struct array<Light, 5> {
	Light __elems_[5];
} array<Light, 5>;

typedef struct CompositeConfig {
	unsigned frameNumber;
	unsigned seedGeneratorFactor;
	int noiseBits;
	float noiseBitsFactor;
	float cubeIntensity;
} CompositeConfig;

typedef struct __IOSurfaceAccelerator* IOSurfaceAcceleratorRef;

