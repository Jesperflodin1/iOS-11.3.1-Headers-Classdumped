/*
* This header is generated by classdump-dyld 1.0
* on Wednesday, August 22, 2018 at 12:13:40 AM Central European Summer Time
* Operating System: Version 11.3.1 (Build 15E302)
* Image Source: /System/Library/PrivateFrameworks/AppleCVAPhoto.framework/AppleCVAPhoto
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/


@protocol MTLDeviceSPI, MTLLibrary, MTLCommandQueue, MTLCaptureScope, MTLComputePipelineState, MTLBuffer, OS_dispatch_semaphore, MTLTexture, OS_dispatch_queue;
#import <AppleCVAPhoto/AppleCVAPhoto-Structs.h>
@class CVAFilterBox, CVAFilterHybridResampling, CVAFilterGuided, CVAFilterRenderStagelight, CVAFilterColorAlphaToFgBg, CVAFilterRenderComposite, CVAFilterDiffusion, CVAFilterInfimumConvolution, CVAFilterMaskedVariableBlur, NSObject, MPSImageBox, MPSImageAreaMin, VideoRelightingMetal, MPSImageGaussianBlur, NSData;

@interface VideoMattingMetal : NSObject {

	id<MTLDeviceSPI> _device;
	id<MTLLibrary> _defaultLibrary;
	id<MTLCommandQueue> _commandQueue;
	id<MTLCaptureScope> _captureScope;
	BOOL _mattingUsesPostprocessing;
	BOOL _renderingUsesPostprocessing;
	BOOL _enableInfConvolution;
	int _lastCommittedCommand;
	int _width;
	int _height;
	int _width2;
	int _height2;
	float _renderingShiftBlurRadius;
	float _renderingInvalidShiftFillValue;
	float _renderingLensFocalLength_mm;
	BOOL _useTemporalConfidence;
	CVAFilterBox* _boxFilter;
	CVAFilterHybridResampling* _hybridResampler;
	CVAFilterGuided* _guidedFilter;
	CVAFilterRenderStagelight* _stagelightFilter;
	CVAFilterColorAlphaToFgBg* _colorAlphaToFgBg;
	CVAFilterRenderComposite* _renderComposite;
	BOOL _doShiftDiffusion;
	CVAFilterDiffusion* _diffusion;
	CVAFilterInfimumConvolution* _infConvolution;
	float _gammaExponent;
	id<MTLComputePipelineState> _diffusionMapKernel;
	id<MTLBuffer> _diffusionMapConfig;
	id<MTLComputePipelineState> _fillBackgroundDisparityKernel;
	id<MTLComputePipelineState> _fillBackgroundDisparityKernel_faceMask;
	id<MTLBuffer> _fillBackgroundDisparityConfig;
	id<MTLComputePipelineState> _disparityConfidenceMaskKernel;
	id<MTLBuffer> _disparityConfidenceMaskConfig;
	id<MTLComputePipelineState> _domainTransformXKernel;
	id<MTLComputePipelineState> _domainTransformYKernel;
	id<MTLBuffer> _domainTransformConfig;
	id<MTLComputePipelineState> _edgeAwareFillXKernel;
	id<MTLComputePipelineState> _edgeAwareFillYKernel;
	id<MTLBuffer> _edgeAwareFillConfig;
	id<MTLComputePipelineState> _invalidDisparityMaskKernel;
	id<MTLComputePipelineState> _maxFillXKernel;
	id<MTLComputePipelineState> _maxFillYKernel;
	id<MTLComputePipelineState> _internalDisparityToCanonicalDisparityKernel;
	id<MTLBuffer> _distanceTransformConfig;
	id<MTLComputePipelineState> _distanceTransformVerticalWithForegroundMaskKernel;
	id<MTLComputePipelineState> _distanceTransformHorizontalWithWeightKernel;
	id<MTLComputePipelineState> _distanceTransformVerticalKernel;
	id<MTLComputePipelineState> _distanceTransformHorizontalKernel;
	id<MTLComputePipelineState> _distanceTransformFromValidDisparityVerticalKernel;
	id<MTLComputePipelineState> _shiftDecimateKernel;
	id<MTLComputePipelineState> _alphaFillKernel;
	id<MTLComputePipelineState> _disparityCleanupKernel;
	id<MTLComputePipelineState> _disparityCleanupKernel_firstFrame;
	id<MTLBuffer> _disparityCleanupConfig;
	id<MTLComputePipelineState> _simpleConfidenceKernel;
	id<MTLComputePipelineState> _updateConfidenceAndLastValidDisparityKernel;
	id<MTLComputePipelineState> _updateConfidenceAndLastValidDisparityKernel_useTemporalConfidence;
	id<MTLComputePipelineState> _roughDisparityKernel;
	id<MTLBuffer> _roughDisparityConfig;
	id<MTLComputePipelineState> _temporalDisparityFilterKernel;
	id<MTLComputePipelineState> _temporalDisparityFilterKernel_fallbackToInvalid;
	id<MTLComputePipelineState> _renderingShiftDeweightKernel;
	id<MTLBuffer> _shiftConfig;
	id<MTLComputePipelineState> _renderingShiftFillAndFilterKernel;
	id<MTLBuffer> _variableBlurConfig;
	CompositeConfig _noiseConfig;
	CVAFilterMaskedVariableBlur* _maskedVariableBlur;
	id<MTLComputePipelineState> _halfDownSampler;
	id<MTLComputePipelineState> _colorSimKernel;
	id<MTLBuffer> _colorSimConfig;
	id<MTLComputePipelineState> _colorSimL1Kernel;
	id<MTLComputePipelineState> _temporalCoefficientsFilterKernel;
	NSObject*<OS_dispatch_semaphore> _semaphore;
	id<MTLTexture> _rTexture;
	id<MTLTexture> _gTexture;
	id<MTLTexture> _bTexture;
	id<MTLBuffer> _rBuf;
	id<MTLBuffer> _gBuf;
	id<MTLBuffer> _bBuf;
	id<MTLTexture> _fg;
	id<MTLTexture> _fgBlurred;
	id<MTLTexture> _bg;
	id<MTLTexture> _blurredBg;
	id<MTLTexture> _deweightedShift;
	id<MTLTexture> _shift[2];
	id<MTLTexture> _blurredBgX;
	id<MTLTexture> _coc;
	id<MTLTexture> _fullResCoC;
	id<MTLTexture> _halfResCoC;
	id<MTLTexture> _bgColorLut;
	id<MTLTexture> _fgColorLut;
	id<MTLTexture> _stageLightProxyLut;
	id<MTLTexture> _stageLightLut;
	MPSImageBox* _shiftBlurBoxKernel;
	MPSImageBox* _fgBlurBoxKernel;
	MPSImageAreaMin* _fgMaskErosionKernel;
	id<MTLTexture> _gfForegroundMask;
	id<MTLTexture> _gfWeight;
	id<MTLTexture> _disparityLastValidValue[2];
	id<MTLTexture> _disparity[2];
	id<MTLTexture> _facemaskDisparity;
	id<MTLTexture> _filledDisparityTexture;
	id<MTLTexture> _filledDisparityNoInvalidTexture;
	id<MTLTexture> _temporallyFilteredDisparity;
	id<MTLTexture> _disparityConfidenceMaskTexture;
	id<MTLTexture> _smoothConfidence[2];
	id<MTLTexture> _smoothDisparity[2];
	id<MTLTexture> _roughDisparity;
	id<MTLTexture> _diffusionMapTexture;
	id<MTLTexture> _distanceFromKnownDisparityTexture;
	id<MTLTexture> _domainTransformXTexture;
	id<MTLTexture> _domainTransformYTexture;
	id<MTLTexture> _edgeAwareFillTempTexture;
	id<MTLTexture> _invalidDisparityMaskTexture;
	id<MTLTexture> _initDisparity;
	id<MTLTexture> _outputCanonicalDisparity;
	id<MTLTexture> _coeff;
	id<MTLTexture> _coeffHistory[2];
	id<MTLTexture> _scaledSource[2];
	_CVBuffer* _scaledSourceCV[2];
	id<MTLTexture> _colorSim;
	id<MTLTexture> _tempFloatR32FloatTexture;
	CVBufferRef _hybridDownsamplingIntermediateBuffer;
	BOOL _doFaceMask;
	VideoRelightingMetal* _videoRelightingMetal;
	id<MTLTexture> _facemaskRegionTexture;
	unsigned long long _frameIndex;
	MPSImageGaussianBlur* _smoothFilter;
	IOSurfaceAcceleratorRef _hwScaler;
	CVBufferRef _msrIntermediateBuffer;
	NSData* _lastBgLutData;
	NSData* _lastFgLutData;
	NSData* _lastStageLightProxyCubeData;
	NSData* _lastStageLightCubeData;
	NSObject*<OS_dispatch_queue> _synchronousRenderingCallbackQueue;
	NSObject*<OS_dispatch_semaphore> _renderingCallbackSemaphore;
	NSObject*<OS_dispatch_queue> _synchronousMattingCallbackQueue;
	NSObject*<OS_dispatch_semaphore> _mattingCallbackSemaphore;
	_sFILE* _scaledSourceFile;
	BOOL _printTimings;
	BOOL _bypassShiftCleanup;
	BOOL _isBgColorLutBlack;
	float _renderingShiftUpdateRate;

}

@property (assign) BOOL isBgColorLutBlack;                      //@synthesize isBgColorLutBlack=_isBgColorLutBlack - In the implementation block
@property (assign) float renderingShiftUpdateRate;              //@synthesize renderingShiftUpdateRate=_renderingShiftUpdateRate - In the implementation block
@property (assign) BOOL bypassShiftCleanup;                     //@synthesize bypassShiftCleanup=_bypassShiftCleanup - In the implementation block
+(void)decomposeYuvPixelBuffer:(CVBufferRef)arg1 yTexture:(id*)arg2 uvTexture:(id*)arg3 device:(id)arg4 ;
+(float)convertToCrazyDisparityFromCanonicalDisparity:(float)arg1 ;
+(void)prewarmBox:(id)arg1 device:(id)arg2 commandBuffer:(id)arg3 ;
+(void)saveTexture:(id)arg1 toFilename:(id)arg2 ;
-(void)dealloc;
-(void)initSourceTexture:(CVBufferRef)arg1 ;
-(id)initWithStaticParams:(const VideoMattingStaticParams*)arg1 renderingShiftUpdateRate:(float)arg2 renderingShiftBlurRadius:(float)arg3 renderingInvalidShiftFillValue:(float)arg4 renderingLensFocalLength_mm:(float)arg5 useTemporalConfidence:(BOOL)arg6 ;
-(void)setAlphaLut:(float)arg1 gammaExponent:(float)arg2 ;
-(id)lutTextureFromData:(id)arg1 ;
-(void)setBgLut:(id)arg1 ;
-(void)setFgLut:(id)arg1 ;
-(void)setPortraitForegroundCubeData:(id)arg1 backgroundCubeData:(id)arg2 ;
-(void)setStageLightProxyCubeData:(id)arg1 cubeData:(id)arg2 ;
-(void)encodeCopyTextureToCommandBuffer:(id)arg1 inTexture:(id)arg2 outTexture:(id)arg3 ;
-(void)encodeColorSimToCommandBuffer:(id)arg1 prevSource:(id)arg2 currSource:(id)arg3 destination:(id)arg4 similarityScaleFactor:(float)arg5 ;
-(void)encodeColorSimL1ToCommandBuffer:(id)arg1 prevSource:(id)arg2 currSource:(id)arg3 destination:(id)arg4 ;
-(void)encodeDisparityCleanupToCommandBuffer:(id)arg1 prevDisparity:(id)arg2 currDisparity:(id)arg3 colorSim:(id)arg4 cleanDisparity:(id)arg5 ;
-(void)encodeDomainTransformToCommandBuffer:(id)arg1 inputDiffusionMap:(id)arg2 inputDistanceFromKnownDisparity:(id)arg3 outputDomainTransformX:(id)arg4 outputDomainTransformY:(id)arg5 ;
-(void)encodeEdgeAwareFillToCommandBuffer:(id)arg1 inputDisparity:(id)arg2 inputDomainTransformX:(id)arg3 inputDomainTransformY:(id)arg4 outputDisparity:(id)arg5 ;
-(void)encodeInvalidDisparityMaskToCommandBuffer:(id)arg1 inputDisparity:(id)arg2 outputMask:(id)arg3 ;
-(void)encodeMaxFillToCommandBuffer:(id)arg1 inputDisparity:(id)arg2 inputMask:(id)arg3 outputDisparity:(id)arg4 ;
-(void)encodeSimpleConfidenceToCommandBuffer:(id)arg1 disparity:(id)arg2 outConfidence:(id)arg3 ;
-(void)encodeUpdateConfidenceAndLastValidDisparityToCommandBuffer:(id)arg1 disparity:(id)arg2 prevSmoothConfidence:(id)arg3 lastValidDisparityIn:(id)arg4 lastValidDisparityOut:(id)arg5 currConfidenceOut:(id)arg6 useTemporalConfidence:(BOOL)arg7 ;
-(void)encodeDisparityTemporalFilterToCommandBuffer:(id)arg1 currentDisparity:(id)arg2 previousDisparity:(id)arg3 currConfidence:(id)arg4 prevSmoothConfidence:(id)arg5 colorSim:(id)arg6 outPrevSmoothConfidence:(id)arg7 outTemporallyFilteredDisparity:(id)arg8 disparityFallbackToInvalid:(BOOL)arg9 ;
-(void)encodeDiffusionMapToCommandBuffer:(id)arg1 color:(id)arg2 diffusionMap:(id)arg3 ;
-(void)encodeFillBackgroundDisparityToCommandBuffer:(id)arg1 inputDisparity:(id)arg2 inputFacemask:(id)arg3 outputDistanceFromKnownDisparity:(id)arg4 outputDisparity:(id)arg5 backgroundDisparityValue:(float)arg6 minimumDistanceFromValidDisparity:(float)arg7 ;
-(void)encodeConfidenceMaskToCommandBuffer:(id)arg1 inputDisparity:(id)arg2 inputDisparityNoInvalid:(id)arg3 outputConfidenceMask:(id)arg4 ;
-(void)encodeOutputDisparityToCommandBuffer:(id)arg1 inputDisparity:(id)arg2 outputDisparity:(id)arg3 ;
-(void)disparityPostprocessingWithCanonicalDisparity:(CVBufferRef)arg1 color:(CVBufferRef)arg2 postProcessedDisparity:(CVBufferRef)arg3 staticParams:(const VideoMattingStaticParams*)arg4 dynamicParams:(const VideoMattingDynamicParams*)arg5 postProcessingParams:(const VideoPostprocessingParams*)arg6 facesArray:(id)arg7 faceModel:(id)arg8 isFinalStage:(BOOL)arg9 callbackQueue:(id)arg10 callback:(/*^block*/id)arg11 ;
-(void)alphaMattingWithPostprocessedDisparity:(CVBufferRef)arg1 source:(CVBufferRef)arg2 alpha:(CVBufferRef)arg3 staticParams:(const VideoMattingStaticParams*)arg4 dynamicParams:(const VideoMattingDynamicParams*)arg5 usePostprocessedDisparity:(BOOL)arg6 isFinalStage:(BOOL)arg7 callbackQueue:(id)arg8 callback:(/*^block*/id)arg9 ;
-(void)encodeFilterCoefficientToBuffer:(id)arg1 inputCoeff:(id)arg2 prevCoeff:(id)arg3 outCoeff:(id)arg4 inColorSim:(id)arg5 updateRate:(float)arg6 ;
-(CVBufferRef)createCVBufferWithWidth:(unsigned long long)arg1 height:(unsigned long long)arg2 format:(unsigned)arg3 ;
-(void)encodeScaleSourceToCommandBuffer:(id)arg1 source:(CVBufferRef)arg2 targetWidth:(unsigned long long)arg3 targetHeight:(unsigned long long)arg4 ;
-(void)encodeForegroundMaskToBuffer:(id)arg1 disparity:(id)arg2 weight:(id)arg3 foregroundMask:(id)arg4 erodedForegroundMask:(id)arg5 shiftMin:(unsigned)arg6 focusDisparity:(float)arg7 hardness:(float)arg8 minDistToDeweight:(float)arg9 unconfidentWeight:(float)arg10 ;
-(void)encodeDistanceTransformToCommandBuffer:(id)arg1 source:(id)arg2 destination:(id)arg3 ;
-(float)encodeDisparityConvertAndDecimateToCommandBuffer:(id)arg1 canonicalDisparity:(CVBufferRef)arg2 disparityOut:(id)arg3 focusCanonicalDisparity:(float)arg4 ;
-(float)getMaxCoCRadius:(float)arg1 withFocusAt:(float)arg2 withFNumber:(float)arg3 withXResolution:(float)arg4 ;
-(void)encodeShiftSmoothingToCommandBuffer:(id)arg1 srcShiftTex:(id)arg2 ;
-(void)renderContinuousWithSource:(CVBufferRef)arg1 alpha:(CVBufferRef)arg2 shift:(CVBufferRef)arg3 shiftAtInf:(float)arg4 minShiftInFocus:(float)arg5 focusCanonicalDisparity:(float)arg6 fNumber:(float)arg7 noiseBits:(float)arg8 shiftUpdateRate:(float)arg9 focusThresholdHardness:(float)arg10 cubeIntensity:(float)arg11 usePostprocessedDisparity:(BOOL)arg12 dstColor:(CVBufferRef)arg13 isFinalStage:(BOOL)arg14 callbackQueue:(id)arg15 withCallback:(/*^block*/id)arg16 ;
-(void)renderStageLightWithSource:(CVBufferRef)arg1 alpha:(CVBufferRef)arg2 shift:(CVBufferRef)arg3 dstColor:(CVBufferRef)arg4 blackBackgroundIntensity:(float)arg5 vignetteIntensity:(float)arg6 isFinalStage:(BOOL)arg7 callbackQueue:(id)arg8 withCallback:(/*^block*/id)arg9 ;
-(void)initRenderingTexturesWithWidth:(unsigned long long)arg1 height:(unsigned long long)arg2 shiftWidth:(unsigned long long)arg3 shiftHeight:(unsigned long long)arg4 ;
-(void)encode420HybridDownsamplingToCommandBuffer:(id)arg1 source:(CVBufferRef)arg2 destination:(CVBufferRef)arg3 ;
-(void)downsampleWithHWScalerSource:(CVBufferRef)arg1 destination:(CVBufferRef)arg2 ;
-(void)cropFrame:(CVBufferRef)arg1 destination:(CVBufferRef)arg2 rect:(CGRect)arg3 ;
-(void)encode420BilinearScalingToCommandBuffer:(id)arg1 source:(CVBufferRef)arg2 destination:(CVBufferRef)arg3 ;
-(void)encode420ScalingByMPSToCommandBuffer:(id)arg1 source:(CVBufferRef)arg2 destination:(CVBufferRef)arg3 ;
-(void)encodeFillAlphaToCommandBuffer:(id)arg1 alpha:(id)arg2 ;
-(float)renderingShiftUpdateRate;
-(void)setRenderingShiftUpdateRate:(float)arg1 ;
-(BOOL)bypassShiftCleanup;
-(void)setBypassShiftCleanup:(BOOL)arg1 ;
-(BOOL)isBgColorLutBlack;
-(void)setIsBgColorLutBlack:(BOOL)arg1 ;
@end

